// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: openfeed_instrument.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Openfeed {

  /// <summary>Holder for reflection information generated from openfeed_instrument.proto</summary>
  public static partial class OpenfeedInstrumentReflection {

    #region Descriptor
    /// <summary>File descriptor for openfeed_instrument.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpenfeedInstrumentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlvcGVuZmVlZF9pbnN0cnVtZW50LnByb3RvEgxvcmcub3BlbmZlZWQiih0K",
            "FEluc3RydW1lbnREZWZpbml0aW9uEhAKCG1hcmtldElkGAEgASgSEkkKDmlu",
            "c3RydW1lbnRUeXBlGAIgASgOMjEub3JnLm9wZW5mZWVkLkluc3RydW1lbnRE",
            "ZWZpbml0aW9uLkluc3RydW1lbnRUeXBlEkUKEHN1cHBvcnRCb29rVHlwZXMY",
            "AyADKA4yKy5vcmcub3BlbmZlZWQuSW5zdHJ1bWVudERlZmluaXRpb24uQm9v",
            "a1R5cGUSEQoJYm9va0RlcHRoGAQgASgREhAKCHZlbmRvcklkGAUgASgJEg4K",
            "BnN5bWJvbBgGIAEoCRITCgtkZXNjcmlwdGlvbhgHIAEoCRIPCgdjZmlDb2Rl",
            "GAggASgJEhQKDGN1cnJlbmN5Q29kZRgJIAEoCRIUCgxleGNoYW5nZUNvZGUY",
            "CiABKAkSHQoVbWluaW11bVByaWNlSW5jcmVtZW50GAsgASgCEhoKEmNvbnRy",
            "YWN0UG9pbnRWYWx1ZRgMIAEoAhI9CghzY2hlZHVsZRgNIAEoCzIrLm9yZy5v",
            "cGVuZmVlZC5JbnN0cnVtZW50RGVmaW5pdGlvbi5TY2hlZHVsZRI9CghjYWxl",
            "bmRhchgOIAEoCzIrLm9yZy5vcGVuZmVlZC5JbnN0cnVtZW50RGVmaW5pdGlv",
            "bi5DYWxlbmRhchIYChByZWNvcmRDcmVhdGVUaW1lGA8gASgSEhgKEHJlY29y",
            "ZFVwZGF0ZVRpbWUYECABKBISFAoMdGltZVpvbmVOYW1lGBEgASgJEhcKD2lu",
            "c3RydW1lbnRHcm91cBgSIAEoCRJJChBzeW1ib2xFeHBpcmF0aW9uGBMgASgL",
            "Mi8ub3JnLm9wZW5mZWVkLkluc3RydW1lbnREZWZpbml0aW9uLk1hdHVyaXR5",
            "RGF0ZRI3CgVzdGF0ZRgUIAEoDjIoLm9yZy5vcGVuZmVlZC5JbnN0cnVtZW50",
            "RGVmaW5pdGlvbi5TdGF0ZRIPCgdjaGFubmVsGBUgASgREhoKEnVuZGVybHlp",
            "bmdNYXJrZXRJZBgWIAEoEhJDCgtwcmljZUZvcm1hdBgXIAEoCzIuLm9yZy5v",
            "cGVuZmVlZC5JbnN0cnVtZW50RGVmaW5pdGlvbi5QcmljZUZvcm1hdBJPChdv",
            "cHRpb25TdHJpa2VQcmljZUZvcm1hdBgYIAEoCzIuLm9yZy5vcGVuZmVlZC5J",
            "bnN0cnVtZW50RGVmaW5pdGlvbi5QcmljZUZvcm1hdBIYChBwcmljZURlbm9t",
            "aW5hdG9yGBwgASgREhsKE3F1YW50aXR5RGVub21pbmF0b3IYHSABKBESEgoK",
            "aXNUcmFkYWJsZRgeIAEoCBIXCg90cmFuc2FjdGlvblRpbWUYMiABKBISFQoN",
            "YXV4aWxpYXJ5RGF0YRhjIAEoDBI6CgdzeW1ib2xzGGQgAygLMikub3JnLm9w",
            "ZW5mZWVkLkluc3RydW1lbnREZWZpbml0aW9uLlN5bWJvbBIVCgxvcHRpb25T",
            "dHJpa2UYyAEgASgSEkIKCm9wdGlvblR5cGUYygEgASgOMi0ub3JnLm9wZW5m",
            "ZWVkLkluc3RydW1lbnREZWZpbml0aW9uLk9wdGlvblR5cGUSRAoLb3B0aW9u",
            "U3R5bGUYywEgASgOMi4ub3JnLm9wZW5mZWVkLkluc3RydW1lbnREZWZpbml0",
            "aW9uLk9wdGlvblN0eWxlEiAKF29wdGlvblN0cmlrZURlbm9taW5hdG9yGMwB",
            "IAEoERITCgpzcHJlYWRDb2RlGNIBIAEoCRJACglzcHJlYWRMZWcY0wEgAygL",
            "Miwub3JnLm9wZW5mZWVkLkluc3RydW1lbnREZWZpbml0aW9uLlNwcmVhZExl",
            "ZxIaChF1c2VyRGVmaW5lZFNwcmVhZBjUASABKAgSEwoKbWFya2V0VGllchjV",
            "ASABKAkSIQoYZmluYW5jaWFsU3RhdHVzSW5kaWNhdG9yGNYBIAEoCRINCgRp",
            "c2luGNcBIAEoCRJGCgxjdXJyZW5jeVBhaXIY2AEgASgLMi8ub3JnLm9wZW5m",
            "ZWVkLkluc3RydW1lbnREZWZpbml0aW9uLkN1cnJlbmN5UGFpchIcChNleGNo",
            "YW5nZVNlbmRzVm9sdW1lGNkBIAEoCBIaChFleGNoYW5nZVNlbmRzSGlnaBja",
            "ASABKAgSGQoQZXhjaGFuZ2VTZW5kc0xvdxjbASABKAgSGgoRZXhjaGFuZ2VT",
            "ZW5kc09wZW4Y3AEgASgIEiMKGmNvbnNvbGlkYXRlZEZlZWRJbnN0cnVtZW50",
            "GN0BIAEoCBIdChRvcGVuT3V0Y3J5SW5zdHJ1bWVudBjeASABKAgSKgohc3lu",
            "dGhldGljQW1lcmljYW5PcHRpb25JbnN0cnVtZW50GN8BIAEoCBIdChRiYXJj",
            "aGFydEV4Y2hhbmdlQ29kZRjgASABKAkSGQoQYmFyY2hhcnRCYXNlQ29kZRjh",
            "ASABKAkSGgoRdm9sdW1lRGVub21pbmF0b3IY4gEgASgREiQKG2JpZE9mZmVy",
            "UXVhbnRpdHlEZW5vbWluYXRvchjjASABKBESKgohcHJpbWFyeUxpc3RpbmdN",
            "YXJrZXRQYXJ0aWNpcGFudElkGOQBIAEoCRIbChJzdWJzY3JpcHRpb25TeW1i",
            "b2wY5QEgASgJEkoKEGNvbnRyYWN0TWF0dXJpdHkY5gEgASgLMi8ub3JnLm9w",
            "ZW5mZWVkLkluc3RydW1lbnREZWZpbml0aW9uLk1hdHVyaXR5RGF0ZRITCgp1",
            "bmRlcmx5aW5nGOcBIAEoCRISCgljb21tb2RpdHkY6AEgASgJGkkKCFNjaGVk",
            "dWxlEj0KCHNlc3Npb25zGAEgAygLMisub3JnLm9wZW5mZWVkLkluc3RydW1l",
            "bnREZWZpbml0aW9uLlRpbWVTcGFuGjEKCFRpbWVTcGFuEhEKCXRpbWVTdGFy",
            "dBgBIAEoEhISCgp0aW1lRmluaXNoGAIgASgSGkQKCENhbGVuZGFyEjgKBmV2",
            "ZW50cxgBIAMoCzIoLm9yZy5vcGVuZmVlZC5JbnN0cnVtZW50RGVmaW5pdGlv",
            "bi5FdmVudBpRCgVFdmVudBI6CgR0eXBlGAEgASgOMiwub3JnLm9wZW5mZWVk",
            "Lkluc3RydW1lbnREZWZpbml0aW9uLkV2ZW50VHlwZRIMCgRkYXRlGAIgASgS",
            "GnoKCVNwcmVhZExlZxIQCghtYXJrZXRJZBgBIAEoEhINCgVyYXRpbxgCIAEo",
            "ERIOCgZzeW1ib2wYAyABKAkSEgoKbG9uZ1N5bWJvbBgEIAEoCRIWCg5sZWdP",
            "cHRpb25EZWx0YRgFIAEoAhIQCghsZWdQcmljZRgGIAEoAho4CgxNYXR1cml0",
            "eURhdGUSDAoEeWVhchgBIAEoERINCgVtb250aBgCIAEoERILCgNkYXkYAyAB",
            "KBEaPAoGU3ltYm9sEg4KBnZlbmRvchgBIAEoCRIOCgZzeW1ib2wYAiABKAkS",
            "EgoKbG9uZ1N5bWJvbBgDIAEoCRrRAQoLUHJpY2VGb3JtYXQSFAoMaXNGcmFj",
            "dGlvbmFsGAEgASgIEhMKC2Rlbm9taW5hdG9yGAIgASgREhYKDnN1YkRlbm9t",
            "aW5hdG9yGAQgASgREksKCXN1YkZvcm1hdBgGIAEoDjI4Lm9yZy5vcGVuZmVl",
            "ZC5JbnN0cnVtZW50RGVmaW5pdGlvbi5QcmljZUZvcm1hdC5TdWJGb3JtYXQi",
            "MgoJU3ViRm9ybWF0EggKBEZMQVQQABIOCgpGUkFDVElPTkFMEAESCwoHREVD",
            "SU1BTBACGjQKDEN1cnJlbmN5UGFpchIRCgljdXJyZW5jeTEYASABKAkSEQoJ",
            "Y3VycmVuY3kyGAIgASgJIscBCg5JbnN0cnVtZW50VHlwZRIbChdVTktOT1dO",
            "X0lOU1RSVU1FTlRfVFlQRRAAEgkKBUZPUkVYEAESCQoFSU5ERVgQAhIKCgZF",
            "UVVJVFkQAxIKCgZGVVRVUkUQBBIKCgZPUFRJT04QBRIKCgZTUFJFQUQQBhIP",
            "CgtNVVRVQUxfRlVORBAHEhUKEU1PTkVZX01BUktFVF9GVU5EEAgSFwoTVVNF",
            "Ul9ERUZJTkVEX1NQUkVBRBAJEhEKDUVRVUlUWV9PUFRJT04QCiJaCghCb29r",
            "VHlwZRIVChFVTktOT1dOX0JPT0tfVFlQRRAAEg8KC1RPUF9PRl9CT09LEAES",
            "FQoRUFJJQ0VfTEVWRUxfREVQVEgQAhIPCgtPUkRFUl9ERVBUSBADIjgKCk9w",
            "dGlvblR5cGUSFwoTVU5LTk9XTl9PUFRJT05fVFlQRRAAEggKBENBTEwQARIH",
            "CgNQVVQQAiJRCgtPcHRpb25TdHlsZRIZChVVTktOT1dOX09QVElPTlNfU1RZ",
            "TEUQABILCgdERUZBVUxUEAESDAoIQU1FUklDQU4QAhIMCghFVVJPUEVBThAD",
            "IjMKBVN0YXRlEhEKDVVOS05PV05fU1RBVEUQABIKCgZBQ1RJVkUQARILCgdQ",
            "QVNTSVZFEAIizwIKCUV2ZW50VHlwZRIWChJVTktOT1dOX0VWRU5UX1RZUEUQ",
            "ABIUChBGSVJTVF9UUkFERV9EQVRFEAESEwoPTEFTVF9UUkFERV9EQVRFEAIS",
            "EQoNTUFUVVJJVFlfREFURRAKEhcKE0ZJUlNUX0RFTElWRVJZX0RBVEUQCxIW",
            "ChJMQVNUX0RFTElWRVJZX0RBVEUQDBIVChFGSVJTVF9OT1RJQ0VfREFURRAN",
            "EhQKEExBU1RfTk9USUNFX0RBVEUQDhIWChJGSVJTVF9IT0xESU5HX0RBVEUQ",
            "DxIVChFMQVNUX0hPTERJTkdfREFURRAQEhcKE0ZJUlNUX1BPU0lUSU9OX0RB",
            "VEUQERIWChJMQVNUX1BPU0lUSU9OX0RBVEUQEhIXChNERUxJVkVSWV9TVEFS",
            "VF9EQVRFEB4SFQoRREVMSVZFUllfRU5EX0RBVEUQH0IHSAFQAaABAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition), global::Org.Openfeed.InstrumentDefinition.Parser, new[]{ "MarketId", "InstrumentType", "SupportBookTypes", "BookDepth", "VendorId", "Symbol", "Description", "CfiCode", "CurrencyCode", "ExchangeCode", "MinimumPriceIncrement", "ContractPointValue", "Schedule", "Calendar", "RecordCreateTime", "RecordUpdateTime", "TimeZoneName", "InstrumentGroup", "SymbolExpiration", "State", "Channel", "UnderlyingMarketId", "PriceFormat", "OptionStrikePriceFormat", "PriceDenominator", "QuantityDenominator", "IsTradable", "TransactionTime", "AuxiliaryData", "Symbols", "OptionStrike", "OptionType", "OptionStyle", "OptionStrikeDenominator", "SpreadCode", "SpreadLeg", "UserDefinedSpread", "MarketTier", "FinancialStatusIndicator", "Isin", "CurrencyPair", "ExchangeSendsVolume", "ExchangeSendsHigh", "ExchangeSendsLow", "ExchangeSendsOpen", "ConsolidatedFeedInstrument", "OpenOutcryInstrument", "SyntheticAmericanOptionInstrument", "BarchartExchangeCode", "BarchartBaseCode", "VolumeDenominator", "BidOfferQuantityDenominator", "PrimaryListingMarketParticipantId", "SubscriptionSymbol", "ContractMaturity", "Underlying", "Commodity" }, null, new[]{ typeof(global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType), typeof(global::Org.Openfeed.InstrumentDefinition.Types.BookType), typeof(global::Org.Openfeed.InstrumentDefinition.Types.OptionType), typeof(global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle), typeof(global::Org.Openfeed.InstrumentDefinition.Types.State), typeof(global::Org.Openfeed.InstrumentDefinition.Types.EventType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.Schedule), global::Org.Openfeed.InstrumentDefinition.Types.Schedule.Parser, new[]{ "Sessions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan), global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan.Parser, new[]{ "TimeStart", "TimeFinish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.Calendar), global::Org.Openfeed.InstrumentDefinition.Types.Calendar.Parser, new[]{ "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.Event), global::Org.Openfeed.InstrumentDefinition.Types.Event.Parser, new[]{ "Type", "Date" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg), global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg.Parser, new[]{ "MarketId", "Ratio", "Symbol", "LongSymbol", "LegOptionDelta", "LegPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate), global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate.Parser, new[]{ "Year", "Month", "Day" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.Symbol), global::Org.Openfeed.InstrumentDefinition.Types.Symbol.Parser, new[]{ "Vendor", "Symbol_", "LongSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat), global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Parser, new[]{ "IsFractional", "Denominator", "SubDenominator", "SubFormat" }, null, new[]{ typeof(global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair), global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair.Parser, new[]{ "Currency1", "Currency2" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentDefinition : pb::IMessage<InstrumentDefinition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentDefinition> _parser = new pb::MessageParser<InstrumentDefinition>(() => new InstrumentDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedInstrumentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition(InstrumentDefinition other) : this() {
      marketId_ = other.marketId_;
      instrumentType_ = other.instrumentType_;
      supportBookTypes_ = other.supportBookTypes_.Clone();
      bookDepth_ = other.bookDepth_;
      vendorId_ = other.vendorId_;
      symbol_ = other.symbol_;
      description_ = other.description_;
      cfiCode_ = other.cfiCode_;
      currencyCode_ = other.currencyCode_;
      exchangeCode_ = other.exchangeCode_;
      minimumPriceIncrement_ = other.minimumPriceIncrement_;
      contractPointValue_ = other.contractPointValue_;
      schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
      calendar_ = other.calendar_ != null ? other.calendar_.Clone() : null;
      recordCreateTime_ = other.recordCreateTime_;
      recordUpdateTime_ = other.recordUpdateTime_;
      timeZoneName_ = other.timeZoneName_;
      instrumentGroup_ = other.instrumentGroup_;
      symbolExpiration_ = other.symbolExpiration_ != null ? other.symbolExpiration_.Clone() : null;
      state_ = other.state_;
      channel_ = other.channel_;
      underlyingMarketId_ = other.underlyingMarketId_;
      priceFormat_ = other.priceFormat_ != null ? other.priceFormat_.Clone() : null;
      optionStrikePriceFormat_ = other.optionStrikePriceFormat_ != null ? other.optionStrikePriceFormat_.Clone() : null;
      priceDenominator_ = other.priceDenominator_;
      quantityDenominator_ = other.quantityDenominator_;
      isTradable_ = other.isTradable_;
      transactionTime_ = other.transactionTime_;
      auxiliaryData_ = other.auxiliaryData_;
      symbols_ = other.symbols_.Clone();
      optionStrike_ = other.optionStrike_;
      optionType_ = other.optionType_;
      optionStyle_ = other.optionStyle_;
      optionStrikeDenominator_ = other.optionStrikeDenominator_;
      spreadCode_ = other.spreadCode_;
      spreadLeg_ = other.spreadLeg_.Clone();
      userDefinedSpread_ = other.userDefinedSpread_;
      marketTier_ = other.marketTier_;
      financialStatusIndicator_ = other.financialStatusIndicator_;
      isin_ = other.isin_;
      currencyPair_ = other.currencyPair_ != null ? other.currencyPair_.Clone() : null;
      exchangeSendsVolume_ = other.exchangeSendsVolume_;
      exchangeSendsHigh_ = other.exchangeSendsHigh_;
      exchangeSendsLow_ = other.exchangeSendsLow_;
      exchangeSendsOpen_ = other.exchangeSendsOpen_;
      consolidatedFeedInstrument_ = other.consolidatedFeedInstrument_;
      openOutcryInstrument_ = other.openOutcryInstrument_;
      syntheticAmericanOptionInstrument_ = other.syntheticAmericanOptionInstrument_;
      barchartExchangeCode_ = other.barchartExchangeCode_;
      barchartBaseCode_ = other.barchartBaseCode_;
      volumeDenominator_ = other.volumeDenominator_;
      bidOfferQuantityDenominator_ = other.bidOfferQuantityDenominator_;
      primaryListingMarketParticipantId_ = other.primaryListingMarketParticipantId_;
      subscriptionSymbol_ = other.subscriptionSymbol_;
      contractMaturity_ = other.contractMaturity_ != null ? other.contractMaturity_.Clone() : null;
      underlying_ = other.underlying_;
      commodity_ = other.commodity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition Clone() {
      return new InstrumentDefinition(this);
    }

    /// <summary>Field number for the "marketId" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private long marketId_;
    /// <summary>
    //// Unique ID used in the data feed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "instrumentType" field.</summary>
    public const int InstrumentTypeFieldNumber = 2;
    private global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType instrumentType_ = global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType;
    /// <summary>
    //// Instrument type as enum...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = value;
      }
    }

    /// <summary>Field number for the "supportBookTypes" field.</summary>
    public const int SupportBookTypesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Org.Openfeed.InstrumentDefinition.Types.BookType> _repeated_supportBookTypes_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Org.Openfeed.InstrumentDefinition.Types.BookType) x);
    private readonly pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.BookType> supportBookTypes_ = new pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.BookType>();
    /// <summary>
    //// Supported Book Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.BookType> SupportBookTypes {
      get { return supportBookTypes_; }
    }

    /// <summary>Field number for the "bookDepth" field.</summary>
    public const int BookDepthFieldNumber = 4;
    private int bookDepth_;
    /// <summary>
    //// Maximum depth of market-by-price order book
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BookDepth {
      get { return bookDepth_; }
      set {
        bookDepth_ = value;
      }
    }

    /// <summary>Field number for the "vendorId" field.</summary>
    public const int VendorIdFieldNumber = 5;
    private string vendorId_ = "";
    /// <summary>
    //// The name of the market data vendor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VendorId {
      get { return vendorId_; }
      set {
        vendorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 6;
    private string symbol_ = "";
    /// <summary>
    //// Human readable market symbol, assigned by the exchange or venue.
    /// Not necessarily unique as the exchange or vendor could assign the same symbol to different
    /// instruments, for example if the instruments trade on different exchanges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    /// <summary>
    //// Human readable market description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cfiCode" field.</summary>
    public const int CfiCodeFieldNumber = 8;
    private string cfiCode_ = "";
    /// <summary>
    //// Market CFI code: http://en.wikipedia.org/wiki/ISO_10962
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencyCode" field.</summary>
    public const int CurrencyCodeFieldNumber = 9;
    private string currencyCode_ = "";
    /// <summary>
    //// Market currency code: http://en.wikipedia.org/wiki/ISO_4217
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchangeCode" field.</summary>
    public const int ExchangeCodeFieldNumber = 10;
    private string exchangeCode_ = "";
    /// <summary>
    /// Market exchange code: http://en.wikipedia.org/wiki/ISO_10383
    /// For inter-exchange spreads, use the leg MICs separated by a hyphen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeCode {
      get { return exchangeCode_; }
      set {
        exchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimumPriceIncrement" field.</summary>
    public const int MinimumPriceIncrementFieldNumber = 11;
    private float minimumPriceIncrement_;
    /// <summary>
    //// Minimum price increment in market currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinimumPriceIncrement {
      get { return minimumPriceIncrement_; }
      set {
        minimumPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "contractPointValue" field.</summary>
    public const int ContractPointValueFieldNumber = 12;
    private float contractPointValue_;
    /// <summary>
    //// Contract point value in market currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContractPointValue {
      get { return contractPointValue_; }
      set {
        contractPointValue_ = value;
      }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 13;
    private global::Org.Openfeed.InstrumentDefinition.Types.Schedule schedule_;
    /// <summary>
    //// Trading schedule for a typical week
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.Schedule Schedule {
      get { return schedule_; }
      set {
        schedule_ = value;
      }
    }

    /// <summary>Field number for the "calendar" field.</summary>
    public const int CalendarFieldNumber = 14;
    private global::Org.Openfeed.InstrumentDefinition.Types.Calendar calendar_;
    /// <summary>
    //// Trading calendar (expiration, notice days, holidays?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.Calendar Calendar {
      get { return calendar_; }
      set {
        calendar_ = value;
      }
    }

    /// <summary>Field number for the "recordCreateTime" field.</summary>
    public const int RecordCreateTimeFieldNumber = 15;
    private long recordCreateTime_;
    /// <summary>
    //// UTC Timestamp of creation, nano seconds since Unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RecordCreateTime {
      get { return recordCreateTime_; }
      set {
        recordCreateTime_ = value;
      }
    }

    /// <summary>Field number for the "recordUpdateTime" field.</summary>
    public const int RecordUpdateTimeFieldNumber = 16;
    private long recordUpdateTime_;
    /// <summary>
    //// UTC Timestamp of update, nano seconds since Unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RecordUpdateTime {
      get { return recordUpdateTime_; }
      set {
        recordUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "timeZoneName" field.</summary>
    public const int TimeZoneNameFieldNumber = 17;
    private string timeZoneName_ = "";
    /// <summary>
    //// Market time zone TZ database name.
    /// Permanent. Can be resolved into timeZoneOffset for given date/time.
    /// See http://joda-time.sourceforge.net/timezones.html
    /// See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimeZoneName {
      get { return timeZoneName_; }
      set {
        timeZoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrumentGroup" field.</summary>
    public const int InstrumentGroupFieldNumber = 18;
    private string instrumentGroup_ = "";
    /// <summary>
    //// Identifies a logical grouping of instruments. By product, for example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroup {
      get { return instrumentGroup_; }
      set {
        instrumentGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbolExpiration" field.</summary>
    public const int SymbolExpirationFieldNumber = 19;
    private global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate symbolExpiration_;
    /// <summary>
    //// The Date of expiration for futures and options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate SymbolExpiration {
      get { return symbolExpiration_; }
      set {
        symbolExpiration_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 20;
    private global::Org.Openfeed.InstrumentDefinition.Types.State state_ = global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState;
    /// <summary>
    //// active: can have market state updates, can have historical data
    /// passive: can NOT have market state updates, but can have historical data
    /// normally "active" means newly listed or currently non expired markets
    /// normally "passive" means expired options, de-listed equities, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 21;
    private int channel_;
    /// <summary>
    //// The channel that updates for this instrument will appear on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "underlyingMarketId" field.</summary>
    public const int UnderlyingMarketIdFieldNumber = 22;
    private long underlyingMarketId_;
    /// <summary>
    //// The marketId of the underlying asset.
    /// Used by Futures and Options when the underlying instrument is defined by the vendor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UnderlyingMarketId {
      get { return underlyingMarketId_; }
      set {
        underlyingMarketId_ = value;
      }
    }

    /// <summary>Field number for the "priceFormat" field.</summary>
    public const int PriceFormatFieldNumber = 23;
    private global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat priceFormat_;
    /// <summary>
    //// Display format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "optionStrikePriceFormat" field.</summary>
    public const int OptionStrikePriceFormatFieldNumber = 24;
    private global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat optionStrikePriceFormat_;
    /// <summary>
    //// Strike price display format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat OptionStrikePriceFormat {
      get { return optionStrikePriceFormat_; }
      set {
        optionStrikePriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "priceDenominator" field.</summary>
    public const int PriceDenominatorFieldNumber = 28;
    private int priceDenominator_;
    /// <summary>
    //// Divide prices by this value to get real price values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PriceDenominator {
      get { return priceDenominator_; }
      set {
        priceDenominator_ = value;
      }
    }

    /// <summary>Field number for the "quantityDenominator" field.</summary>
    public const int QuantityDenominatorFieldNumber = 29;
    private int quantityDenominator_;
    /// <summary>
    //// Divide trade quantities by this value to get real quantities 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QuantityDenominator {
      get { return quantityDenominator_; }
      set {
        quantityDenominator_ = value;
      }
    }

    /// <summary>Field number for the "isTradable" field.</summary>
    public const int IsTradableFieldNumber = 30;
    private bool isTradable_;
    /// <summary>
    //// true if this is a tradable instrument
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTradable {
      get { return isTradable_; }
      set {
        isTradable_ = value;
      }
    }

    /// <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 50;
    private long transactionTime_;
    /// <summary>
    //// UTC timestamp of transaction, nano seconds since Unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    /// <summary>Field number for the "auxiliaryData" field.</summary>
    public const int AuxiliaryDataFieldNumber = 99;
    private pb::ByteString auxiliaryData_ = pb::ByteString.Empty;
    /// <summary>
    //// For internal use only.   Ignore
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AuxiliaryData {
      get { return auxiliaryData_; }
      set {
        auxiliaryData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Org.Openfeed.InstrumentDefinition.Types.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(802, global::Org.Openfeed.InstrumentDefinition.Types.Symbol.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Symbol> symbols_ = new pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Symbol>();
    /// <summary>
    //// List of alternate symbols for this instrument.  A single instrument
    /// may be provided by many different market data vendors, each with
    /// their own unique symbology. Allows this instrument to be tagged
    /// with as many vendor symbols as necessary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Symbol> Symbols {
      get { return symbols_; }
    }

    /// <summary>Field number for the "optionStrike" field.</summary>
    public const int OptionStrikeFieldNumber = 200;
    private long optionStrike_;
    /// <summary>
    //// Option strike price in market currency.  Multiply by
    //// factorOptionsStrike to get actual strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OptionStrike {
      get { return optionStrike_; }
      set {
        optionStrike_ = value;
      }
    }

    /// <summary>Field number for the "optionType" field.</summary>
    public const int OptionTypeFieldNumber = 202;
    private global::Org.Openfeed.InstrumentDefinition.Types.OptionType optionType_ = global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType;
    /// <summary>
    //// Option type: call vs put.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.OptionType OptionType {
      get { return optionType_; }
      set {
        optionType_ = value;
      }
    }

    /// <summary>Field number for the "optionStyle" field.</summary>
    public const int OptionStyleFieldNumber = 203;
    private global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle optionStyle_ = global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle;
    /// <summary>
    //// Option style : American vs European.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle OptionStyle {
      get { return optionStyle_; }
      set {
        optionStyle_ = value;
      }
    }

    /// <summary>Field number for the "optionStrikeDenominator" field.</summary>
    public const int OptionStrikeDenominatorFieldNumber = 204;
    private int optionStrikeDenominator_;
    /// <summary>
    //// Divide optionStrike by this value to get real strike price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OptionStrikeDenominator {
      get { return optionStrikeDenominator_; }
      set {
        optionStrikeDenominator_ = value;
      }
    }

    /// <summary>Field number for the "spreadCode" field.</summary>
    public const int SpreadCodeFieldNumber = 210;
    private string spreadCode_ = "";
    /// <summary>
    //// Spread type, can be vendor specific
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpreadCode {
      get { return spreadCode_; }
      set {
        spreadCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spreadLeg" field.</summary>
    public const int SpreadLegFieldNumber = 211;
    private static readonly pb::FieldCodec<global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg> _repeated_spreadLeg_codec
        = pb::FieldCodec.ForMessage(1690, global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg> spreadLeg_ = new pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg>();
    /// <summary>
    //// Ordered list of underlying legs in a spread.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.SpreadLeg> SpreadLeg {
      get { return spreadLeg_; }
    }

    /// <summary>Field number for the "userDefinedSpread" field.</summary>
    public const int UserDefinedSpreadFieldNumber = 212;
    private bool userDefinedSpread_;
    /// <summary>
    //// true if user defined spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UserDefinedSpread {
      get { return userDefinedSpread_; }
      set {
        userDefinedSpread_ = value;
      }
    }

    /// <summary>Field number for the "marketTier" field.</summary>
    public const int MarketTierFieldNumber = 213;
    private string marketTier_ = "";
    /// <summary>
    //// Listing market classification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarketTier {
      get { return marketTier_; }
      set {
        marketTier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "financialStatusIndicator" field.</summary>
    public const int FinancialStatusIndicatorFieldNumber = 214;
    private string financialStatusIndicator_ = "";
    /// <summary>
    //// Current financial status of the issuer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FinancialStatusIndicator {
      get { return financialStatusIndicator_; }
      set {
        financialStatusIndicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 215;
    private string isin_ = "";
    /// <summary>
    //// ISIN: https://en.wikipedia.org/wiki/International_Securities_Identification_Number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencyPair" field.</summary>
    public const int CurrencyPairFieldNumber = 216;
    private global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair currencyPair_;
    /// <summary>
    //// Break out of currency pair
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair CurrencyPair {
      get { return currencyPair_; }
      set {
        currencyPair_ = value;
      }
    }

    /// <summary>Field number for the "exchangeSendsVolume" field.</summary>
    public const int ExchangeSendsVolumeFieldNumber = 217;
    private bool exchangeSendsVolume_;
    /// <summary>
    //// true if exchange sends volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExchangeSendsVolume {
      get { return exchangeSendsVolume_; }
      set {
        exchangeSendsVolume_ = value;
      }
    }

    /// <summary>Field number for the "exchangeSendsHigh" field.</summary>
    public const int ExchangeSendsHighFieldNumber = 218;
    private bool exchangeSendsHigh_;
    /// <summary>
    //// true if exchange sends high.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExchangeSendsHigh {
      get { return exchangeSendsHigh_; }
      set {
        exchangeSendsHigh_ = value;
      }
    }

    /// <summary>Field number for the "exchangeSendsLow" field.</summary>
    public const int ExchangeSendsLowFieldNumber = 219;
    private bool exchangeSendsLow_;
    /// <summary>
    //// true if exchange sends low.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExchangeSendsLow {
      get { return exchangeSendsLow_; }
      set {
        exchangeSendsLow_ = value;
      }
    }

    /// <summary>Field number for the "exchangeSendsOpen" field.</summary>
    public const int ExchangeSendsOpenFieldNumber = 220;
    private bool exchangeSendsOpen_;
    /// <summary>
    //// true if exchange sends open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExchangeSendsOpen {
      get { return exchangeSendsOpen_; }
      set {
        exchangeSendsOpen_ = value;
      }
    }

    /// <summary>Field number for the "consolidatedFeedInstrument" field.</summary>
    public const int ConsolidatedFeedInstrumentFieldNumber = 221;
    private bool consolidatedFeedInstrument_;
    /// <summary>
    //// true if this instrument represents consolidated NBBO.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConsolidatedFeedInstrument {
      get { return consolidatedFeedInstrument_; }
      set {
        consolidatedFeedInstrument_ = value;
      }
    }

    /// <summary>Field number for the "openOutcryInstrument" field.</summary>
    public const int OpenOutcryInstrumentFieldNumber = 222;
    private bool openOutcryInstrument_;
    /// <summary>
    //// true if this instrument represents Pit symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OpenOutcryInstrument {
      get { return openOutcryInstrument_; }
      set {
        openOutcryInstrument_ = value;
      }
    }

    /// <summary>Field number for the "syntheticAmericanOptionInstrument" field.</summary>
    public const int SyntheticAmericanOptionInstrumentFieldNumber = 223;
    private bool syntheticAmericanOptionInstrument_;
    /// <summary>
    //// true if this instrument generated FX option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SyntheticAmericanOptionInstrument {
      get { return syntheticAmericanOptionInstrument_; }
      set {
        syntheticAmericanOptionInstrument_ = value;
      }
    }

    /// <summary>Field number for the "barchartExchangeCode" field.</summary>
    public const int BarchartExchangeCodeFieldNumber = 224;
    private string barchartExchangeCode_ = "";
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarchartExchangeCode {
      get { return barchartExchangeCode_; }
      set {
        barchartExchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barchartBaseCode" field.</summary>
    public const int BarchartBaseCodeFieldNumber = 225;
    private string barchartBaseCode_ = "";
    /// <summary>
    //// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarchartBaseCode {
      get { return barchartBaseCode_; }
      set {
        barchartBaseCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volumeDenominator" field.</summary>
    public const int VolumeDenominatorFieldNumber = 226;
    private int volumeDenominator_;
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolumeDenominator {
      get { return volumeDenominator_; }
      set {
        volumeDenominator_ = value;
      }
    }

    /// <summary>Field number for the "bidOfferQuantityDenominator" field.</summary>
    public const int BidOfferQuantityDenominatorFieldNumber = 227;
    private int bidOfferQuantityDenominator_;
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidOfferQuantityDenominator {
      get { return bidOfferQuantityDenominator_; }
      set {
        bidOfferQuantityDenominator_ = value;
      }
    }

    /// <summary>Field number for the "primaryListingMarketParticipantId" field.</summary>
    public const int PrimaryListingMarketParticipantIdFieldNumber = 228;
    private string primaryListingMarketParticipantId_ = "";
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryListingMarketParticipantId {
      get { return primaryListingMarketParticipantId_; }
      set {
        primaryListingMarketParticipantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subscriptionSymbol" field.</summary>
    public const int SubscriptionSymbolFieldNumber = 229;
    private string subscriptionSymbol_ = "";
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SubscriptionSymbol {
      get { return subscriptionSymbol_; }
      set {
        subscriptionSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contractMaturity" field.</summary>
    public const int ContractMaturityFieldNumber = 230;
    private global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate contractMaturity_;
    /// <summary>
    //// The Month/ Day of expiration for futures and options. Corresponds to the expiration month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate ContractMaturity {
      get { return contractMaturity_; }
      set {
        contractMaturity_ = value;
      }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 231;
    private string underlying_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Underlying {
      get { return underlying_; }
      set {
        underlying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commodity" field.</summary>
    public const int CommodityFieldNumber = 232;
    private string commodity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Commodity {
      get { return commodity_; }
      set {
        commodity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if(!supportBookTypes_.Equals(other.supportBookTypes_)) return false;
      if (BookDepth != other.BookDepth) return false;
      if (VendorId != other.VendorId) return false;
      if (Symbol != other.Symbol) return false;
      if (Description != other.Description) return false;
      if (CfiCode != other.CfiCode) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (ExchangeCode != other.ExchangeCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinimumPriceIncrement, other.MinimumPriceIncrement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContractPointValue, other.ContractPointValue)) return false;
      if (!object.Equals(Schedule, other.Schedule)) return false;
      if (!object.Equals(Calendar, other.Calendar)) return false;
      if (RecordCreateTime != other.RecordCreateTime) return false;
      if (RecordUpdateTime != other.RecordUpdateTime) return false;
      if (TimeZoneName != other.TimeZoneName) return false;
      if (InstrumentGroup != other.InstrumentGroup) return false;
      if (!object.Equals(SymbolExpiration, other.SymbolExpiration)) return false;
      if (State != other.State) return false;
      if (Channel != other.Channel) return false;
      if (UnderlyingMarketId != other.UnderlyingMarketId) return false;
      if (!object.Equals(PriceFormat, other.PriceFormat)) return false;
      if (!object.Equals(OptionStrikePriceFormat, other.OptionStrikePriceFormat)) return false;
      if (PriceDenominator != other.PriceDenominator) return false;
      if (QuantityDenominator != other.QuantityDenominator) return false;
      if (IsTradable != other.IsTradable) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (AuxiliaryData != other.AuxiliaryData) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      if (OptionStrike != other.OptionStrike) return false;
      if (OptionType != other.OptionType) return false;
      if (OptionStyle != other.OptionStyle) return false;
      if (OptionStrikeDenominator != other.OptionStrikeDenominator) return false;
      if (SpreadCode != other.SpreadCode) return false;
      if(!spreadLeg_.Equals(other.spreadLeg_)) return false;
      if (UserDefinedSpread != other.UserDefinedSpread) return false;
      if (MarketTier != other.MarketTier) return false;
      if (FinancialStatusIndicator != other.FinancialStatusIndicator) return false;
      if (Isin != other.Isin) return false;
      if (!object.Equals(CurrencyPair, other.CurrencyPair)) return false;
      if (ExchangeSendsVolume != other.ExchangeSendsVolume) return false;
      if (ExchangeSendsHigh != other.ExchangeSendsHigh) return false;
      if (ExchangeSendsLow != other.ExchangeSendsLow) return false;
      if (ExchangeSendsOpen != other.ExchangeSendsOpen) return false;
      if (ConsolidatedFeedInstrument != other.ConsolidatedFeedInstrument) return false;
      if (OpenOutcryInstrument != other.OpenOutcryInstrument) return false;
      if (SyntheticAmericanOptionInstrument != other.SyntheticAmericanOptionInstrument) return false;
      if (BarchartExchangeCode != other.BarchartExchangeCode) return false;
      if (BarchartBaseCode != other.BarchartBaseCode) return false;
      if (VolumeDenominator != other.VolumeDenominator) return false;
      if (BidOfferQuantityDenominator != other.BidOfferQuantityDenominator) return false;
      if (PrimaryListingMarketParticipantId != other.PrimaryListingMarketParticipantId) return false;
      if (SubscriptionSymbol != other.SubscriptionSymbol) return false;
      if (!object.Equals(ContractMaturity, other.ContractMaturity)) return false;
      if (Underlying != other.Underlying) return false;
      if (Commodity != other.Commodity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0L) hash ^= MarketId.GetHashCode();
      if (InstrumentType != global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType) hash ^= InstrumentType.GetHashCode();
      hash ^= supportBookTypes_.GetHashCode();
      if (BookDepth != 0) hash ^= BookDepth.GetHashCode();
      if (VendorId.Length != 0) hash ^= VendorId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (CfiCode.Length != 0) hash ^= CfiCode.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (ExchangeCode.Length != 0) hash ^= ExchangeCode.GetHashCode();
      if (MinimumPriceIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinimumPriceIncrement);
      if (ContractPointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContractPointValue);
      if (schedule_ != null) hash ^= Schedule.GetHashCode();
      if (calendar_ != null) hash ^= Calendar.GetHashCode();
      if (RecordCreateTime != 0L) hash ^= RecordCreateTime.GetHashCode();
      if (RecordUpdateTime != 0L) hash ^= RecordUpdateTime.GetHashCode();
      if (TimeZoneName.Length != 0) hash ^= TimeZoneName.GetHashCode();
      if (InstrumentGroup.Length != 0) hash ^= InstrumentGroup.GetHashCode();
      if (symbolExpiration_ != null) hash ^= SymbolExpiration.GetHashCode();
      if (State != global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState) hash ^= State.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (UnderlyingMarketId != 0L) hash ^= UnderlyingMarketId.GetHashCode();
      if (priceFormat_ != null) hash ^= PriceFormat.GetHashCode();
      if (optionStrikePriceFormat_ != null) hash ^= OptionStrikePriceFormat.GetHashCode();
      if (PriceDenominator != 0) hash ^= PriceDenominator.GetHashCode();
      if (QuantityDenominator != 0) hash ^= QuantityDenominator.GetHashCode();
      if (IsTradable != false) hash ^= IsTradable.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (AuxiliaryData.Length != 0) hash ^= AuxiliaryData.GetHashCode();
      hash ^= symbols_.GetHashCode();
      if (OptionStrike != 0L) hash ^= OptionStrike.GetHashCode();
      if (OptionType != global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType) hash ^= OptionType.GetHashCode();
      if (OptionStyle != global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle) hash ^= OptionStyle.GetHashCode();
      if (OptionStrikeDenominator != 0) hash ^= OptionStrikeDenominator.GetHashCode();
      if (SpreadCode.Length != 0) hash ^= SpreadCode.GetHashCode();
      hash ^= spreadLeg_.GetHashCode();
      if (UserDefinedSpread != false) hash ^= UserDefinedSpread.GetHashCode();
      if (MarketTier.Length != 0) hash ^= MarketTier.GetHashCode();
      if (FinancialStatusIndicator.Length != 0) hash ^= FinancialStatusIndicator.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (currencyPair_ != null) hash ^= CurrencyPair.GetHashCode();
      if (ExchangeSendsVolume != false) hash ^= ExchangeSendsVolume.GetHashCode();
      if (ExchangeSendsHigh != false) hash ^= ExchangeSendsHigh.GetHashCode();
      if (ExchangeSendsLow != false) hash ^= ExchangeSendsLow.GetHashCode();
      if (ExchangeSendsOpen != false) hash ^= ExchangeSendsOpen.GetHashCode();
      if (ConsolidatedFeedInstrument != false) hash ^= ConsolidatedFeedInstrument.GetHashCode();
      if (OpenOutcryInstrument != false) hash ^= OpenOutcryInstrument.GetHashCode();
      if (SyntheticAmericanOptionInstrument != false) hash ^= SyntheticAmericanOptionInstrument.GetHashCode();
      if (BarchartExchangeCode.Length != 0) hash ^= BarchartExchangeCode.GetHashCode();
      if (BarchartBaseCode.Length != 0) hash ^= BarchartBaseCode.GetHashCode();
      if (VolumeDenominator != 0) hash ^= VolumeDenominator.GetHashCode();
      if (BidOfferQuantityDenominator != 0) hash ^= BidOfferQuantityDenominator.GetHashCode();
      if (PrimaryListingMarketParticipantId.Length != 0) hash ^= PrimaryListingMarketParticipantId.GetHashCode();
      if (SubscriptionSymbol.Length != 0) hash ^= SubscriptionSymbol.GetHashCode();
      if (contractMaturity_ != null) hash ^= ContractMaturity.GetHashCode();
      if (Underlying.Length != 0) hash ^= Underlying.GetHashCode();
      if (Commodity.Length != 0) hash ^= Commodity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (InstrumentType != global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InstrumentType);
      }
      supportBookTypes_.WriteTo(output, _repeated_supportBookTypes_codec);
      if (BookDepth != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(BookDepth);
      }
      if (VendorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VendorId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Symbol);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (CfiCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CfiCode);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurrencyCode);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExchangeCode);
      }
      if (MinimumPriceIncrement != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MinimumPriceIncrement);
      }
      if (ContractPointValue != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ContractPointValue);
      }
      if (schedule_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Schedule);
      }
      if (calendar_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Calendar);
      }
      if (RecordCreateTime != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(RecordCreateTime);
      }
      if (RecordUpdateTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(RecordUpdateTime);
      }
      if (TimeZoneName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TimeZoneName);
      }
      if (InstrumentGroup.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentGroup);
      }
      if (symbolExpiration_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SymbolExpiration);
      }
      if (State != global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) State);
      }
      if (Channel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(Channel);
      }
      if (UnderlyingMarketId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteSInt64(UnderlyingMarketId);
      }
      if (priceFormat_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PriceFormat);
      }
      if (optionStrikePriceFormat_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(OptionStrikePriceFormat);
      }
      if (PriceDenominator != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(PriceDenominator);
      }
      if (QuantityDenominator != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(QuantityDenominator);
      }
      if (IsTradable != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsTradable);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteSInt64(TransactionTime);
      }
      if (AuxiliaryData.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteBytes(AuxiliaryData);
      }
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (OptionStrike != 0L) {
        output.WriteRawTag(192, 12);
        output.WriteSInt64(OptionStrike);
      }
      if (OptionType != global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) OptionType);
      }
      if (OptionStyle != global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle) {
        output.WriteRawTag(216, 12);
        output.WriteEnum((int) OptionStyle);
      }
      if (OptionStrikeDenominator != 0) {
        output.WriteRawTag(224, 12);
        output.WriteSInt32(OptionStrikeDenominator);
      }
      if (SpreadCode.Length != 0) {
        output.WriteRawTag(146, 13);
        output.WriteString(SpreadCode);
      }
      spreadLeg_.WriteTo(output, _repeated_spreadLeg_codec);
      if (UserDefinedSpread != false) {
        output.WriteRawTag(160, 13);
        output.WriteBool(UserDefinedSpread);
      }
      if (MarketTier.Length != 0) {
        output.WriteRawTag(170, 13);
        output.WriteString(MarketTier);
      }
      if (FinancialStatusIndicator.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(FinancialStatusIndicator);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(186, 13);
        output.WriteString(Isin);
      }
      if (currencyPair_ != null) {
        output.WriteRawTag(194, 13);
        output.WriteMessage(CurrencyPair);
      }
      if (ExchangeSendsVolume != false) {
        output.WriteRawTag(200, 13);
        output.WriteBool(ExchangeSendsVolume);
      }
      if (ExchangeSendsHigh != false) {
        output.WriteRawTag(208, 13);
        output.WriteBool(ExchangeSendsHigh);
      }
      if (ExchangeSendsLow != false) {
        output.WriteRawTag(216, 13);
        output.WriteBool(ExchangeSendsLow);
      }
      if (ExchangeSendsOpen != false) {
        output.WriteRawTag(224, 13);
        output.WriteBool(ExchangeSendsOpen);
      }
      if (ConsolidatedFeedInstrument != false) {
        output.WriteRawTag(232, 13);
        output.WriteBool(ConsolidatedFeedInstrument);
      }
      if (OpenOutcryInstrument != false) {
        output.WriteRawTag(240, 13);
        output.WriteBool(OpenOutcryInstrument);
      }
      if (SyntheticAmericanOptionInstrument != false) {
        output.WriteRawTag(248, 13);
        output.WriteBool(SyntheticAmericanOptionInstrument);
      }
      if (BarchartExchangeCode.Length != 0) {
        output.WriteRawTag(130, 14);
        output.WriteString(BarchartExchangeCode);
      }
      if (BarchartBaseCode.Length != 0) {
        output.WriteRawTag(138, 14);
        output.WriteString(BarchartBaseCode);
      }
      if (VolumeDenominator != 0) {
        output.WriteRawTag(144, 14);
        output.WriteSInt32(VolumeDenominator);
      }
      if (BidOfferQuantityDenominator != 0) {
        output.WriteRawTag(152, 14);
        output.WriteSInt32(BidOfferQuantityDenominator);
      }
      if (PrimaryListingMarketParticipantId.Length != 0) {
        output.WriteRawTag(162, 14);
        output.WriteString(PrimaryListingMarketParticipantId);
      }
      if (SubscriptionSymbol.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(SubscriptionSymbol);
      }
      if (contractMaturity_ != null) {
        output.WriteRawTag(178, 14);
        output.WriteMessage(ContractMaturity);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(186, 14);
        output.WriteString(Underlying);
      }
      if (Commodity.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(Commodity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (InstrumentType != global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InstrumentType);
      }
      supportBookTypes_.WriteTo(ref output, _repeated_supportBookTypes_codec);
      if (BookDepth != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(BookDepth);
      }
      if (VendorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VendorId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Symbol);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (CfiCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CfiCode);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurrencyCode);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExchangeCode);
      }
      if (MinimumPriceIncrement != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MinimumPriceIncrement);
      }
      if (ContractPointValue != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ContractPointValue);
      }
      if (schedule_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Schedule);
      }
      if (calendar_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Calendar);
      }
      if (RecordCreateTime != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(RecordCreateTime);
      }
      if (RecordUpdateTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(RecordUpdateTime);
      }
      if (TimeZoneName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TimeZoneName);
      }
      if (InstrumentGroup.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentGroup);
      }
      if (symbolExpiration_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SymbolExpiration);
      }
      if (State != global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) State);
      }
      if (Channel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(Channel);
      }
      if (UnderlyingMarketId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteSInt64(UnderlyingMarketId);
      }
      if (priceFormat_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PriceFormat);
      }
      if (optionStrikePriceFormat_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(OptionStrikePriceFormat);
      }
      if (PriceDenominator != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(PriceDenominator);
      }
      if (QuantityDenominator != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(QuantityDenominator);
      }
      if (IsTradable != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsTradable);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteSInt64(TransactionTime);
      }
      if (AuxiliaryData.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteBytes(AuxiliaryData);
      }
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (OptionStrike != 0L) {
        output.WriteRawTag(192, 12);
        output.WriteSInt64(OptionStrike);
      }
      if (OptionType != global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) OptionType);
      }
      if (OptionStyle != global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle) {
        output.WriteRawTag(216, 12);
        output.WriteEnum((int) OptionStyle);
      }
      if (OptionStrikeDenominator != 0) {
        output.WriteRawTag(224, 12);
        output.WriteSInt32(OptionStrikeDenominator);
      }
      if (SpreadCode.Length != 0) {
        output.WriteRawTag(146, 13);
        output.WriteString(SpreadCode);
      }
      spreadLeg_.WriteTo(ref output, _repeated_spreadLeg_codec);
      if (UserDefinedSpread != false) {
        output.WriteRawTag(160, 13);
        output.WriteBool(UserDefinedSpread);
      }
      if (MarketTier.Length != 0) {
        output.WriteRawTag(170, 13);
        output.WriteString(MarketTier);
      }
      if (FinancialStatusIndicator.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(FinancialStatusIndicator);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(186, 13);
        output.WriteString(Isin);
      }
      if (currencyPair_ != null) {
        output.WriteRawTag(194, 13);
        output.WriteMessage(CurrencyPair);
      }
      if (ExchangeSendsVolume != false) {
        output.WriteRawTag(200, 13);
        output.WriteBool(ExchangeSendsVolume);
      }
      if (ExchangeSendsHigh != false) {
        output.WriteRawTag(208, 13);
        output.WriteBool(ExchangeSendsHigh);
      }
      if (ExchangeSendsLow != false) {
        output.WriteRawTag(216, 13);
        output.WriteBool(ExchangeSendsLow);
      }
      if (ExchangeSendsOpen != false) {
        output.WriteRawTag(224, 13);
        output.WriteBool(ExchangeSendsOpen);
      }
      if (ConsolidatedFeedInstrument != false) {
        output.WriteRawTag(232, 13);
        output.WriteBool(ConsolidatedFeedInstrument);
      }
      if (OpenOutcryInstrument != false) {
        output.WriteRawTag(240, 13);
        output.WriteBool(OpenOutcryInstrument);
      }
      if (SyntheticAmericanOptionInstrument != false) {
        output.WriteRawTag(248, 13);
        output.WriteBool(SyntheticAmericanOptionInstrument);
      }
      if (BarchartExchangeCode.Length != 0) {
        output.WriteRawTag(130, 14);
        output.WriteString(BarchartExchangeCode);
      }
      if (BarchartBaseCode.Length != 0) {
        output.WriteRawTag(138, 14);
        output.WriteString(BarchartBaseCode);
      }
      if (VolumeDenominator != 0) {
        output.WriteRawTag(144, 14);
        output.WriteSInt32(VolumeDenominator);
      }
      if (BidOfferQuantityDenominator != 0) {
        output.WriteRawTag(152, 14);
        output.WriteSInt32(BidOfferQuantityDenominator);
      }
      if (PrimaryListingMarketParticipantId.Length != 0) {
        output.WriteRawTag(162, 14);
        output.WriteString(PrimaryListingMarketParticipantId);
      }
      if (SubscriptionSymbol.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(SubscriptionSymbol);
      }
      if (contractMaturity_ != null) {
        output.WriteRawTag(178, 14);
        output.WriteMessage(ContractMaturity);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(186, 14);
        output.WriteString(Underlying);
      }
      if (Commodity.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(Commodity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
      }
      if (InstrumentType != global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentType);
      }
      size += supportBookTypes_.CalculateSize(_repeated_supportBookTypes_codec);
      if (BookDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BookDepth);
      }
      if (VendorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VendorId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (CfiCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (ExchangeCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeCode);
      }
      if (MinimumPriceIncrement != 0F) {
        size += 1 + 4;
      }
      if (ContractPointValue != 0F) {
        size += 1 + 4;
      }
      if (schedule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
      }
      if (calendar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Calendar);
      }
      if (RecordCreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RecordCreateTime);
      }
      if (RecordUpdateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(RecordUpdateTime);
      }
      if (TimeZoneName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeZoneName);
      }
      if (InstrumentGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroup);
      }
      if (symbolExpiration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolExpiration);
      }
      if (State != global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Channel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (UnderlyingMarketId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(UnderlyingMarketId);
      }
      if (priceFormat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PriceFormat);
      }
      if (optionStrikePriceFormat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionStrikePriceFormat);
      }
      if (PriceDenominator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PriceDenominator);
      }
      if (QuantityDenominator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(QuantityDenominator);
      }
      if (IsTradable != false) {
        size += 2 + 1;
      }
      if (TransactionTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (AuxiliaryData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AuxiliaryData);
      }
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (OptionStrike != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OptionStrike);
      }
      if (OptionType != global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptionType);
      }
      if (OptionStyle != global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptionStyle);
      }
      if (OptionStrikeDenominator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OptionStrikeDenominator);
      }
      if (SpreadCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpreadCode);
      }
      size += spreadLeg_.CalculateSize(_repeated_spreadLeg_codec);
      if (UserDefinedSpread != false) {
        size += 2 + 1;
      }
      if (MarketTier.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketTier);
      }
      if (FinancialStatusIndicator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FinancialStatusIndicator);
      }
      if (Isin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (currencyPair_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurrencyPair);
      }
      if (ExchangeSendsVolume != false) {
        size += 2 + 1;
      }
      if (ExchangeSendsHigh != false) {
        size += 2 + 1;
      }
      if (ExchangeSendsLow != false) {
        size += 2 + 1;
      }
      if (ExchangeSendsOpen != false) {
        size += 2 + 1;
      }
      if (ConsolidatedFeedInstrument != false) {
        size += 2 + 1;
      }
      if (OpenOutcryInstrument != false) {
        size += 2 + 1;
      }
      if (SyntheticAmericanOptionInstrument != false) {
        size += 2 + 1;
      }
      if (BarchartExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BarchartExchangeCode);
      }
      if (BarchartBaseCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BarchartBaseCode);
      }
      if (VolumeDenominator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(VolumeDenominator);
      }
      if (BidOfferQuantityDenominator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BidOfferQuantityDenominator);
      }
      if (PrimaryListingMarketParticipantId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrimaryListingMarketParticipantId);
      }
      if (SubscriptionSymbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubscriptionSymbol);
      }
      if (contractMaturity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractMaturity);
      }
      if (Underlying.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Underlying);
      }
      if (Commodity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Commodity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentDefinition other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0L) {
        MarketId = other.MarketId;
      }
      if (other.InstrumentType != global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType.UnknownInstrumentType) {
        InstrumentType = other.InstrumentType;
      }
      supportBookTypes_.Add(other.supportBookTypes_);
      if (other.BookDepth != 0) {
        BookDepth = other.BookDepth;
      }
      if (other.VendorId.Length != 0) {
        VendorId = other.VendorId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.CfiCode.Length != 0) {
        CfiCode = other.CfiCode;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.ExchangeCode.Length != 0) {
        ExchangeCode = other.ExchangeCode;
      }
      if (other.MinimumPriceIncrement != 0F) {
        MinimumPriceIncrement = other.MinimumPriceIncrement;
      }
      if (other.ContractPointValue != 0F) {
        ContractPointValue = other.ContractPointValue;
      }
      if (other.schedule_ != null) {
        if (schedule_ == null) {
          Schedule = new global::Org.Openfeed.InstrumentDefinition.Types.Schedule();
        }
        Schedule.MergeFrom(other.Schedule);
      }
      if (other.calendar_ != null) {
        if (calendar_ == null) {
          Calendar = new global::Org.Openfeed.InstrumentDefinition.Types.Calendar();
        }
        Calendar.MergeFrom(other.Calendar);
      }
      if (other.RecordCreateTime != 0L) {
        RecordCreateTime = other.RecordCreateTime;
      }
      if (other.RecordUpdateTime != 0L) {
        RecordUpdateTime = other.RecordUpdateTime;
      }
      if (other.TimeZoneName.Length != 0) {
        TimeZoneName = other.TimeZoneName;
      }
      if (other.InstrumentGroup.Length != 0) {
        InstrumentGroup = other.InstrumentGroup;
      }
      if (other.symbolExpiration_ != null) {
        if (symbolExpiration_ == null) {
          SymbolExpiration = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
        }
        SymbolExpiration.MergeFrom(other.SymbolExpiration);
      }
      if (other.State != global::Org.Openfeed.InstrumentDefinition.Types.State.UnknownState) {
        State = other.State;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.UnderlyingMarketId != 0L) {
        UnderlyingMarketId = other.UnderlyingMarketId;
      }
      if (other.priceFormat_ != null) {
        if (priceFormat_ == null) {
          PriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
        }
        PriceFormat.MergeFrom(other.PriceFormat);
      }
      if (other.optionStrikePriceFormat_ != null) {
        if (optionStrikePriceFormat_ == null) {
          OptionStrikePriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
        }
        OptionStrikePriceFormat.MergeFrom(other.OptionStrikePriceFormat);
      }
      if (other.PriceDenominator != 0) {
        PriceDenominator = other.PriceDenominator;
      }
      if (other.QuantityDenominator != 0) {
        QuantityDenominator = other.QuantityDenominator;
      }
      if (other.IsTradable != false) {
        IsTradable = other.IsTradable;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.AuxiliaryData.Length != 0) {
        AuxiliaryData = other.AuxiliaryData;
      }
      symbols_.Add(other.symbols_);
      if (other.OptionStrike != 0L) {
        OptionStrike = other.OptionStrike;
      }
      if (other.OptionType != global::Org.Openfeed.InstrumentDefinition.Types.OptionType.UnknownOptionType) {
        OptionType = other.OptionType;
      }
      if (other.OptionStyle != global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle.UnknownOptionsStyle) {
        OptionStyle = other.OptionStyle;
      }
      if (other.OptionStrikeDenominator != 0) {
        OptionStrikeDenominator = other.OptionStrikeDenominator;
      }
      if (other.SpreadCode.Length != 0) {
        SpreadCode = other.SpreadCode;
      }
      spreadLeg_.Add(other.spreadLeg_);
      if (other.UserDefinedSpread != false) {
        UserDefinedSpread = other.UserDefinedSpread;
      }
      if (other.MarketTier.Length != 0) {
        MarketTier = other.MarketTier;
      }
      if (other.FinancialStatusIndicator.Length != 0) {
        FinancialStatusIndicator = other.FinancialStatusIndicator;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.currencyPair_ != null) {
        if (currencyPair_ == null) {
          CurrencyPair = new global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair();
        }
        CurrencyPair.MergeFrom(other.CurrencyPair);
      }
      if (other.ExchangeSendsVolume != false) {
        ExchangeSendsVolume = other.ExchangeSendsVolume;
      }
      if (other.ExchangeSendsHigh != false) {
        ExchangeSendsHigh = other.ExchangeSendsHigh;
      }
      if (other.ExchangeSendsLow != false) {
        ExchangeSendsLow = other.ExchangeSendsLow;
      }
      if (other.ExchangeSendsOpen != false) {
        ExchangeSendsOpen = other.ExchangeSendsOpen;
      }
      if (other.ConsolidatedFeedInstrument != false) {
        ConsolidatedFeedInstrument = other.ConsolidatedFeedInstrument;
      }
      if (other.OpenOutcryInstrument != false) {
        OpenOutcryInstrument = other.OpenOutcryInstrument;
      }
      if (other.SyntheticAmericanOptionInstrument != false) {
        SyntheticAmericanOptionInstrument = other.SyntheticAmericanOptionInstrument;
      }
      if (other.BarchartExchangeCode.Length != 0) {
        BarchartExchangeCode = other.BarchartExchangeCode;
      }
      if (other.BarchartBaseCode.Length != 0) {
        BarchartBaseCode = other.BarchartBaseCode;
      }
      if (other.VolumeDenominator != 0) {
        VolumeDenominator = other.VolumeDenominator;
      }
      if (other.BidOfferQuantityDenominator != 0) {
        BidOfferQuantityDenominator = other.BidOfferQuantityDenominator;
      }
      if (other.PrimaryListingMarketParticipantId.Length != 0) {
        PrimaryListingMarketParticipantId = other.PrimaryListingMarketParticipantId;
      }
      if (other.SubscriptionSymbol.Length != 0) {
        SubscriptionSymbol = other.SubscriptionSymbol;
      }
      if (other.contractMaturity_ != null) {
        if (contractMaturity_ == null) {
          ContractMaturity = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
        }
        ContractMaturity.MergeFrom(other.ContractMaturity);
      }
      if (other.Underlying.Length != 0) {
        Underlying = other.Underlying;
      }
      if (other.Commodity.Length != 0) {
        Commodity = other.Commodity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 16: {
            InstrumentType = (global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            supportBookTypes_.AddEntriesFrom(input, _repeated_supportBookTypes_codec);
            break;
          }
          case 32: {
            BookDepth = input.ReadSInt32();
            break;
          }
          case 42: {
            VendorId = input.ReadString();
            break;
          }
          case 50: {
            Symbol = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            CfiCode = input.ReadString();
            break;
          }
          case 74: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 82: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 93: {
            MinimumPriceIncrement = input.ReadFloat();
            break;
          }
          case 101: {
            ContractPointValue = input.ReadFloat();
            break;
          }
          case 106: {
            if (schedule_ == null) {
              Schedule = new global::Org.Openfeed.InstrumentDefinition.Types.Schedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 114: {
            if (calendar_ == null) {
              Calendar = new global::Org.Openfeed.InstrumentDefinition.Types.Calendar();
            }
            input.ReadMessage(Calendar);
            break;
          }
          case 120: {
            RecordCreateTime = input.ReadSInt64();
            break;
          }
          case 128: {
            RecordUpdateTime = input.ReadSInt64();
            break;
          }
          case 138: {
            TimeZoneName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentGroup = input.ReadString();
            break;
          }
          case 154: {
            if (symbolExpiration_ == null) {
              SymbolExpiration = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
            }
            input.ReadMessage(SymbolExpiration);
            break;
          }
          case 160: {
            State = (global::Org.Openfeed.InstrumentDefinition.Types.State) input.ReadEnum();
            break;
          }
          case 168: {
            Channel = input.ReadSInt32();
            break;
          }
          case 176: {
            UnderlyingMarketId = input.ReadSInt64();
            break;
          }
          case 186: {
            if (priceFormat_ == null) {
              PriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
            }
            input.ReadMessage(PriceFormat);
            break;
          }
          case 194: {
            if (optionStrikePriceFormat_ == null) {
              OptionStrikePriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
            }
            input.ReadMessage(OptionStrikePriceFormat);
            break;
          }
          case 224: {
            PriceDenominator = input.ReadSInt32();
            break;
          }
          case 232: {
            QuantityDenominator = input.ReadSInt32();
            break;
          }
          case 240: {
            IsTradable = input.ReadBool();
            break;
          }
          case 400: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 794: {
            AuxiliaryData = input.ReadBytes();
            break;
          }
          case 802: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
          case 1600: {
            OptionStrike = input.ReadSInt64();
            break;
          }
          case 1616: {
            OptionType = (global::Org.Openfeed.InstrumentDefinition.Types.OptionType) input.ReadEnum();
            break;
          }
          case 1624: {
            OptionStyle = (global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle) input.ReadEnum();
            break;
          }
          case 1632: {
            OptionStrikeDenominator = input.ReadSInt32();
            break;
          }
          case 1682: {
            SpreadCode = input.ReadString();
            break;
          }
          case 1690: {
            spreadLeg_.AddEntriesFrom(input, _repeated_spreadLeg_codec);
            break;
          }
          case 1696: {
            UserDefinedSpread = input.ReadBool();
            break;
          }
          case 1706: {
            MarketTier = input.ReadString();
            break;
          }
          case 1714: {
            FinancialStatusIndicator = input.ReadString();
            break;
          }
          case 1722: {
            Isin = input.ReadString();
            break;
          }
          case 1730: {
            if (currencyPair_ == null) {
              CurrencyPair = new global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair();
            }
            input.ReadMessage(CurrencyPair);
            break;
          }
          case 1736: {
            ExchangeSendsVolume = input.ReadBool();
            break;
          }
          case 1744: {
            ExchangeSendsHigh = input.ReadBool();
            break;
          }
          case 1752: {
            ExchangeSendsLow = input.ReadBool();
            break;
          }
          case 1760: {
            ExchangeSendsOpen = input.ReadBool();
            break;
          }
          case 1768: {
            ConsolidatedFeedInstrument = input.ReadBool();
            break;
          }
          case 1776: {
            OpenOutcryInstrument = input.ReadBool();
            break;
          }
          case 1784: {
            SyntheticAmericanOptionInstrument = input.ReadBool();
            break;
          }
          case 1794: {
            BarchartExchangeCode = input.ReadString();
            break;
          }
          case 1802: {
            BarchartBaseCode = input.ReadString();
            break;
          }
          case 1808: {
            VolumeDenominator = input.ReadSInt32();
            break;
          }
          case 1816: {
            BidOfferQuantityDenominator = input.ReadSInt32();
            break;
          }
          case 1826: {
            PrimaryListingMarketParticipantId = input.ReadString();
            break;
          }
          case 1834: {
            SubscriptionSymbol = input.ReadString();
            break;
          }
          case 1842: {
            if (contractMaturity_ == null) {
              ContractMaturity = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
            }
            input.ReadMessage(ContractMaturity);
            break;
          }
          case 1850: {
            Underlying = input.ReadString();
            break;
          }
          case 1858: {
            Commodity = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 16: {
            InstrumentType = (global::Org.Openfeed.InstrumentDefinition.Types.InstrumentType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            supportBookTypes_.AddEntriesFrom(ref input, _repeated_supportBookTypes_codec);
            break;
          }
          case 32: {
            BookDepth = input.ReadSInt32();
            break;
          }
          case 42: {
            VendorId = input.ReadString();
            break;
          }
          case 50: {
            Symbol = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            CfiCode = input.ReadString();
            break;
          }
          case 74: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 82: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 93: {
            MinimumPriceIncrement = input.ReadFloat();
            break;
          }
          case 101: {
            ContractPointValue = input.ReadFloat();
            break;
          }
          case 106: {
            if (schedule_ == null) {
              Schedule = new global::Org.Openfeed.InstrumentDefinition.Types.Schedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 114: {
            if (calendar_ == null) {
              Calendar = new global::Org.Openfeed.InstrumentDefinition.Types.Calendar();
            }
            input.ReadMessage(Calendar);
            break;
          }
          case 120: {
            RecordCreateTime = input.ReadSInt64();
            break;
          }
          case 128: {
            RecordUpdateTime = input.ReadSInt64();
            break;
          }
          case 138: {
            TimeZoneName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentGroup = input.ReadString();
            break;
          }
          case 154: {
            if (symbolExpiration_ == null) {
              SymbolExpiration = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
            }
            input.ReadMessage(SymbolExpiration);
            break;
          }
          case 160: {
            State = (global::Org.Openfeed.InstrumentDefinition.Types.State) input.ReadEnum();
            break;
          }
          case 168: {
            Channel = input.ReadSInt32();
            break;
          }
          case 176: {
            UnderlyingMarketId = input.ReadSInt64();
            break;
          }
          case 186: {
            if (priceFormat_ == null) {
              PriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
            }
            input.ReadMessage(PriceFormat);
            break;
          }
          case 194: {
            if (optionStrikePriceFormat_ == null) {
              OptionStrikePriceFormat = new global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat();
            }
            input.ReadMessage(OptionStrikePriceFormat);
            break;
          }
          case 224: {
            PriceDenominator = input.ReadSInt32();
            break;
          }
          case 232: {
            QuantityDenominator = input.ReadSInt32();
            break;
          }
          case 240: {
            IsTradable = input.ReadBool();
            break;
          }
          case 400: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 794: {
            AuxiliaryData = input.ReadBytes();
            break;
          }
          case 802: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
          case 1600: {
            OptionStrike = input.ReadSInt64();
            break;
          }
          case 1616: {
            OptionType = (global::Org.Openfeed.InstrumentDefinition.Types.OptionType) input.ReadEnum();
            break;
          }
          case 1624: {
            OptionStyle = (global::Org.Openfeed.InstrumentDefinition.Types.OptionStyle) input.ReadEnum();
            break;
          }
          case 1632: {
            OptionStrikeDenominator = input.ReadSInt32();
            break;
          }
          case 1682: {
            SpreadCode = input.ReadString();
            break;
          }
          case 1690: {
            spreadLeg_.AddEntriesFrom(ref input, _repeated_spreadLeg_codec);
            break;
          }
          case 1696: {
            UserDefinedSpread = input.ReadBool();
            break;
          }
          case 1706: {
            MarketTier = input.ReadString();
            break;
          }
          case 1714: {
            FinancialStatusIndicator = input.ReadString();
            break;
          }
          case 1722: {
            Isin = input.ReadString();
            break;
          }
          case 1730: {
            if (currencyPair_ == null) {
              CurrencyPair = new global::Org.Openfeed.InstrumentDefinition.Types.CurrencyPair();
            }
            input.ReadMessage(CurrencyPair);
            break;
          }
          case 1736: {
            ExchangeSendsVolume = input.ReadBool();
            break;
          }
          case 1744: {
            ExchangeSendsHigh = input.ReadBool();
            break;
          }
          case 1752: {
            ExchangeSendsLow = input.ReadBool();
            break;
          }
          case 1760: {
            ExchangeSendsOpen = input.ReadBool();
            break;
          }
          case 1768: {
            ConsolidatedFeedInstrument = input.ReadBool();
            break;
          }
          case 1776: {
            OpenOutcryInstrument = input.ReadBool();
            break;
          }
          case 1784: {
            SyntheticAmericanOptionInstrument = input.ReadBool();
            break;
          }
          case 1794: {
            BarchartExchangeCode = input.ReadString();
            break;
          }
          case 1802: {
            BarchartBaseCode = input.ReadString();
            break;
          }
          case 1808: {
            VolumeDenominator = input.ReadSInt32();
            break;
          }
          case 1816: {
            BidOfferQuantityDenominator = input.ReadSInt32();
            break;
          }
          case 1826: {
            PrimaryListingMarketParticipantId = input.ReadString();
            break;
          }
          case 1834: {
            SubscriptionSymbol = input.ReadString();
            break;
          }
          case 1842: {
            if (contractMaturity_ == null) {
              ContractMaturity = new global::Org.Openfeed.InstrumentDefinition.Types.MaturityDate();
            }
            input.ReadMessage(ContractMaturity);
            break;
          }
          case 1850: {
            Underlying = input.ReadString();
            break;
          }
          case 1858: {
            Commodity = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the InstrumentDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// #############################################
      /// </summary>
      public enum InstrumentType {
        [pbr::OriginalName("UNKNOWN_INSTRUMENT_TYPE")] UnknownInstrumentType = 0,
        [pbr::OriginalName("FOREX")] Forex = 1,
        [pbr::OriginalName("INDEX")] Index = 2,
        [pbr::OriginalName("EQUITY")] Equity = 3,
        [pbr::OriginalName("FUTURE")] Future = 4,
        [pbr::OriginalName("OPTION")] Option = 5,
        [pbr::OriginalName("SPREAD")] Spread = 6,
        [pbr::OriginalName("MUTUAL_FUND")] MutualFund = 7,
        [pbr::OriginalName("MONEY_MARKET_FUND")] MoneyMarketFund = 8,
        [pbr::OriginalName("USER_DEFINED_SPREAD")] UserDefinedSpread = 9,
        [pbr::OriginalName("EQUITY_OPTION")] EquityOption = 10,
      }

      /// <summary>
      //// Market depth implementation type
      /// </summary>
      public enum BookType {
        [pbr::OriginalName("UNKNOWN_BOOK_TYPE")] UnknownBookType = 0,
        /// <summary>
        /// BBO
        /// </summary>
        [pbr::OriginalName("TOP_OF_BOOK")] TopOfBook = 1,
        /// <summary>
        /// Book uses price level
        /// </summary>
        [pbr::OriginalName("PRICE_LEVEL_DEPTH")] PriceLevelDepth = 2,
        /// <summary>
        /// Book uses order-id
        /// </summary>
        [pbr::OriginalName("ORDER_DEPTH")] OrderDepth = 3,
      }

      /// <summary>
      //// Option type.
      /// </summary>
      public enum OptionType {
        [pbr::OriginalName("UNKNOWN_OPTION_TYPE")] UnknownOptionType = 0,
        [pbr::OriginalName("CALL")] Call = 1,
        [pbr::OriginalName("PUT")] Put = 2,
      }

      /// <summary>
      //// Option style.
      /// </summary>
      public enum OptionStyle {
        [pbr::OriginalName("UNKNOWN_OPTIONS_STYLE")] UnknownOptionsStyle = 0,
        [pbr::OriginalName("DEFAULT")] Default = 1,
        [pbr::OriginalName("AMERICAN")] American = 2,
        [pbr::OriginalName("EUROPEAN")] European = 3,
      }

      public enum State {
        [pbr::OriginalName("UNKNOWN_STATE")] UnknownState = 0,
        [pbr::OriginalName("ACTIVE")] Active = 1,
        [pbr::OriginalName("PASSIVE")] Passive = 2,
      }

      public enum EventType {
        [pbr::OriginalName("UNKNOWN_EVENT_TYPE")] UnknownEventType = 0,
        /// <summary>
        /// All instruments
        /// </summary>
        [pbr::OriginalName("FIRST_TRADE_DATE")] FirstTradeDate = 1,
        [pbr::OriginalName("LAST_TRADE_DATE")] LastTradeDate = 2,
        /// <summary>
        /// Futures only
        /// </summary>
        [pbr::OriginalName("MATURITY_DATE")] MaturityDate = 10,
        [pbr::OriginalName("FIRST_DELIVERY_DATE")] FirstDeliveryDate = 11,
        [pbr::OriginalName("LAST_DELIVERY_DATE")] LastDeliveryDate = 12,
        [pbr::OriginalName("FIRST_NOTICE_DATE")] FirstNoticeDate = 13,
        [pbr::OriginalName("LAST_NOTICE_DATE")] LastNoticeDate = 14,
        [pbr::OriginalName("FIRST_HOLDING_DATE")] FirstHoldingDate = 15,
        [pbr::OriginalName("LAST_HOLDING_DATE")] LastHoldingDate = 16,
        [pbr::OriginalName("FIRST_POSITION_DATE")] FirstPositionDate = 17,
        [pbr::OriginalName("LAST_POSITION_DATE")] LastPositionDate = 18,
        /// <summary>
        /// Grain Bids
        /// </summary>
        [pbr::OriginalName("DELIVERY_START_DATE")] DeliveryStartDate = 30,
        [pbr::OriginalName("DELIVERY_END_DATE")] DeliveryEndDate = 31,
      }

      /// <summary>
      //// Typical trading week schedule
      /// </summary>
      public sealed partial class Schedule : pb::IMessage<Schedule>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Schedule> _parser = new pb::MessageParser<Schedule>(() => new Schedule());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Schedule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Schedule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Schedule(Schedule other) : this() {
          sessions_ = other.sessions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Schedule Clone() {
          return new Schedule(this);
        }

        /// <summary>Field number for the "sessions" field.</summary>
        public const int SessionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan> _repeated_sessions_codec
            = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan.Parser);
        private readonly pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan> sessions_ = new pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.TimeSpan> Sessions {
          get { return sessions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Schedule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Schedule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sessions_.Equals(other.sessions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sessions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          sessions_.WriteTo(output, _repeated_sessions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          sessions_.WriteTo(ref output, _repeated_sessions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += sessions_.CalculateSize(_repeated_sessions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Schedule other) {
          if (other == null) {
            return;
          }
          sessions_.Add(other.sessions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                sessions_.AddEntriesFrom(input, _repeated_sessions_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                sessions_.AddEntriesFrom(ref input, _repeated_sessions_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      //// Trading session
      /// Times are in nanos since midnight UTC on the Sunday starting a given trading week
      /// </summary>
      public sealed partial class TimeSpan : pb::IMessage<TimeSpan>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TimeSpan> _parser = new pb::MessageParser<TimeSpan>(() => new TimeSpan());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TimeSpan> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeSpan() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeSpan(TimeSpan other) : this() {
          timeStart_ = other.timeStart_;
          timeFinish_ = other.timeFinish_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TimeSpan Clone() {
          return new TimeSpan(this);
        }

        /// <summary>Field number for the "timeStart" field.</summary>
        public const int TimeStartFieldNumber = 1;
        private long timeStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TimeStart {
          get { return timeStart_; }
          set {
            timeStart_ = value;
          }
        }

        /// <summary>Field number for the "timeFinish" field.</summary>
        public const int TimeFinishFieldNumber = 2;
        private long timeFinish_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TimeFinish {
          get { return timeFinish_; }
          set {
            timeFinish_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TimeSpan);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TimeSpan other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimeStart != other.TimeStart) return false;
          if (TimeFinish != other.TimeFinish) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (TimeStart != 0L) hash ^= TimeStart.GetHashCode();
          if (TimeFinish != 0L) hash ^= TimeFinish.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TimeStart != 0L) {
            output.WriteRawTag(8);
            output.WriteSInt64(TimeStart);
          }
          if (TimeFinish != 0L) {
            output.WriteRawTag(16);
            output.WriteSInt64(TimeFinish);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TimeStart != 0L) {
            output.WriteRawTag(8);
            output.WriteSInt64(TimeStart);
          }
          if (TimeFinish != 0L) {
            output.WriteRawTag(16);
            output.WriteSInt64(TimeFinish);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (TimeStart != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimeStart);
          }
          if (TimeFinish != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimeFinish);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TimeSpan other) {
          if (other == null) {
            return;
          }
          if (other.TimeStart != 0L) {
            TimeStart = other.TimeStart;
          }
          if (other.TimeFinish != 0L) {
            TimeFinish = other.TimeFinish;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TimeStart = input.ReadSInt64();
                break;
              }
              case 16: {
                TimeFinish = input.ReadSInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TimeStart = input.ReadSInt64();
                break;
              }
              case 16: {
                TimeFinish = input.ReadSInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Calendar : pb::IMessage<Calendar>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Calendar> _parser = new pb::MessageParser<Calendar>(() => new Calendar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Calendar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Calendar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Calendar(Calendar other) : this() {
          events_ = other.events_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Calendar Clone() {
          return new Calendar(this);
        }

        /// <summary>Field number for the "events" field.</summary>
        public const int EventsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Org.Openfeed.InstrumentDefinition.Types.Event> _repeated_events_codec
            = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.InstrumentDefinition.Types.Event.Parser);
        private readonly pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Event> events_ = new pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Event>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Org.Openfeed.InstrumentDefinition.Types.Event> Events {
          get { return events_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Calendar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Calendar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!events_.Equals(other.events_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= events_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          events_.WriteTo(output, _repeated_events_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          events_.WriteTo(ref output, _repeated_events_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += events_.CalculateSize(_repeated_events_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Calendar other) {
          if (other == null) {
            return;
          }
          events_.Add(other.events_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                events_.AddEntriesFrom(input, _repeated_events_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                events_.AddEntriesFrom(ref input, _repeated_events_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Event : pb::IMessage<Event>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Event> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Event() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Event(Event other) : this() {
          type_ = other.type_;
          date_ = other.date_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Event Clone() {
          return new Event(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Org.Openfeed.InstrumentDefinition.Types.EventType type_ = global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Org.Openfeed.InstrumentDefinition.Types.EventType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "date" field.</summary>
        public const int DateFieldNumber = 2;
        private long date_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Date {
          get { return date_; }
          set {
            date_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Event);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Event other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Date != other.Date) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType) hash ^= Type.GetHashCode();
          if (Date != 0L) hash ^= Date.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Type != global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Date != 0L) {
            output.WriteRawTag(16);
            output.WriteSInt64(Date);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Type != global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Date != 0L) {
            output.WriteRawTag(16);
            output.WriteSInt64(Date);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Type != global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Date != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Date);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Event other) {
          if (other == null) {
            return;
          }
          if (other.Type != global::Org.Openfeed.InstrumentDefinition.Types.EventType.UnknownEventType) {
            Type = other.Type;
          }
          if (other.Date != 0L) {
            Date = other.Date;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Org.Openfeed.InstrumentDefinition.Types.EventType) input.ReadEnum();
                break;
              }
              case 16: {
                Date = input.ReadSInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Type = (global::Org.Openfeed.InstrumentDefinition.Types.EventType) input.ReadEnum();
                break;
              }
              case 16: {
                Date = input.ReadSInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class SpreadLeg : pb::IMessage<SpreadLeg>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SpreadLeg> _parser = new pb::MessageParser<SpreadLeg>(() => new SpreadLeg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SpreadLeg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SpreadLeg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SpreadLeg(SpreadLeg other) : this() {
          marketId_ = other.marketId_;
          ratio_ = other.ratio_;
          symbol_ = other.symbol_;
          longSymbol_ = other.longSymbol_;
          legOptionDelta_ = other.legOptionDelta_;
          legPrice_ = other.legPrice_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SpreadLeg Clone() {
          return new SpreadLeg(this);
        }

        /// <summary>Field number for the "marketId" field.</summary>
        public const int MarketIdFieldNumber = 1;
        private long marketId_;
        /// <summary>
        /// The marketId of the leg
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long MarketId {
          get { return marketId_; }
          set {
            marketId_ = value;
          }
        }

        /// <summary>Field number for the "ratio" field.</summary>
        public const int RatioFieldNumber = 2;
        private int ratio_;
        /// <summary>
        /// The ratio of the this leg with respect to the spread.
        /// Negative means short the absolute value, positive means long the absolute value.
        /// FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message
        /// and use this field as only the absolute value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Ratio {
          get { return ratio_; }
          set {
            ratio_ = value;
          }
        }

        /// <summary>Field number for the "symbol" field.</summary>
        public const int SymbolFieldNumber = 3;
        private string symbol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Symbol {
          get { return symbol_; }
          set {
            symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "longSymbol" field.</summary>
        public const int LongSymbolFieldNumber = 4;
        private string longSymbol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string LongSymbol {
          get { return longSymbol_; }
          set {
            longSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "legOptionDelta" field.</summary>
        public const int LegOptionDeltaFieldNumber = 5;
        private float legOptionDelta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegOptionDelta {
          get { return legOptionDelta_; }
          set {
            legOptionDelta_ = value;
          }
        }

        /// <summary>Field number for the "legPrice" field.</summary>
        public const int LegPriceFieldNumber = 6;
        private float legPrice_;
        /// <summary>
        /// Additional information about the leg will be found in the instrument definition
        /// for the leg.  It is not included here to reduce duplication.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegPrice {
          get { return legPrice_; }
          set {
            legPrice_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SpreadLeg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SpreadLeg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MarketId != other.MarketId) return false;
          if (Ratio != other.Ratio) return false;
          if (Symbol != other.Symbol) return false;
          if (LongSymbol != other.LongSymbol) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegOptionDelta, other.LegOptionDelta)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegPrice, other.LegPrice)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (MarketId != 0L) hash ^= MarketId.GetHashCode();
          if (Ratio != 0) hash ^= Ratio.GetHashCode();
          if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
          if (LongSymbol.Length != 0) hash ^= LongSymbol.GetHashCode();
          if (LegOptionDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegOptionDelta);
          if (LegPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegPrice);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MarketId != 0L) {
            output.WriteRawTag(8);
            output.WriteSInt64(MarketId);
          }
          if (Ratio != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Ratio);
          }
          if (Symbol.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Symbol);
          }
          if (LongSymbol.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LongSymbol);
          }
          if (LegOptionDelta != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(LegOptionDelta);
          }
          if (LegPrice != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(LegPrice);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MarketId != 0L) {
            output.WriteRawTag(8);
            output.WriteSInt64(MarketId);
          }
          if (Ratio != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Ratio);
          }
          if (Symbol.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Symbol);
          }
          if (LongSymbol.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LongSymbol);
          }
          if (LegOptionDelta != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(LegOptionDelta);
          }
          if (LegPrice != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(LegPrice);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (MarketId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
          }
          if (Ratio != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ratio);
          }
          if (Symbol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
          }
          if (LongSymbol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LongSymbol);
          }
          if (LegOptionDelta != 0F) {
            size += 1 + 4;
          }
          if (LegPrice != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SpreadLeg other) {
          if (other == null) {
            return;
          }
          if (other.MarketId != 0L) {
            MarketId = other.MarketId;
          }
          if (other.Ratio != 0) {
            Ratio = other.Ratio;
          }
          if (other.Symbol.Length != 0) {
            Symbol = other.Symbol;
          }
          if (other.LongSymbol.Length != 0) {
            LongSymbol = other.LongSymbol;
          }
          if (other.LegOptionDelta != 0F) {
            LegOptionDelta = other.LegOptionDelta;
          }
          if (other.LegPrice != 0F) {
            LegPrice = other.LegPrice;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MarketId = input.ReadSInt64();
                break;
              }
              case 16: {
                Ratio = input.ReadSInt32();
                break;
              }
              case 26: {
                Symbol = input.ReadString();
                break;
              }
              case 34: {
                LongSymbol = input.ReadString();
                break;
              }
              case 45: {
                LegOptionDelta = input.ReadFloat();
                break;
              }
              case 53: {
                LegPrice = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MarketId = input.ReadSInt64();
                break;
              }
              case 16: {
                Ratio = input.ReadSInt32();
                break;
              }
              case 26: {
                Symbol = input.ReadString();
                break;
              }
              case 34: {
                LongSymbol = input.ReadString();
                break;
              }
              case 45: {
                LegOptionDelta = input.ReadFloat();
                break;
              }
              case 53: {
                LegPrice = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      //// Date and time with time zone.
      /// </summary>
      public sealed partial class MaturityDate : pb::IMessage<MaturityDate>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MaturityDate> _parser = new pb::MessageParser<MaturityDate>(() => new MaturityDate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<MaturityDate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MaturityDate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MaturityDate(MaturityDate other) : this() {
          year_ = other.year_;
          month_ = other.month_;
          day_ = other.day_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MaturityDate Clone() {
          return new MaturityDate(this);
        }

        /// <summary>Field number for the "year" field.</summary>
        public const int YearFieldNumber = 1;
        private int year_;
        /// <summary>
        /// Year of century.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Year {
          get { return year_; }
          set {
            year_ = value;
          }
        }

        /// <summary>Field number for the "month" field.</summary>
        public const int MonthFieldNumber = 2;
        private int month_;
        /// <summary>
        /// Month of year.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Month {
          get { return month_; }
          set {
            month_ = value;
          }
        }

        /// <summary>Field number for the "day" field.</summary>
        public const int DayFieldNumber = 3;
        private int day_;
        /// <summary>
        /// Day of month.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Day {
          get { return day_; }
          set {
            day_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as MaturityDate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(MaturityDate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Year != other.Year) return false;
          if (Month != other.Month) return false;
          if (Day != other.Day) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Year != 0) hash ^= Year.GetHashCode();
          if (Month != 0) hash ^= Month.GetHashCode();
          if (Day != 0) hash ^= Day.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Year != 0) {
            output.WriteRawTag(8);
            output.WriteSInt32(Year);
          }
          if (Month != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Month);
          }
          if (Day != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(Day);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Year != 0) {
            output.WriteRawTag(8);
            output.WriteSInt32(Year);
          }
          if (Month != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Month);
          }
          if (Day != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(Day);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Year != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Year);
          }
          if (Month != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Month);
          }
          if (Day != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Day);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(MaturityDate other) {
          if (other == null) {
            return;
          }
          if (other.Year != 0) {
            Year = other.Year;
          }
          if (other.Month != 0) {
            Month = other.Month;
          }
          if (other.Day != 0) {
            Day = other.Day;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Year = input.ReadSInt32();
                break;
              }
              case 16: {
                Month = input.ReadSInt32();
                break;
              }
              case 24: {
                Day = input.ReadSInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Year = input.ReadSInt32();
                break;
              }
              case 16: {
                Month = input.ReadSInt32();
                break;
              }
              case 24: {
                Day = input.ReadSInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      //// A vendor's symbol for an instrument
      /// </summary>
      public sealed partial class Symbol : pb::IMessage<Symbol>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Symbol> _parser = new pb::MessageParser<Symbol>(() => new Symbol());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Symbol> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Symbol() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Symbol(Symbol other) : this() {
          vendor_ = other.vendor_;
          symbol_ = other.symbol_;
          longSymbol_ = other.longSymbol_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Symbol Clone() {
          return new Symbol(this);
        }

        /// <summary>Field number for the "vendor" field.</summary>
        public const int VendorFieldNumber = 1;
        private string vendor_ = "";
        /// <summary>
        /// The vendor that provides this symbol.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Vendor {
          get { return vendor_; }
          set {
            vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "symbol" field.</summary>
        public const int Symbol_FieldNumber = 2;
        private string symbol_ = "";
        /// <summary>
        /// The symbol assigned by the vendor.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Symbol_ {
          get { return symbol_; }
          set {
            symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "longSymbol" field.</summary>
        public const int LongSymbolFieldNumber = 3;
        private string longSymbol_ = "";
        /// <summary>
        /// The long symbol assigned by the vendor. Includes 2 char year for futures.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string LongSymbol {
          get { return longSymbol_; }
          set {
            longSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Symbol);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Symbol other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Vendor != other.Vendor) return false;
          if (Symbol_ != other.Symbol_) return false;
          if (LongSymbol != other.LongSymbol) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Vendor.Length != 0) hash ^= Vendor.GetHashCode();
          if (Symbol_.Length != 0) hash ^= Symbol_.GetHashCode();
          if (LongSymbol.Length != 0) hash ^= LongSymbol.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Vendor.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Vendor);
          }
          if (Symbol_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Symbol_);
          }
          if (LongSymbol.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LongSymbol);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Vendor.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Vendor);
          }
          if (Symbol_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Symbol_);
          }
          if (LongSymbol.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LongSymbol);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Vendor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
          }
          if (Symbol_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol_);
          }
          if (LongSymbol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LongSymbol);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Symbol other) {
          if (other == null) {
            return;
          }
          if (other.Vendor.Length != 0) {
            Vendor = other.Vendor;
          }
          if (other.Symbol_.Length != 0) {
            Symbol_ = other.Symbol_;
          }
          if (other.LongSymbol.Length != 0) {
            LongSymbol = other.LongSymbol;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Vendor = input.ReadString();
                break;
              }
              case 18: {
                Symbol_ = input.ReadString();
                break;
              }
              case 26: {
                LongSymbol = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Vendor = input.ReadString();
                break;
              }
              case 18: {
                Symbol_ = input.ReadString();
                break;
              }
              case 26: {
                LongSymbol = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      //// Recommended display format for prices.
      /// </summary>
      public sealed partial class PriceFormat : pb::IMessage<PriceFormat>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PriceFormat> _parser = new pb::MessageParser<PriceFormat>(() => new PriceFormat());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PriceFormat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PriceFormat() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PriceFormat(PriceFormat other) : this() {
          isFractional_ = other.isFractional_;
          denominator_ = other.denominator_;
          subDenominator_ = other.subDenominator_;
          subFormat_ = other.subFormat_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PriceFormat Clone() {
          return new PriceFormat(this);
        }

        /// <summary>Field number for the "isFractional" field.</summary>
        public const int IsFractionalFieldNumber = 1;
        private bool isFractional_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsFractional {
          get { return isFractional_; }
          set {
            isFractional_ = value;
          }
        }

        /// <summary>Field number for the "denominator" field.</summary>
        public const int DenominatorFieldNumber = 2;
        private int denominator_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Denominator {
          get { return denominator_; }
          set {
            denominator_ = value;
          }
        }

        /// <summary>Field number for the "subDenominator" field.</summary>
        public const int SubDenominatorFieldNumber = 4;
        private int subDenominator_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SubDenominator {
          get { return subDenominator_; }
          set {
            subDenominator_ = value;
          }
        }

        /// <summary>Field number for the "subFormat" field.</summary>
        public const int SubFormatFieldNumber = 6;
        private global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat subFormat_ = global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat SubFormat {
          get { return subFormat_; }
          set {
            subFormat_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PriceFormat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PriceFormat other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsFractional != other.IsFractional) return false;
          if (Denominator != other.Denominator) return false;
          if (SubDenominator != other.SubDenominator) return false;
          if (SubFormat != other.SubFormat) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (IsFractional != false) hash ^= IsFractional.GetHashCode();
          if (Denominator != 0) hash ^= Denominator.GetHashCode();
          if (SubDenominator != 0) hash ^= SubDenominator.GetHashCode();
          if (SubFormat != global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat) hash ^= SubFormat.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (IsFractional != false) {
            output.WriteRawTag(8);
            output.WriteBool(IsFractional);
          }
          if (Denominator != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Denominator);
          }
          if (SubDenominator != 0) {
            output.WriteRawTag(32);
            output.WriteSInt32(SubDenominator);
          }
          if (SubFormat != global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat) {
            output.WriteRawTag(48);
            output.WriteEnum((int) SubFormat);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (IsFractional != false) {
            output.WriteRawTag(8);
            output.WriteBool(IsFractional);
          }
          if (Denominator != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Denominator);
          }
          if (SubDenominator != 0) {
            output.WriteRawTag(32);
            output.WriteSInt32(SubDenominator);
          }
          if (SubFormat != global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat) {
            output.WriteRawTag(48);
            output.WriteEnum((int) SubFormat);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (IsFractional != false) {
            size += 1 + 1;
          }
          if (Denominator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Denominator);
          }
          if (SubDenominator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SubDenominator);
          }
          if (SubFormat != global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubFormat);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PriceFormat other) {
          if (other == null) {
            return;
          }
          if (other.IsFractional != false) {
            IsFractional = other.IsFractional;
          }
          if (other.Denominator != 0) {
            Denominator = other.Denominator;
          }
          if (other.SubDenominator != 0) {
            SubDenominator = other.SubDenominator;
          }
          if (other.SubFormat != global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat.Flat) {
            SubFormat = other.SubFormat;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                IsFractional = input.ReadBool();
                break;
              }
              case 16: {
                Denominator = input.ReadSInt32();
                break;
              }
              case 32: {
                SubDenominator = input.ReadSInt32();
                break;
              }
              case 48: {
                SubFormat = (global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                IsFractional = input.ReadBool();
                break;
              }
              case 16: {
                Denominator = input.ReadSInt32();
                break;
              }
              case 32: {
                SubDenominator = input.ReadSInt32();
                break;
              }
              case 48: {
                SubFormat = (global::Org.Openfeed.InstrumentDefinition.Types.PriceFormat.Types.SubFormat) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the PriceFormat message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum SubFormat {
            [pbr::OriginalName("FLAT")] Flat = 0,
            [pbr::OriginalName("FRACTIONAL")] Fractional = 1,
            [pbr::OriginalName("DECIMAL")] Decimal = 2,
          }

        }
        #endregion

      }

      /// <summary>
      //// Currency Pair
      /// </summary>
      public sealed partial class CurrencyPair : pb::IMessage<CurrencyPair>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CurrencyPair> _parser = new pb::MessageParser<CurrencyPair>(() => new CurrencyPair());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CurrencyPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.InstrumentDefinition.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrencyPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrencyPair(CurrencyPair other) : this() {
          currency1_ = other.currency1_;
          currency2_ = other.currency2_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrencyPair Clone() {
          return new CurrencyPair(this);
        }

        /// <summary>Field number for the "currency1" field.</summary>
        public const int Currency1FieldNumber = 1;
        private string currency1_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency1 {
          get { return currency1_; }
          set {
            currency1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "currency2" field.</summary>
        public const int Currency2FieldNumber = 2;
        private string currency2_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Currency2 {
          get { return currency2_; }
          set {
            currency2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CurrencyPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CurrencyPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Currency1 != other.Currency1) return false;
          if (Currency2 != other.Currency2) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Currency1.Length != 0) hash ^= Currency1.GetHashCode();
          if (Currency2.Length != 0) hash ^= Currency2.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Currency1.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Currency1);
          }
          if (Currency2.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Currency2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Currency1.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Currency1);
          }
          if (Currency2.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Currency2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Currency1.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency1);
          }
          if (Currency2.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency2);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CurrencyPair other) {
          if (other == null) {
            return;
          }
          if (other.Currency1.Length != 0) {
            Currency1 = other.Currency1;
          }
          if (other.Currency2.Length != 0) {
            Currency2 = other.Currency2;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Currency1 = input.ReadString();
                break;
              }
              case 18: {
                Currency2 = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Currency1 = input.ReadString();
                break;
              }
              case 18: {
                Currency2 = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
