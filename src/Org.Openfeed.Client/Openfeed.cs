// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: openfeed.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Openfeed {

  // <summary>Holder for reflection information generated from openfeed.proto</summary>
  public static partial class OpenfeedReflection {

    #region Descriptor
    // <summary>File descriptor for openfeed.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpenfeedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5vcGVuZmVlZC5wcm90bxIMb3JnLm9wZW5mZWVkGhlvcGVuZmVlZF9pbnN0",
            "cnVtZW50LnByb3RvIsAECg9PcGVuZmVlZE1lc3NhZ2USEwoLc2VuZGluZ1Rp",
            "bWUYASABKBISEgoKdG90YWxDb3VudBgCIAEoERIUCgxzeW5jU2VxdWVuY2UY",
            "AyABKAMSJgoHY29udGV4dBgEIAEoCzIVLm9yZy5vcGVuZmVlZC5Db250ZXh0",
            "EjIKDGNoYW5uZWxSZXNldBgKIAEoCzIaLm9yZy5vcGVuZmVlZC5DaGFubmVs",
            "UmVzZXRIABIsCgloZWFydEJlYXQYCyABKAsyFy5vcmcub3BlbmZlZWQuSGVh",
            "cnRCZWF0SAASMgoMYWRtaW5NZXNzYWdlGAwgASgLMhoub3JnLm9wZW5mZWVk",
            "LkFkbWluTWVzc2FnZUgAEkIKFGluc3RydW1lbnREZWZpbml0aW9uGA0gASgL",
            "MiIub3JnLm9wZW5mZWVkLkluc3RydW1lbnREZWZpbml0aW9uSAASRAoVaW5z",
            "dHJ1bWVudEdyb3VwU3RhdHVzGA4gASgLMiMub3JnLm9wZW5mZWVkLkluc3Ry",
            "dW1lbnRHcm91cFN0YXR1c0gAEjYKDm1hcmtldFNuYXBzaG90GA8gASgLMhwu",
            "b3JnLm9wZW5mZWVkLk1hcmtldFNuYXBzaG90SAASMgoMbWFya2V0VXBkYXRl",
            "GBAgASgLMhoub3JnLm9wZW5mZWVkLk1hcmtldFVwZGF0ZUgAEjIKDG1hcmtl",
            "dFN0YXR1cxgRIAEoCzIaLm9yZy5vcGVuZmVlZC5NYXJrZXRTdGF0dXNIAEIG",
            "CgRkYXRhIjgKDENoYW5uZWxSZXNldBIPCgdjaGFubmVsGAEgASgREhcKD3Ry",
            "YW5zYWN0aW9uVGltZRgCIAEoEiJXCglIZWFydEJlYXQSFwoPdHJhbnNhY3Rp",
            "b25UaW1lGAEgASgSEg4KBnN0YXR1cxgCIAEoCRIQCghleGNoYW5nZRgDIAEo",
            "CBIPCgdjaGFubmVsGAQgASgRIsMBCgxBZG1pbk1lc3NhZ2USFwoPb3JpZ2lu",
            "YXRpb25UaW1lGAEgASgSEg4KBnNvdXJjZRgCIAEoCRIUCgxsYW5ndWFnZUNv",
            "ZGUYAyABKAkSEAoIaGVhZExpbmUYBCABKAkSDAoEdGV4dBgFIAEoCRIxCgZz",
            "dGF0dXMYBiABKA4yIS5vcmcub3BlbmZlZWQuQWRtaW5NZXNzYWdlLlN0YXR1",
            "cxIPCgdjaGFubmVsGAcgASgRIhAKBlN0YXR1cxIGCgJPSxAAIq0BChVJbnN0",
            "cnVtZW50R3JvdXBTdGF0dXMSFwoPdHJhbnNhY3Rpb25UaW1lGAEgASgSEhkK",
            "EWluc3RydW1lbnRHcm91cElkGAIgASgJEjwKDXRyYWRpbmdTdGF0dXMYAyAB",
            "KA4yJS5vcmcub3BlbmZlZWQuSW5zdHJ1bWVudFRyYWRpbmdTdGF0dXMSEQoJ",
            "dHJhZGVEYXRlGAQgASgREg8KB2NoYW5uZWwYBSABKBEicgoMTWFya2V0U3Rh",
            "dHVzEhcKD3RyYW5zYWN0aW9uVGltZRgBIAEoEhIPCgdjaGFubmVsGAIgASgR",
            "EjgKEG1hcmtldFdpZGVTdGF0dXMYAyABKA4yHi5vcmcub3BlbmZlZWQuTWFy",
            "a2V0V2lkZVN0YXR1cyLKAwoNTWFya2V0U2Vzc2lvbhIRCgl0cmFkZURhdGUY",
            "BCABKBESIAoEb3BlbhgeIAEoCzISLm9yZy5vcGVuZmVlZC5PcGVuEiAKBGhp",
            "Z2gYHyABKAsyEi5vcmcub3BlbmZlZWQuSGlnaBIeCgNsb3cYICABKAsyES5v",
            "cmcub3BlbmZlZWQuTG93EiAKBGxhc3QYIyABKAsyEi5vcmcub3BlbmZlZWQu",
            "TGFzdBIkCgZ2b2x1bWUYJiABKAsyFC5vcmcub3BlbmZlZWQuVm9sdW1lEiwK",
            "CnNldHRsZW1lbnQYJyABKAsyGC5vcmcub3BlbmZlZWQuU2V0dGxlbWVudBIw",
            "Cg5wcmV2U2V0dGxlbWVudBgsIAEoCzIYLm9yZy5vcGVuZmVlZC5TZXR0bGVt",
            "ZW50EjAKDG9wZW5JbnRlcmVzdBgoIAEoCzIaLm9yZy5vcGVuZmVlZC5PcGVu",
            "SW50ZXJlc3QSNAoObnVtYmVyT2ZUcmFkZXMYKSABKAsyHC5vcmcub3BlbmZl",
            "ZWQuTnVtYmVyT2ZUcmFkZXMSMgoNbW9uZXRhcnlWYWx1ZRgqIAEoCzIbLm9y",
            "Zy5vcGVuZmVlZC5Nb25ldGFyeVZhbHVlIsILCg5NYXJrZXRTbmFwc2hvdBIQ",
            "CghtYXJrZXRJZBgBIAEoEhIXCg90cmFuc2FjdGlvblRpbWUYAiABKBISFgoO",
            "bWFya2V0U2VxdWVuY2UYAyABKAMSEQoJdHJhZGVEYXRlGAQgASgREhMKC3Rv",
            "dGFsQ2h1bmtzGAUgASgREhQKDGN1cnJlbnRDaHVuaxgGIAEoERIOCgZzeW1i",
            "b2wYByABKAkSGAoQcHJpY2VEZW5vbWluYXRvchgIIAEoERImCgdzZXJ2aWNl",
            "GAkgASgOMhUub3JnLm9wZW5mZWVkLlNlcnZpY2USOAoQaW5zdHJ1bWVudFN0",
            "YXR1cxgKIAEoCzIeLm9yZy5vcGVuZmVlZC5JbnN0cnVtZW50U3RhdHVzEicK",
            "A2JibxgLIAEoCzIaLm9yZy5vcGVuZmVlZC5CZXN0QmlkT2ZmZXISJwoFaW5k",
            "ZXgYDCABKAsyGC5vcmcub3BlbmZlZWQuSW5kZXhWYWx1ZRIwCgtwcmljZUxl",
            "dmVscxgNIAMoCzIbLm9yZy5vcGVuZmVlZC5BZGRQcmljZUxldmVsEiYKBm9y",
            "ZGVycxgOIAMoCzIWLm9yZy5vcGVuZmVlZC5BZGRPcmRlchIgCgRuZXdzGA8g",
            "ASgLMhIub3JnLm9wZW5mZWVkLk5ld3MSIAoEb3BlbhgeIAEoCzISLm9yZy5v",
            "cGVuZmVlZC5PcGVuEiAKBGhpZ2gYHyABKAsyEi5vcmcub3BlbmZlZWQuSGln",
            "aBIeCgNsb3cYICABKAsyES5vcmcub3BlbmZlZWQuTG93EiIKBWNsb3NlGCEg",
            "ASgLMhMub3JnLm9wZW5mZWVkLkNsb3NlEioKCXByZXZDbG9zZRgiIAEoCzIX",
            "Lm9yZy5vcGVuZmVlZC5QcmV2Q2xvc2USIAoEbGFzdBgjIAEoCzISLm9yZy5v",
            "cGVuZmVlZC5MYXN0EigKCHllYXJIaWdoGCQgASgLMhYub3JnLm9wZW5mZWVk",
            "LlllYXJIaWdoEiYKB3llYXJMb3cYJSABKAsyFS5vcmcub3BlbmZlZWQuWWVh",
            "ckxvdxIkCgZ2b2x1bWUYJiABKAsyFC5vcmcub3BlbmZlZWQuVm9sdW1lEiwK",
            "CnNldHRsZW1lbnQYJyABKAsyGC5vcmcub3BlbmZlZWQuU2V0dGxlbWVudBIw",
            "CgxvcGVuSW50ZXJlc3QYKCABKAsyGi5vcmcub3BlbmZlZWQuT3BlbkludGVy",
            "ZXN0EiAKBHZ3YXAYKSABKAsyEi5vcmcub3BlbmZlZWQuVndhcBJQChxkaXZp",
            "ZGVuZHNJbmNvbWVEaXN0cmlidXRpb25zGCogASgLMioub3JnLm9wZW5mZWVk",
            "LkRpdmlkZW5kc0luY29tZURpc3RyaWJ1dGlvbnMSNAoObnVtYmVyT2ZUcmFk",
            "ZXMYKyABKAsyHC5vcmcub3BlbmZlZWQuTnVtYmVyT2ZUcmFkZXMSMgoNbW9u",
            "ZXRhcnlWYWx1ZRgsIAEoCzIbLm9yZy5vcGVuZmVlZC5Nb25ldGFyeVZhbHVl",
            "EkAKFGNhcGl0YWxEaXN0cmlidXRpb25zGC0gASgLMiIub3JnLm9wZW5mZWVk",
            "LkNhcGl0YWxEaXN0cmlidXRpb25zEjoKEXNoYXJlc091dHN0YW5kaW5nGC4g",
            "ASgLMh8ub3JnLm9wZW5mZWVkLlNoYXJlc091dHN0YW5kaW5nEjIKDW5ldEFz",
            "c2V0VmFsdWUYLyABKAsyGy5vcmcub3BlbmZlZWQuTmV0QXNzZXRWYWx1ZRI0",
            "Cg9wcmV2aW91c1Nlc3Npb24YMCABKAsyGy5vcmcub3BlbmZlZWQuTWFya2V0",
            "U2Vzc2lvbhItCgh0U2Vzc2lvbhgxIAEoCzIbLm9yZy5vcGVuZmVlZC5NYXJr",
            "ZXRTZXNzaW9uEjIKDXZvbHVtZUF0UHJpY2UYMiABKAsyGy5vcmcub3BlbmZl",
            "ZWQuVm9sdW1lQXRQcmljZSKUAQoWTWFya2V0U25hcHNob3RSZXNwb25zZRIz",
            "CgZyZXN1bHQYASABKA4yIy5vcmcub3BlbmZlZWQuU25hcHNob3RSZXF1ZXN0",
            "UmVzdWx0Eg8KB21lc3NhZ2UYAiABKAkSNAoObWFya2V0U25hcHNob3QYAyAB",
            "KAsyHC5vcmcub3BlbmZlZWQuTWFya2V0U25hcHNob3QirA0KDE1hcmtldFVw",
            "ZGF0ZRIQCghtYXJrZXRJZBgBIAEoEhIOCgZzeW1ib2wYAiABKAkSFwoPdHJh",
            "bnNhY3Rpb25UaW1lGAMgASgSEhgKEGRpc3RyaWJ1dGlvblRpbWUYBCABKBIS",
            "FgoObWFya2V0U2VxdWVuY2UYBSABKBISFgoOc291cmNlU2VxdWVuY2UYBiAB",
            "KBISFAoMb3JpZ2luYXRvcklkGAcgASgMEhgKEHByaWNlRGVub21pbmF0b3IY",
            "CSABKBESJgoHY29udGV4dBgKIAEoCzIVLm9yZy5vcGVuZmVlZC5Db250ZXh0",
            "EiwKB3Nlc3Npb24YCyABKAsyGy5vcmcub3BlbmZlZWQuTWFya2V0U2Vzc2lv",
            "bhItCgh0U2Vzc2lvbhgMIAEoCzIbLm9yZy5vcGVuZmVlZC5NYXJrZXRTZXNz",
            "aW9uEjQKD3ByZXZpb3VzU2Vzc2lvbhgNIAEoCzIbLm9yZy5vcGVuZmVlZC5N",
            "YXJrZXRTZXNzaW9uEhAKCHJlZ2lvbmFsGA4gASgIEiIKBG5ld3MYFCABKAsy",
            "Ei5vcmcub3BlbmZlZWQuTmV3c0gAEiwKCWNsZWFyQm9vaxgVIAEoCzIXLm9y",
            "Zy5vcGVuZmVlZC5DbGVhckJvb2tIABI6ChBpbnN0cnVtZW50U3RhdHVzGBYg",
            "ASgLMh4ub3JnLm9wZW5mZWVkLkluc3RydW1lbnRTdGF0dXNIABIpCgNiYm8Y",
            "FyABKAsyGi5vcmcub3BlbmZlZWQuQmVzdEJpZE9mZmVySAASOAoPZGVwdGhQ",
            "cmljZUxldmVsGBggASgLMh0ub3JnLm9wZW5mZWVkLkRlcHRoUHJpY2VMZXZl",
            "bEgAEi4KCmRlcHRoT3JkZXIYGSABKAsyGC5vcmcub3BlbmZlZWQuRGVwdGhP",
            "cmRlckgAEikKBWluZGV4GBogASgLMhgub3JnLm9wZW5mZWVkLkluZGV4VmFs",
            "dWVIABImCgZ0cmFkZXMYGyABKAsyFC5vcmcub3BlbmZlZWQuVHJhZGVzSAAS",
            "IgoEb3BlbhgcIAEoCzISLm9yZy5vcGVuZmVlZC5PcGVuSAASIgoEaGlnaBgd",
            "IAEoCzISLm9yZy5vcGVuZmVlZC5IaWdoSAASIAoDbG93GB4gASgLMhEub3Jn",
            "Lm9wZW5mZWVkLkxvd0gAEiQKBWNsb3NlGB8gASgLMhMub3JnLm9wZW5mZWVk",
            "LkNsb3NlSAASLAoJcHJldkNsb3NlGCAgASgLMhcub3JnLm9wZW5mZWVkLlBy",
            "ZXZDbG9zZUgAEiIKBGxhc3QYISABKAsyEi5vcmcub3BlbmZlZWQuTGFzdEgA",
            "EioKCHllYXJIaWdoGCIgASgLMhYub3JnLm9wZW5mZWVkLlllYXJIaWdoSAAS",
            "KAoHeWVhckxvdxgjIAEoCzIVLm9yZy5vcGVuZmVlZC5ZZWFyTG93SAASJgoG",
            "dm9sdW1lGCQgASgLMhQub3JnLm9wZW5mZWVkLlZvbHVtZUgAEi4KCnNldHRs",
            "ZW1lbnQYJSABKAsyGC5vcmcub3BlbmZlZWQuU2V0dGxlbWVudEgAEjIKDG9w",
            "ZW5JbnRlcmVzdBgmIAEoCzIaLm9yZy5vcGVuZmVlZC5PcGVuSW50ZXJlc3RI",
            "ABIiCgR2d2FwGCcgASgLMhIub3JnLm9wZW5mZWVkLlZ3YXBIABJSChxkaXZp",
            "ZGVuZHNJbmNvbWVEaXN0cmlidXRpb25zGCggASgLMioub3JnLm9wZW5mZWVk",
            "LkRpdmlkZW5kc0luY29tZURpc3RyaWJ1dGlvbnNIABI2Cg5udW1iZXJPZlRy",
            "YWRlcxgpIAEoCzIcLm9yZy5vcGVuZmVlZC5OdW1iZXJPZlRyYWRlc0gAEjQK",
            "DW1vbmV0YXJ5VmFsdWUYKiABKAsyGy5vcmcub3BlbmZlZWQuTW9uZXRhcnlW",
            "YWx1ZUgAEkIKFGNhcGl0YWxEaXN0cmlidXRpb25zGCsgASgLMiIub3JnLm9w",
            "ZW5mZWVkLkNhcGl0YWxEaXN0cmlidXRpb25zSAASPAoRc2hhcmVzT3V0c3Rh",
            "bmRpbmcYLCABKAsyHy5vcmcub3BlbmZlZWQuU2hhcmVzT3V0c3RhbmRpbmdI",
            "ABI0Cg1uZXRBc3NldFZhbHVlGC0gASgLMhsub3JnLm9wZW5mZWVkLk5ldEFz",
            "c2V0VmFsdWVIABI0Cg1tYXJrZXRTdW1tYXJ5GC4gASgLMhsub3JnLm9wZW5m",
            "ZWVkLk1hcmtldFN1bW1hcnlIAEIGCgRkYXRhSgQICBAJIoYCCg9EZXB0aFBy",
            "aWNlTGV2ZWwSMwoGbGV2ZWxzGAEgAygLMiMub3JnLm9wZW5mZWVkLkRlcHRo",
            "UHJpY2VMZXZlbC5FbnRyeRq9AQoFRW50cnkSNAoNYWRkUHJpY2VMZXZlbBgB",
            "IAEoCzIbLm9yZy5vcGVuZmVlZC5BZGRQcmljZUxldmVsSAASOgoQZGVsZXRl",
            "UHJpY2VMZXZlbBgCIAEoCzIeLm9yZy5vcGVuZmVlZC5EZWxldGVQcmljZUxl",
            "dmVsSAASOgoQbW9kaWZ5UHJpY2VMZXZlbBgDIAEoCzIeLm9yZy5vcGVuZmVl",
            "ZC5Nb2RpZnlQcmljZUxldmVsSABCBgoEZGF0YSLeAQoKRGVwdGhPcmRlchIu",
            "CgZvcmRlcnMYASADKAsyHi5vcmcub3BlbmZlZWQuRGVwdGhPcmRlci5FbnRy",
            "eRqfAQoFRW50cnkSKgoIYWRkT3JkZXIYASABKAsyFi5vcmcub3BlbmZlZWQu",
            "QWRkT3JkZXJIABIwCgtkZWxldGVPcmRlchgCIAEoCzIZLm9yZy5vcGVuZmVl",
            "ZC5EZWxldGVPcmRlckgAEjAKC21vZGlmeU9yZGVyGAMgASgLMhkub3JnLm9w",
            "ZW5mZWVkLk1vZGlmeU9yZGVySABCBgoEZGF0YSJ2CgROZXdzEhcKD29yaWdp",
            "bmF0aW9uVGltZRgBIAEoEhIOCgZzb3VyY2UYAiABKAkSFAoMbGFuZ3VhZ2VD",
            "b2RlGAMgASgJEhAKCGhlYWRMaW5lGAQgASgJEgwKBHRleHQYBSABKAkSDwoH",
            "c3ltYm9scxgGIAMoCSI2CglDbGVhckJvb2sSEAoIcmVzZXJ2ZWQYASABKBES",
            "FwoPdHJhbnNhY3Rpb25UaW1lGAIgASgSIvcBChBJbnN0cnVtZW50U3RhdHVz",
            "EhcKD3RyYW5zYWN0aW9uVGltZRgJIAEoEhI8Cg10cmFkaW5nU3RhdHVzGAog",
            "ASgOMiUub3JnLm9wZW5mZWVkLkluc3RydW1lbnRUcmFkaW5nU3RhdHVzEhMK",
            "C29wZW5pbmdUaW1lGAsgASgSEgwKBG5vdGUYDCABKAkSEQoJdHJhZGVEYXRl",
            "GA0gASgRElYKH3JlZ3VsYXRpb25TSE9TaG9ydFNhbGVQcmljZVRlc3QYDiAB",
            "KA4yLS5vcmcub3BlbmZlZWQuUmVndWxhdGlvblNIT1Nob3J0U2FsZVByaWNl",
            "VGVzdCLBAgoMQmVzdEJpZE9mZmVyEhcKD3RyYW5zYWN0aW9uVGltZRgJIAEo",
            "EhIQCghiaWRQcmljZRgKIAEoEhITCgtiaWRRdWFudGl0eRgLIAEoEhIVCg1i",
            "aWRPcmRlckNvdW50GAwgASgREhUKDWJpZE9yaWdpbmF0b3IYDSABKAwSGQoR",
            "YmlkUXVvdGVDb25kaXRpb24YDiABKAwSEgoKb2ZmZXJQcmljZRgUIAEoEhIV",
            "Cg1vZmZlclF1YW50aXR5GBUgASgSEhcKD29mZmVyT3JkZXJDb3VudBgWIAEo",
            "ERIXCg9vZmZlck9yaWdpbmF0b3IYFyABKAwSGwoTb2ZmZXJRdW90ZUNvbmRp",
            "dGlvbhgYIAEoDBIWCg5xdW90ZUNvbmRpdGlvbhgeIAEoDBIQCghyZWdpb25h",
            "bBggIAEoCEoECB8QICKrAQoNQWRkUHJpY2VMZXZlbBIXCg90cmFuc2FjdGlv",
            "blRpbWUYCSABKBISDQoFbGV2ZWwYCiABKBESJAoEc2lkZRgLIAEoDjIWLm9y",
            "Zy5vcGVuZmVlZC5Cb29rU2lkZRINCgVwcmljZRgMIAEoEhIQCghxdWFudGl0",
            "eRgNIAEoEhISCgpvcmRlckNvdW50GA4gASgREhcKD2ltcGxpZWRRdWFudGl0",
            "eRgPIAEoEiJgChBEZWxldGVQcmljZUxldmVsEhcKD3RyYW5zYWN0aW9uVGlt",
            "ZRgJIAEoEhINCgVsZXZlbBgKIAEoERIkCgRzaWRlGAsgASgOMhYub3JnLm9w",
            "ZW5mZWVkLkJvb2tTaWRlIq4BChBNb2RpZnlQcmljZUxldmVsEhcKD3RyYW5z",
            "YWN0aW9uVGltZRgJIAEoEhINCgVsZXZlbBgKIAEoERIkCgRzaWRlGAsgASgO",
            "MhYub3JnLm9wZW5mZWVkLkJvb2tTaWRlEg0KBXByaWNlGAwgASgSEhAKCHF1",
            "YW50aXR5GA0gASgSEhIKCm9yZGVyQ291bnQYDiABKBESFwoPaW1wbGllZFF1",
            "YW50aXR5GA8gASgSIqABCghBZGRPcmRlchIXCg90cmFuc2FjdGlvblRpbWUY",
            "CSABKBISDwoHb3JkZXJJZBgKIAEoEhIkCgRzaWRlGAsgASgOMhYub3JnLm9w",
            "ZW5mZWVkLkJvb2tTaWRlEg0KBXByaWNlGAwgASgSEhAKCHF1YW50aXR5GA0g",
            "ASgSEhEKCWlzSW1wbGllZBgOIAEoCBIQCghwcmlvcml0eRgPIAEoEiJdCgtE",
            "ZWxldGVPcmRlchIXCg90cmFuc2FjdGlvblRpbWUYCSABKBISDwoHb3JkZXJJ",
            "ZBgKIAEoEhIkCgRzaWRlGAsgASgOMhYub3JnLm9wZW5mZWVkLkJvb2tTaWRl",
            "IqMBCgtNb2RpZnlPcmRlchIXCg90cmFuc2FjdGlvblRpbWUYCSABKBISDwoH",
            "b3JkZXJJZBgKIAEoEhIkCgRzaWRlGAsgASgOMhYub3JnLm9wZW5mZWVkLkJv",
            "b2tTaWRlEg0KBXByaWNlGAwgASgSEhAKCHF1YW50aXR5GA0gASgSEhEKCWlz",
            "SW1wbGllZBgOIAEoCBIQCghwcmlvcml0eRgPIAEoEiLXAQoKSW5kZXhWYWx1",
            "ZRIXCg90cmFuc2FjdGlvblRpbWUYCSABKBISEQoJdHJhZGVEYXRlGAogASgR",
            "EgwKBGxhc3QYCyABKBISDgoGdm9sdW1lGAwgASgSEgwKBG9wZW4YDSABKBIS",
            "FgoOc2V0dGxlbWVudE9wZW4YDiABKBISEwoLc3BlY2lhbE9wZW4YDyABKBIS",
            "DAoEaGlnaBgQIAEoEhILCgNsb3cYESABKBISDQoFY2xvc2UYEiABKBISCwoD",
            "YmlkGBMgASgSEg0KBW9mZmVyGBQgASgSItgBCgZUcmFkZXMSKgoGdHJhZGVz",
            "GAEgAygLMhoub3JnLm9wZW5mZWVkLlRyYWRlcy5FbnRyeRqhAQoFRW50cnkS",
            "JAoFdHJhZGUYASABKAsyEy5vcmcub3BlbmZlZWQuVHJhZGVIABI4Cg90cmFk",
            "ZUNvcnJlY3Rpb24YAiABKAsyHS5vcmcub3BlbmZlZWQuVHJhZGVDb3JyZWN0",
            "aW9uSAASMAoLdHJhZGVDYW5jZWwYAyABKAsyGS5vcmcub3BlbmZlZWQuVHJh",
            "ZGVDYW5jZWxIAEIGCgRkYXRhItgECgVUcmFkZRIUCgxvcmlnaW5hdG9ySWQY",
            "CCABKAwSFwoPdHJhbnNhY3Rpb25UaW1lGAkgASgSEg0KBXByaWNlGAogASgS",
            "EhAKCHF1YW50aXR5GAsgASgSEg8KB3RyYWRlSWQYDCABKAwSJAoEc2lkZRgN",
            "IAEoDjIWLm9yZy5vcGVuZmVlZC5Cb29rU2lkZRIRCgl0cmFkZURhdGUYDiAB",
            "KBESDwoHYnV5ZXJJZBgPIAEoDBIQCghzZWxsZXJJZBgQIAEoDBIUCgxvcGVu",
            "aW5nVHJhZGUYESABKAgSFAoMc3lzdGVtUHJpY2VkGBIgASgIEhUKDW1hcmtl",
            "dE9uQ2xvc2UYEyABKAgSDgoGb2RkTG90GBQgASgIEjYKD3NldHRsZW1lbnRU",
            "ZXJtcxgVIAEoDjIdLm9yZy5vcGVuZmVlZC5TZXR0bGVtZW50VGVybXMSKgoJ",
            "Y3Jvc3NUeXBlGBYgASgOMhcub3JnLm9wZW5mZWVkLkNyb3NzVHlwZRIOCgZi",
            "eVBhc3MYFyABKAgSEQoJbGFzdFByaWNlGBggASgSEhUKDXNhbGVDb25kaXRp",
            "b24YGSABKAwSEAoIY3VycmVuY3kYGiABKAkSGQoRZG9lc05vdFVwZGF0ZUxh",
            "c3QYGyABKAgSGwoTZG9lc05vdFVwZGF0ZVZvbHVtZRgcIAEoCBIPCgdzZXNz",
            "aW9uGB4gASgJEhIKCmJsb2NrVHJhZGUYHyABKAgSGAoQZGlzdHJpYnV0aW9u",
            "VGltZRggIAEoEhIYChB0cmFuc2FjdGlvblRpbWUyGCEgASgSIosECg9UcmFk",
            "ZUNvcnJlY3Rpb24SFAoMb3JpZ2luYXRvcklkGAggASgMEhcKD3RyYW5zYWN0",
            "aW9uVGltZRgJIAEoEhINCgVwcmljZRgKIAEoEhIQCghxdWFudGl0eRgLIAEo",
            "EhIPCgd0cmFkZUlkGAwgASgMEiQKBHNpZGUYDSABKA4yFi5vcmcub3BlbmZl",
            "ZWQuQm9va1NpZGUSEQoJdHJhZGVEYXRlGA4gASgREg8KB2J1eWVySWQYDyAB",
            "KAwSEAoIc2VsbGVySWQYECABKAwSFAoMb3BlbmluZ1RyYWRlGBEgASgIEhQK",
            "DHN5c3RlbVByaWNlZBgSIAEoCBIVCg1tYXJrZXRPbkNsb3NlGBMgASgIEg4K",
            "Bm9kZExvdBgUIAEoCBI2Cg9zZXR0bGVtZW50VGVybXMYFSABKA4yHS5vcmcu",
            "b3BlbmZlZWQuU2V0dGxlbWVudFRlcm1zEioKCWNyb3NzVHlwZRgWIAEoDjIX",
            "Lm9yZy5vcGVuZmVlZC5Dcm9zc1R5cGUSDgoGYnlQYXNzGBcgASgIEhcKD29y",
            "aWdpbmFsVHJhZGVJZBgYIAEoDBIVCg1zYWxlQ29uZGl0aW9uGBkgASgMEhAK",
            "CGN1cnJlbmN5GBogASgJEhgKEGRpc3RyaWJ1dGlvblRpbWUYGyABKBISGAoQ",
            "dHJhbnNhY3Rpb25UaW1lMhgcIAEoEiLnAQoLVHJhZGVDYW5jZWwSFAoMb3Jp",
            "Z2luYXRvcklkGAggASgMEhcKD3RyYW5zYWN0aW9uVGltZRgJIAEoEhIbChNj",
            "b3JyZWN0ZWRUcmFkZVByaWNlGAogASgSEh4KFmNvcnJlY3RlZFRyYWRlUXVh",
            "bnRpdHkYCyABKBISDwoHdHJhZGVJZBgMIAEoDBIVCg1zYWxlQ29uZGl0aW9u",
            "GA0gASgMEhAKCGN1cnJlbmN5GA4gASgJEhgKEGRpc3RyaWJ1dGlvblRpbWUY",
            "DyABKBISGAoQdHJhbnNhY3Rpb25UaW1lMhgQIAEoEiKbAQoET3BlbhIXCg90",
            "cmFuc2FjdGlvblRpbWUYCSABKBISEQoJdHJhZGVEYXRlGAogASgREg0KBXBy",
            "aWNlGAsgASgSEkYKF09wZW5DbG9zZVNldHRsZW1lbnRGbGFnGAwgASgOMiUu",
            "b3JnLm9wZW5mZWVkLk9wZW5DbG9zZVNldHRsZW1lbnRGbGFnEhAKCGN1cnJl",
            "bmN5GA0gASgJIlMKBEhpZ2gSFwoPdHJhbnNhY3Rpb25UaW1lGAkgASgSEhEK",
            "CXRyYWRlRGF0ZRgKIAEoERINCgVwcmljZRgLIAEoEhIQCghjdXJyZW5jeRgM",
            "IAEoCSJSCgNMb3cSFwoPdHJhbnNhY3Rpb25UaW1lGAkgASgSEhEKCXRyYWRl",
            "RGF0ZRgKIAEoERINCgVwcmljZRgLIAEoEhIQCghjdXJyZW5jeRgMIAEoCSJU",
            "CgVDbG9zZRIXCg90cmFuc2FjdGlvblRpbWUYCSABKBISEQoJdHJhZGVEYXRl",
            "GAogASgREg0KBXByaWNlGAsgASgSEhAKCGN1cnJlbmN5GAwgASgJIlgKCVBy",
            "ZXZDbG9zZRIXCg90cmFuc2FjdGlvblRpbWUYCSABKBISEQoJdHJhZGVEYXRl",
            "GAogASgREg0KBXByaWNlGAsgASgSEhAKCGN1cnJlbmN5GAwgASgJInYKBExh",
            "c3QSFwoPdHJhbnNhY3Rpb25UaW1lGAkgASgSEhEKCXRyYWRlRGF0ZRgKIAEo",
            "ERINCgVwcmljZRgLIAEoEhIQCghxdWFudGl0eRgMIAEoEhIQCghjdXJyZW5j",
            "eRgNIAEoCRIPCgdzZXNzaW9uGB4gASgJIkQKCFllYXJIaWdoEhcKD3RyYW5z",
            "YWN0aW9uVGltZRgJIAEoEhINCgVwcmljZRgKIAEoEhIQCghjdXJyZW5jeRgL",
            "IAEoCSJDCgdZZWFyTG93EhcKD3RyYW5zYWN0aW9uVGltZRgJIAEoEhINCgVw",
            "cmljZRgKIAEoEhIQCghjdXJyZW5jeRgLIAEoCSJECgZWb2x1bWUSFwoPdHJh",
            "bnNhY3Rpb25UaW1lGAkgASgSEhEKCXRyYWRlRGF0ZRgKIAEoERIOCgZ2b2x1",
            "bWUYCyABKBIiUgoOTnVtYmVyT2ZUcmFkZXMSFwoPdHJhbnNhY3Rpb25UaW1l",
            "GAkgASgSEhEKCXRyYWRlRGF0ZRgKIAEoERIUCgxudW1iZXJUcmFkZXMYCyAB",
            "KBIiZQoNTW9uZXRhcnlWYWx1ZRIXCg90cmFuc2FjdGlvblRpbWUYCSABKBIS",
            "EQoJdHJhZGVEYXRlGAogASgREg0KBXZhbHVlGAsgASgSEhkKEXZhbHVlQ3Vy",
            "cmVuY3lDb2RlGAwgASgJItEBCgpTZXR0bGVtZW50EhcKD3RyYW5zYWN0aW9u",
            "VGltZRgJIAEoEhIRCgl0cmFkZURhdGUYCiABKBESDQoFcHJpY2UYCyABKBIS",
            "GQoRcHJlbGltaW5hcnlTZXR0bGUYDCABKAgSEAoIY3VycmVuY3kYDSABKAkS",
            "OAoQc2V0dGxlbWVudFNvdXJjZRgOIAEoDjIeLm9yZy5vcGVuZmVlZC5TZXR0",
            "bGVtZW50U291cmNlEg8KB3Nlc3Npb24YDyABKAkSEAoIcmVzZXJ2ZWQYfyAB",
            "KAgiSgoMT3BlbkludGVyZXN0EhcKD3RyYW5zYWN0aW9uVGltZRgJIAEoEhIR",
            "Cgl0cmFkZURhdGUYCiABKBESDgoGdm9sdW1lGAsgASgSIkAKBFZ3YXASFwoP",
            "dHJhbnNhY3Rpb25UaW1lGAkgASgSEhEKCXRyYWRlRGF0ZRgKIAEoERIMCgR2",
            "d2FwGAsgASgSIvgDChxEaXZpZGVuZHNJbmNvbWVEaXN0cmlidXRpb25zEhcK",
            "D3RyYW5zYWN0aW9uVGltZRgGIAEoEhIWCg5pbnN0cnVtZW50VHlwZRgHIAEo",
            "CRIXCg9jb3Jwb3JhdGVBY3Rpb24YCCABKAkSGAoQZGlzdHJpYnV0aW9uVHlw",
            "ZRgJIAEoCRITCgtwYXlhYmxlRGF0ZRgKIAEoERISCgpyZWNvcmREYXRlGAsg",
            "ASgREhYKDmV4RGl2aWRlbmREYXRlGAwgASgREg4KBmFtb3VudBgNIAEoEhIU",
            "CgxjdXJyZW5jeUNvZGUYDiABKAkSDQoFbm90ZXMYDyADKAkSHQoVdG90YWxD",
            "YXNoRGlzdHJpYnV0aW9uGBAgASgSEiQKHG5vblF1YWxpZmllZENhc2hEaXN0",
            "cmlidXRpb24YESABKBISIQoZcXVhbGlmaWVkQ2FzaERpc3RyaWJ1dGlvbhgS",
            "IAEoEhIfChd0YXhGcmVlQ2FzaERpc3RyaWJ1dGlvbhgTIAEoEhIgChhvcmRp",
            "bmFyeUZvcmVpZ25UYXhDcmVkaXQYFCABKBISIQoZcXVhbGlmaWVkRm9yZWln",
            "blRheENyZWRpdBgVIAEoEhIaChJzdG9ja0RpdmlkZW5kUmF0aW8YFiABKBIS",
            "FAoMcmVpbnZlc3REYXRlGBcgASgRIsoCChRDYXBpdGFsRGlzdHJpYnV0aW9u",
            "cxIXCg90cmFuc2FjdGlvblRpbWUYCCABKBISFgoOaW5zdHJ1bWVudFR5cGUY",
            "CSABKAkSFwoPY29ycG9yYXRlQWN0aW9uGAogASgJEhMKC3BheWFibGVEYXRl",
            "GAsgASgREhIKCnJlY29yZERhdGUYDCABKBESDgoGZXhEYXRlGA0gASgREhwK",
            "FHNob3J0VGVybUNhcGl0YWxHYWluGA4gASgSEhsKE2xvbmdUZXJtQ2FwaXRh",
            "bEdhaW4YDyABKBISIAoYdW5hbGxvY2F0ZWREaXN0cmlidXRpb25zGBAgASgS",
            "EhcKD3JldHVybk9mQ2FwaXRhbBgRIAEoEhIUCgxjdXJyZW5jeUNvZGUYEiAB",
            "KAkSDQoFbm90ZXMYEyADKAkSFAoMcmVpbnZlc3REYXRlGBQgASgRIkcKEVNo",
            "YXJlc091dHN0YW5kaW5nEhkKEXNoYXJlc091dHN0YW5kaW5nGAEgASgSEhcK",
            "D3RyYW5zYWN0aW9uVGltZRgCIAEoEiI/Cg1OZXRBc3NldFZhbHVlEhUKDW5l",
            "dEFzc2V0VmFsdWUYASABKBISFwoPdHJhbnNhY3Rpb25UaW1lGAIgASgSIooH",
            "Cg1NYXJrZXRTdW1tYXJ5EhcKD3RyYW5zYWN0aW9uVGltZRgBIAEoEhITCgt0",
            "cmFkaW5nRGF0ZRgCIAEoERISCgpzdGFydE9mRGF5GAMgASgIEhAKCGVuZE9m",
            "RGF5GAQgASgIEjMKBWNsZWFyGAUgASgOMiQub3JnLm9wZW5mZWVkLk1hcmtl",
            "dFN1bW1hcnkuQ2xlYXJTZXQSOAoQaW5zdHJ1bWVudFN0YXR1cxgJIAEoCzIe",
            "Lm9yZy5vcGVuZmVlZC5JbnN0cnVtZW50U3RhdHVzEicKA2JibxgKIAEoCzIa",
            "Lm9yZy5vcGVuZmVlZC5CZXN0QmlkT2ZmZXISIAoEb3BlbhgLIAEoCzISLm9y",
            "Zy5vcGVuZmVlZC5PcGVuEiAKBGhpZ2gYDCABKAsyEi5vcmcub3BlbmZlZWQu",
            "SGlnaBIeCgNsb3cYDSABKAsyES5vcmcub3BlbmZlZWQuTG93EiIKBWNsb3Nl",
            "GA4gASgLMhMub3JnLm9wZW5mZWVkLkNsb3NlEioKCXByZXZDbG9zZRgPIAEo",
            "CzIXLm9yZy5vcGVuZmVlZC5QcmV2Q2xvc2USIAoEbGFzdBgQIAEoCzISLm9y",
            "Zy5vcGVuZmVlZC5MYXN0EiQKBnZvbHVtZRgRIAEoCzIULm9yZy5vcGVuZmVl",
            "ZC5Wb2x1bWUSLAoKc2V0dGxlbWVudBgSIAEoCzIYLm9yZy5vcGVuZmVlZC5T",
            "ZXR0bGVtZW50EjAKDG9wZW5JbnRlcmVzdBgTIAEoCzIaLm9yZy5vcGVuZmVl",
            "ZC5PcGVuSW50ZXJlc3QSIAoEdndhcBgUIAEoCzISLm9yZy5vcGVuZmVlZC5W",
            "d2FwEg8KB3Nlc3Npb24YFSABKAkSPAoLc3VtbWFyeVR5cGUYFiABKA4yJy5v",
            "cmcub3BlbmZlZWQuTWFya2V0U3VtbWFyeS5TdW1tYXJ5VHlwZSIzCghDbGVh",
            "clNldBIICgROT05FEAASBwoDQUxMEAESBgoCQkEQAhIMCghDVVNUT01fMRAD",
            "IooBCgtTdW1tYXJ5VHlwZRIUChBFWENIQU5HRV9SRUZSRVNIEAASFgoSUkVG",
            "UkVTSF9MSVZFX1BSSUNFEAESGAoURU9EX0NPTU1PRElUWV9QUklDRVMQAhIa",
            "ChZFT0RfU1RPQ0tfRk9SRVhfUFJJQ0VTEAMSFwoTRU9EX0NPTU1PRElUWV9T",
            "VEFUUxAEImEKB0NvbnRleHQSJwoEZGF0YRgBIAMoCzIZLm9yZy5vcGVuZmVl",
            "ZC5Db250ZXh0RGF0YRItCgt0cmFjZVBvaW50cxgCIAMoCzIYLm9yZy5vcGVu",
            "ZmVlZC5UcmFjZVBvaW50IqIBCgtDb250ZXh0RGF0YRIKCgJpZBgBIAEoCRIR",
            "Cgd2c3RyaW5nGAUgASgJSAASEAoGdmJ5dGVzGAYgASgMSAASDwoFdmJvb2wY",
            "ByABKAhIABIRCgd2c2ludDMyGAggASgRSAASEQoHdnNpbnQ2NBgJIAEoEkgA",
            "EhAKBnZmbG9hdBgKIAEoAkgAEhEKB3Zkb3VibGUYCyABKAFIAEIGCgRkYXRh",
            "Il4KClRyYWNlUG9pbnQSCgoCaWQYASABKAkSEwoLY29tcG9uZW50SWQYAiAB",
            "KAkSEwoLdGltZXN0YW1wTnMYAyABKBISGgoSY29tcG9uZW50TGF0ZW5jeU5z",
            "GAQgASgFInYKGlRDUEhpc3RvcmljYWxSZXBsYXlSZXF1ZXN0Eg8KB2NoYW5u",
            "ZWwYASABKAUSEwoLcmVzZXROdW1iZXIYAiABKAUSEAoIc2VxdWVuY2UYAyAB",
            "KAMSDQoFY291bnQYBCABKAUSEQoJcmVxdWVzdElkGAUgASgJIuYBCg9TbmFw",
            "c2hvdFJlcXVlc3QSDwoHY2hhbm5lbBgBIAEoBRITCgtyZXNldE51bWJlchgC",
            "IAEoBRIRCglyZXF1ZXN0SWQYAyABKAkSTwoUc25hcHNob3RSZXF1ZXN0VHlw",
            "ZXMYBCADKA4yMS5vcmcub3BlbmZlZWQuU25hcHNob3RSZXF1ZXN0LlNuYXBz",
            "aG90UmVxdWVzdFR5cGUiSQoTU25hcHNob3RSZXF1ZXN0VHlwZRIHCgNBTEwQ",
            "ABIJCgVRVU9URRABEgkKBURFUFRIEAISEwoPVk9MVU1FX0FUX1BSSUNFEAMi",
            "mwIKDVZvbHVtZUF0UHJpY2USEAoIbWFya2V0SWQYASABKBISDgoGc3ltYm9s",
            "GAIgASgJEhcKD3RyYW5zYWN0aW9uVGltZRgDIAEoEhIRCglsYXN0UHJpY2UY",
            "BCABKBISFAoMbGFzdFF1YW50aXR5GAUgASgSEhwKFGxhc3RDdW11bGF0aXZl",
            "Vm9sdW1lGAYgASgSEhEKCXRyYWRlRGF0ZRgHIAEoERJCCgxwcmljZVZvbHVt",
            "ZXMYCCADKAsyLC5vcmcub3BlbmZlZWQuVm9sdW1lQXRQcmljZS5QcmljZUxl",
            "dmVsVm9sdW1lGjEKEFByaWNlTGV2ZWxWb2x1bWUSDQoFcHJpY2UYASABKBIS",
            "DgoGdm9sdW1lGAIgASgSIrABCgRPaGxjEhAKCG1hcmtldElkGAEgASgSEg4K",
            "BnN5bWJvbBgCIAEoCRIgCgRvcGVuGAMgASgLMhIub3JnLm9wZW5mZWVkLk9w",
            "ZW4SIAoEaGlnaBgEIAEoCzISLm9yZy5vcGVuZmVlZC5IaWdoEh4KA2xvdxgF",
            "IAEoCzIRLm9yZy5vcGVuZmVlZC5Mb3cSIgoFY2xvc2UYBiABKAsyEy5vcmcu",
            "b3BlbmZlZWQuQ2xvc2UqNQoIQm9va1NpZGUSFQoRVU5LTk9XTl9CT09LX1NJ",
            "REUQABIHCgNCSUQQARIJCgVPRkZFUhACKroDChdJbnN0cnVtZW50VHJhZGlu",
            "Z1N0YXR1cxIaChZVTktOT1dOX1RSQURJTkdfU1RBVFVTEAASEgoOVFJBRElO",
            "R19SRVNVTUUQARIMCghQUkVfT1BFThACEggKBE9QRU4QAxINCglQUkVfQ0xP",
            "U0UQBBIJCgVDTE9TRRAFEhAKDFRSQURJTkdfSEFMVBAGEhQKEFFVT1RBVElP",
            "Tl9SRVNVTUUQBxIOCgpPUEVOX0RFTEFZEAgSFQoRTk9fT1BFTl9OT19SRVNV",
            "TUUQCRIPCgtGQVNUX01BUktFVBAKEhMKD0ZBU1RfTUFSS0VUX0VORBALEg8K",
            "C0xBVEVfTUFSS0VUEAwSEwoPTEFURV9NQVJLRVRfRU5EEA0SEAoMUE9TVF9T",
            "RVNTSU9OEA4SFAoQUE9TVF9TRVNTSU9OX0VORBAPEhgKFE5FV19QUklDRV9J",
            "TkRJQ0FUSU9OEBASHQoZTk9UX0FWQUlMQUJMRV9GT1JfVFJBRElORxAREg0K",
            "CVBSRV9DUk9TUxASEgkKBUNST1NTEBMSDgoKUE9TVF9DTE9TRRAUEg0KCU5P",
            "X0NIQU5HRRAVEggKBE5BRlQQFiqKAQofUmVndWxhdGlvblNIT1Nob3J0U2Fs",
            "ZVByaWNlVGVzdBIWChJVTktOT1dOX1BSSUNFX1RFU1QQABITCg9QUklDRV9U",
            "RVNUX05PTkUQARIYChRQUklDRV9URVNUX0lOX0VGRkVDVBACEiAKHFBSSUNF",
            "X1RFU1RfUkVNQUlOU19JTl9FRkZFQ1QQAyp2Cg9TZXR0bGVtZW50VGVybXMS",
            "HAoYVU5LTk9XTl9TRVRUTEVNRU5UX1RFUk1TEAASCAoEQ0FTSBABEgsKB05P",
            "Tl9ORVQQAhIUChBDT05USU5HRU5UX1RSQURFEAMSDgoKQ0FTSF9UT0RBWRAE",
            "EggKBERBVEUQBSp9CglDcm9zc1R5cGUSFgoSVU5LTk9XTl9DUk9TU19UWVBF",
            "EAASCwoHREVGQVVMVBABEgwKCElOVEVSTkFMEAISCQoFQkFTSVMQAxIOCgpD",
            "T05USU5HRU5UEAQSCwoHU1BFQ0lBTBAFEggKBFZXQVAQBhILCgdSRUdVTEFS",
            "EAcqUQoXT3BlbkNsb3NlU2V0dGxlbWVudEZsYWcSCwoHVU5LTk9XThAAEg4K",
            "CkRBSUxZX09QRU4QARIZChVJTkRJQ0FUSVZFX09QRU5fUFJJQ0UQAipSChBT",
            "ZXR0bGVtZW50U291cmNlEh0KGVVOS05PV05fU0VUVExFTUVOVF9TT1VSQ0UQ",
            "ABIKCgZHTE9CRVgQARIHCgNJVEMQAhIKCgZNQU5VQUwQAyp4CgdTZXJ2aWNl",
            "EhMKD1VOS05PV05fU0VSVklDRRAAEg0KCVJFQUxfVElNRRABEgsKB0RFTEFZ",
            "RUQQAhIWChJSRUFMX1RJTUVfU05BUFNIT1QQAxIUChBERUxBWUVEX1NOQVBT",
            "SE9UEAQSDgoKRU5EX09GX0RBWRAFKnkKEE1hcmtldFdpZGVTdGF0dXMSEgoO",
            "U1RBVFVTX1VOS05PV04QABIXChNTVEFUVVNfU1RBUlRfT0ZfREFZEAESFQoR",
            "U1RBVFVTX0VORF9PRl9EQVkQAhIPCgtTVEFUVVNfT1BFThADEhAKDFNUQVRV",
            "U19DTE9TRRAEKswBChVTbmFwc2hvdFJlcXVlc3RSZXN1bHQSIwofU05BUFNI",
            "T1RfUkVRVUVTVF9VTktOT1dOX1JFU1VMVBAAEhwKGFNOQVBTSE9UX1JFUVVF",
            "U1RfU1VDQ0VTUxABEh4KGlNOQVBTSE9UX1JFUVVFU1RfTk9UX0ZPVU5EEAIS",
            "KgomU05BUFNIT1RfUkVRVUVTVF9TRVJWSUNFX05PVF9BVkFJTEFCTEUQAxIk",
            "CiBTTkFQU0hPVF9SRVFVRVNUX0dFTkVSSUNfRkFJTFVSRRAEQhFIAVABWghv",
            "cGVuZmVlZKABAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Org.Openfeed.OpenfeedInstrumentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Org.Openfeed.BookSide), typeof(global::Org.Openfeed.InstrumentTradingStatus), typeof(global::Org.Openfeed.RegulationSHOShortSalePriceTest), typeof(global::Org.Openfeed.SettlementTerms), typeof(global::Org.Openfeed.CrossType), typeof(global::Org.Openfeed.OpenCloseSettlementFlag), typeof(global::Org.Openfeed.SettlementSource), typeof(global::Org.Openfeed.Service), typeof(global::Org.Openfeed.MarketWideStatus), typeof(global::Org.Openfeed.SnapshotRequestResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.OpenfeedMessage), global::Org.Openfeed.OpenfeedMessage.Parser, new[]{ "SendingTime", "TotalCount", "SyncSequence", "Context", "ChannelReset", "HeartBeat", "AdminMessage", "InstrumentDefinition", "InstrumentGroupStatus", "MarketSnapshot", "MarketUpdate", "MarketStatus" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.ChannelReset), global::Org.Openfeed.ChannelReset.Parser, new[]{ "Channel", "TransactionTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.HeartBeat), global::Org.Openfeed.HeartBeat.Parser, new[]{ "TransactionTime", "Status", "Exchange", "Channel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.AdminMessage), global::Org.Openfeed.AdminMessage.Parser, new[]{ "OriginationTime", "Source", "LanguageCode", "HeadLine", "Text", "Status", "Channel" }, null, new[]{ typeof(global::Org.Openfeed.AdminMessage.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentGroupStatus), global::Org.Openfeed.InstrumentGroupStatus.Parser, new[]{ "TransactionTime", "InstrumentGroupId", "TradingStatus", "TradeDate", "Channel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketStatus), global::Org.Openfeed.MarketStatus.Parser, new[]{ "TransactionTime", "Channel", "MarketWideStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketSession), global::Org.Openfeed.MarketSession.Parser, new[]{ "TradeDate", "Open", "High", "Low", "Last", "Volume", "Settlement", "PrevSettlement", "OpenInterest", "NumberOfTrades", "MonetaryValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketSnapshot), global::Org.Openfeed.MarketSnapshot.Parser, new[]{ "MarketId", "TransactionTime", "MarketSequence", "TradeDate", "TotalChunks", "CurrentChunk", "Symbol", "PriceDenominator", "Service", "InstrumentStatus", "Bbo", "Index", "PriceLevels", "Orders", "News", "Open", "High", "Low", "Close", "PrevClose", "Last", "YearHigh", "YearLow", "Volume", "Settlement", "OpenInterest", "Vwap", "DividendsIncomeDistributions", "NumberOfTrades", "MonetaryValue", "CapitalDistributions", "SharesOutstanding", "NetAssetValue", "PreviousSession", "TSession", "VolumeAtPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketSnapshotResponse), global::Org.Openfeed.MarketSnapshotResponse.Parser, new[]{ "Result", "Message", "MarketSnapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketUpdate), global::Org.Openfeed.MarketUpdate.Parser, new[]{ "MarketId", "Symbol", "TransactionTime", "DistributionTime", "MarketSequence", "SourceSequence", "OriginatorId", "PriceDenominator", "Context", "Session", "TSession", "PreviousSession", "Regional", "News", "ClearBook", "InstrumentStatus", "Bbo", "DepthPriceLevel", "DepthOrder", "Index", "Trades", "Open", "High", "Low", "Close", "PrevClose", "Last", "YearHigh", "YearLow", "Volume", "Settlement", "OpenInterest", "Vwap", "DividendsIncomeDistributions", "NumberOfTrades", "MonetaryValue", "CapitalDistributions", "SharesOutstanding", "NetAssetValue", "MarketSummary" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DepthPriceLevel), global::Org.Openfeed.DepthPriceLevel.Parser, new[]{ "Levels" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DepthPriceLevel.Types.Entry), global::Org.Openfeed.DepthPriceLevel.Types.Entry.Parser, new[]{ "AddPriceLevel", "DeletePriceLevel", "ModifyPriceLevel" }, new[]{ "Data" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DepthOrder), global::Org.Openfeed.DepthOrder.Parser, new[]{ "Orders" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DepthOrder.Types.Entry), global::Org.Openfeed.DepthOrder.Types.Entry.Parser, new[]{ "AddOrder", "DeleteOrder", "ModifyOrder" }, new[]{ "Data" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.News), global::Org.Openfeed.News.Parser, new[]{ "OriginationTime", "Source", "LanguageCode", "HeadLine", "Text", "Symbols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.ClearBook), global::Org.Openfeed.ClearBook.Parser, new[]{ "Reserved", "TransactionTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.InstrumentStatus), global::Org.Openfeed.InstrumentStatus.Parser, new[]{ "TransactionTime", "TradingStatus", "OpeningTime", "Note", "TradeDate", "RegulationSHOShortSalePriceTest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.BestBidOffer), global::Org.Openfeed.BestBidOffer.Parser, new[]{ "TransactionTime", "BidPrice", "BidQuantity", "BidOrderCount", "BidOriginator", "BidQuoteCondition", "OfferPrice", "OfferQuantity", "OfferOrderCount", "OfferOriginator", "OfferQuoteCondition", "QuoteCondition", "Regional" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.AddPriceLevel), global::Org.Openfeed.AddPriceLevel.Parser, new[]{ "TransactionTime", "Level", "Side", "Price", "Quantity", "OrderCount", "ImpliedQuantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DeletePriceLevel), global::Org.Openfeed.DeletePriceLevel.Parser, new[]{ "TransactionTime", "Level", "Side" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.ModifyPriceLevel), global::Org.Openfeed.ModifyPriceLevel.Parser, new[]{ "TransactionTime", "Level", "Side", "Price", "Quantity", "OrderCount", "ImpliedQuantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.AddOrder), global::Org.Openfeed.AddOrder.Parser, new[]{ "TransactionTime", "OrderId", "Side", "Price", "Quantity", "IsImplied", "Priority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DeleteOrder), global::Org.Openfeed.DeleteOrder.Parser, new[]{ "TransactionTime", "OrderId", "Side" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.ModifyOrder), global::Org.Openfeed.ModifyOrder.Parser, new[]{ "TransactionTime", "OrderId", "Side", "Price", "Quantity", "IsImplied", "Priority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.IndexValue), global::Org.Openfeed.IndexValue.Parser, new[]{ "TransactionTime", "TradeDate", "Last", "Volume", "Open", "SettlementOpen", "SpecialOpen", "High", "Low", "Close", "Bid", "Offer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Trades), global::Org.Openfeed.Trades.Parser, new[]{ "Trades_" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Trades.Types.Entry), global::Org.Openfeed.Trades.Types.Entry.Parser, new[]{ "Trade", "TradeCorrection", "TradeCancel" }, new[]{ "Data" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Trade), global::Org.Openfeed.Trade.Parser, new[]{ "OriginatorId", "TransactionTime", "Price", "Quantity", "TradeId", "Side", "TradeDate", "BuyerId", "SellerId", "OpeningTrade", "SystemPriced", "MarketOnClose", "OddLot", "SettlementTerms", "CrossType", "ByPass", "LastPrice", "SaleCondition", "Currency", "DoesNotUpdateLast", "DoesNotUpdateVolume", "Session", "BlockTrade", "DistributionTime", "TransactionTime2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.TradeCorrection), global::Org.Openfeed.TradeCorrection.Parser, new[]{ "OriginatorId", "TransactionTime", "Price", "Quantity", "TradeId", "Side", "TradeDate", "BuyerId", "SellerId", "OpeningTrade", "SystemPriced", "MarketOnClose", "OddLot", "SettlementTerms", "CrossType", "ByPass", "OriginalTradeId", "SaleCondition", "Currency", "DistributionTime", "TransactionTime2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.TradeCancel), global::Org.Openfeed.TradeCancel.Parser, new[]{ "OriginatorId", "TransactionTime", "CorrectedTradePrice", "CorrectedTradeQuantity", "TradeId", "SaleCondition", "Currency", "DistributionTime", "TransactionTime2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Open), global::Org.Openfeed.Open.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "OpenCloseSettlementFlag", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.High), global::Org.Openfeed.High.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Low), global::Org.Openfeed.Low.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Close), global::Org.Openfeed.Close.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.PrevClose), global::Org.Openfeed.PrevClose.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Last), global::Org.Openfeed.Last.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "Quantity", "Currency", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.YearHigh), global::Org.Openfeed.YearHigh.Parser, new[]{ "TransactionTime", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.YearLow), global::Org.Openfeed.YearLow.Parser, new[]{ "TransactionTime", "Price", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Volume), global::Org.Openfeed.Volume.Parser, new[]{ "TransactionTime", "TradeDate", "Volume_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.NumberOfTrades), global::Org.Openfeed.NumberOfTrades.Parser, new[]{ "TransactionTime", "TradeDate", "NumberTrades" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MonetaryValue), global::Org.Openfeed.MonetaryValue.Parser, new[]{ "TransactionTime", "TradeDate", "Value", "ValueCurrencyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Settlement), global::Org.Openfeed.Settlement.Parser, new[]{ "TransactionTime", "TradeDate", "Price", "PreliminarySettle", "Currency", "SettlementSource", "Session", "Reserved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.OpenInterest), global::Org.Openfeed.OpenInterest.Parser, new[]{ "TransactionTime", "TradeDate", "Volume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Vwap), global::Org.Openfeed.Vwap.Parser, new[]{ "TransactionTime", "TradeDate", "Vwap_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.DividendsIncomeDistributions), global::Org.Openfeed.DividendsIncomeDistributions.Parser, new[]{ "TransactionTime", "InstrumentType", "CorporateAction", "DistributionType", "PayableDate", "RecordDate", "ExDividendDate", "Amount", "CurrencyCode", "Notes", "TotalCashDistribution", "NonQualifiedCashDistribution", "QualifiedCashDistribution", "TaxFreeCashDistribution", "OrdinaryForeignTaxCredit", "QualifiedForeignTaxCredit", "StockDividendRatio", "ReinvestDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.CapitalDistributions), global::Org.Openfeed.CapitalDistributions.Parser, new[]{ "TransactionTime", "InstrumentType", "CorporateAction", "PayableDate", "RecordDate", "ExDate", "ShortTermCapitalGain", "LongTermCapitalGain", "UnallocatedDistributions", "ReturnOfCapital", "CurrencyCode", "Notes", "ReinvestDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.SharesOutstanding), global::Org.Openfeed.SharesOutstanding.Parser, new[]{ "SharesOutstanding_", "TransactionTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.NetAssetValue), global::Org.Openfeed.NetAssetValue.Parser, new[]{ "NetAssetValue_", "TransactionTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.MarketSummary), global::Org.Openfeed.MarketSummary.Parser, new[]{ "TransactionTime", "TradingDate", "StartOfDay", "EndOfDay", "Clear", "InstrumentStatus", "Bbo", "Open", "High", "Low", "Close", "PrevClose", "Last", "Volume", "Settlement", "OpenInterest", "Vwap", "Session", "SummaryType" }, null, new[]{ typeof(global::Org.Openfeed.MarketSummary.Types.ClearSet), typeof(global::Org.Openfeed.MarketSummary.Types.SummaryType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Context), global::Org.Openfeed.Context.Parser, new[]{ "Data", "TracePoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.ContextData), global::Org.Openfeed.ContextData.Parser, new[]{ "Id", "Vstring", "Vbytes", "Vbool", "Vsint32", "Vsint64", "Vfloat", "Vdouble" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.TracePoint), global::Org.Openfeed.TracePoint.Parser, new[]{ "Id", "ComponentId", "TimestampNs", "ComponentLatencyNs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.TCPHistoricalReplayRequest), global::Org.Openfeed.TCPHistoricalReplayRequest.Parser, new[]{ "Channel", "ResetNumber", "Sequence", "Count", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.SnapshotRequest), global::Org.Openfeed.SnapshotRequest.Parser, new[]{ "Channel", "ResetNumber", "RequestId", "SnapshotRequestTypes" }, null, new[]{ typeof(global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.VolumeAtPrice), global::Org.Openfeed.VolumeAtPrice.Parser, new[]{ "MarketId", "Symbol", "TransactionTime", "LastPrice", "LastQuantity", "LastCumulativeVolume", "TradeDate", "PriceVolumes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume), global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume.Parser, new[]{ "Price", "Volume" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Openfeed.Ohlc), global::Org.Openfeed.Ohlc.Parser, new[]{ "MarketId", "Symbol", "Open", "High", "Low", "Close" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  // <summary>
  // Book side
  // </summary>
  public enum BookSide {
    [pbr::OriginalName("UNKNOWN_BOOK_SIDE")] UnknownBookSide = 0,
    [pbr::OriginalName("BID")] Bid = 1,
    [pbr::OriginalName("OFFER")] Offer = 2,
  }

  public enum InstrumentTradingStatus {
    [pbr::OriginalName("UNKNOWN_TRADING_STATUS")] UnknownTradingStatus = 0,
    [pbr::OriginalName("TRADING_RESUME")] TradingResume = 1,
    [pbr::OriginalName("PRE_OPEN")] PreOpen = 2,
    [pbr::OriginalName("OPEN")] Open = 3,
    [pbr::OriginalName("PRE_CLOSE")] PreClose = 4,
    [pbr::OriginalName("CLOSE")] Close = 5,
    [pbr::OriginalName("TRADING_HALT")] TradingHalt = 6,
    [pbr::OriginalName("QUOTATION_RESUME")] QuotationResume = 7,
    [pbr::OriginalName("OPEN_DELAY")] OpenDelay = 8,
    [pbr::OriginalName("NO_OPEN_NO_RESUME")] NoOpenNoResume = 9,
    [pbr::OriginalName("FAST_MARKET")] FastMarket = 10,
    [pbr::OriginalName("FAST_MARKET_END")] FastMarketEnd = 11,
    [pbr::OriginalName("LATE_MARKET")] LateMarket = 12,
    [pbr::OriginalName("LATE_MARKET_END")] LateMarketEnd = 13,
    [pbr::OriginalName("POST_SESSION")] PostSession = 14,
    [pbr::OriginalName("POST_SESSION_END")] PostSessionEnd = 15,
    [pbr::OriginalName("NEW_PRICE_INDICATION")] NewPriceIndication = 16,
    [pbr::OriginalName("NOT_AVAILABLE_FOR_TRADING")] NotAvailableForTrading = 17,
    [pbr::OriginalName("PRE_CROSS")] PreCross = 18,
    [pbr::OriginalName("CROSS")] Cross = 19,
    [pbr::OriginalName("POST_CLOSE")] PostClose = 20,
    [pbr::OriginalName("NO_CHANGE")] NoChange = 21,
    // <summary>
    // Not available for trading.
    // </summary>
    [pbr::OriginalName("NAFT")] Naft = 22,
  }

  public enum RegulationSHOShortSalePriceTest {
    [pbr::OriginalName("UNKNOWN_PRICE_TEST")] UnknownPriceTest = 0,
    [pbr::OriginalName("PRICE_TEST_NONE")] PriceTestNone = 1,
    [pbr::OriginalName("PRICE_TEST_IN_EFFECT")] PriceTestInEffect = 2,
    [pbr::OriginalName("PRICE_TEST_REMAINS_IN_EFFECT")] PriceTestRemainsInEffect = 3,
  }

  public enum SettlementTerms {
    [pbr::OriginalName("UNKNOWN_SETTLEMENT_TERMS")] UnknownSettlementTerms = 0,
    [pbr::OriginalName("CASH")] Cash = 1,
    [pbr::OriginalName("NON_NET")] NonNet = 2,
    [pbr::OriginalName("CONTINGENT_TRADE")] ContingentTrade = 3,
    [pbr::OriginalName("CASH_TODAY")] CashToday = 4,
    [pbr::OriginalName("DATE")] Date = 5,
  }

  public enum CrossType {
    [pbr::OriginalName("UNKNOWN_CROSS_TYPE")] UnknownCrossType = 0,
    [pbr::OriginalName("DEFAULT")] Default = 1,
    [pbr::OriginalName("INTERNAL")] Internal = 2,
    [pbr::OriginalName("BASIS")] Basis = 3,
    [pbr::OriginalName("CONTINGENT")] Contingent = 4,
    [pbr::OriginalName("SPECIAL")] Special = 5,
    [pbr::OriginalName("VWAP")] Vwap = 6,
    [pbr::OriginalName("REGULAR")] Regular = 7,
  }

  public enum OpenCloseSettlementFlag {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("DAILY_OPEN")] DailyOpen = 1,
    [pbr::OriginalName("INDICATIVE_OPEN_PRICE")] IndicativeOpenPrice = 2,
  }

  public enum SettlementSource {
    [pbr::OriginalName("UNKNOWN_SETTLEMENT_SOURCE")] UnknownSettlementSource = 0,
    [pbr::OriginalName("GLOBEX")] Globex = 1,
    [pbr::OriginalName("ITC")] Itc = 2,
    [pbr::OriginalName("MANUAL")] Manual = 3,
  }

  public enum Service {
    [pbr::OriginalName("UNKNOWN_SERVICE")] UnknownService = 0,
    [pbr::OriginalName("REAL_TIME")] RealTime = 1,
    [pbr::OriginalName("DELAYED")] Delayed = 2,
    [pbr::OriginalName("REAL_TIME_SNAPSHOT")] RealTimeSnapshot = 3,
    [pbr::OriginalName("DELAYED_SNAPSHOT")] DelayedSnapshot = 4,
    [pbr::OriginalName("END_OF_DAY")] EndOfDay = 5,
  }

  public enum MarketWideStatus {
    [pbr::OriginalName("STATUS_UNKNOWN")] StatusUnknown = 0,
    [pbr::OriginalName("STATUS_START_OF_DAY")] StatusStartOfDay = 1,
    [pbr::OriginalName("STATUS_END_OF_DAY")] StatusEndOfDay = 2,
    [pbr::OriginalName("STATUS_OPEN")] StatusOpen = 3,
    [pbr::OriginalName("STATUS_CLOSE")] StatusClose = 4,
  }

  public enum SnapshotRequestResult {
    [pbr::OriginalName("SNAPSHOT_REQUEST_UNKNOWN_RESULT")] SnapshotRequestUnknownResult = 0,
    [pbr::OriginalName("SNAPSHOT_REQUEST_SUCCESS")] SnapshotRequestSuccess = 1,
    [pbr::OriginalName("SNAPSHOT_REQUEST_NOT_FOUND")] SnapshotRequestNotFound = 2,
    [pbr::OriginalName("SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE")] SnapshotRequestServiceNotAvailable = 3,
    [pbr::OriginalName("SNAPSHOT_REQUEST_GENERIC_FAILURE")] SnapshotRequestGenericFailure = 4,
  }

  #endregion

  #region Messages
  // <summary>
  // A wrapper for Openfeed data.  Will contain exactly one of the supported
  // message types
  // </summary>
  public sealed partial class OpenfeedMessage : pb::IMessage<OpenfeedMessage> {
    private static readonly pb::MessageParser<OpenfeedMessage> _parser = new pb::MessageParser<OpenfeedMessage>(() => new OpenfeedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenfeedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenfeedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenfeedMessage(OpenfeedMessage other) : this() {
      sendingTime_ = other.sendingTime_;
      totalCount_ = other.totalCount_;
      syncSequence_ = other.syncSequence_;
      context_ = other.context_ != null ? other.context_.Clone() : null;
      switch (other.DataCase) {
        case DataOneofCase.ChannelReset:
          ChannelReset = other.ChannelReset.Clone();
          break;
        case DataOneofCase.HeartBeat:
          HeartBeat = other.HeartBeat.Clone();
          break;
        case DataOneofCase.AdminMessage:
          AdminMessage = other.AdminMessage.Clone();
          break;
        case DataOneofCase.InstrumentDefinition:
          InstrumentDefinition = other.InstrumentDefinition.Clone();
          break;
        case DataOneofCase.InstrumentGroupStatus:
          InstrumentGroupStatus = other.InstrumentGroupStatus.Clone();
          break;
        case DataOneofCase.MarketSnapshot:
          MarketSnapshot = other.MarketSnapshot.Clone();
          break;
        case DataOneofCase.MarketUpdate:
          MarketUpdate = other.MarketUpdate.Clone();
          break;
        case DataOneofCase.MarketStatus:
          MarketStatus = other.MarketStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenfeedMessage Clone() {
      return new OpenfeedMessage(this);
    }

    // <summary>Field number for the "sendingTime" field.</summary>
    public const int SendingTimeFieldNumber = 1;
    private long sendingTime_;
    // <summary>
    // Nanoecond unix epoch at time of message transmission (UTC)
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendingTime {
      get { return sendingTime_; }
      set {
        sendingTime_ = value;
      }
    }

    // <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private int totalCount_;
    // <summary>
    // The total number of markets available on this channel
    // at the time the message was sent.  For UDP snapshot and definition feeds.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    // <summary>Field number for the "syncSequence" field.</summary>
    public const int SyncSequenceFieldNumber = 3;
    private long syncSequence_;
    // <summary>
    // The most recent packet sequence number sent on the incremental feed
    // at the time this message was sent.  For UDP snapshot and definition feeds.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SyncSequence {
      get { return syncSequence_; }
      set {
        syncSequence_ = value;
      }
    }

    // <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 4;
    private global::Org.Openfeed.Context context_;
    // <summary>
    // Feed specific context data
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    // <summary>Field number for the "channelReset" field.</summary>
    public const int ChannelResetFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.ChannelReset ChannelReset {
      get { return dataCase_ == DataOneofCase.ChannelReset ? (global::Org.Openfeed.ChannelReset) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ChannelReset;
      }
    }

    // <summary>Field number for the "heartBeat" field.</summary>
    public const int HeartBeatFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.HeartBeat HeartBeat {
      get { return dataCase_ == DataOneofCase.HeartBeat ? (global::Org.Openfeed.HeartBeat) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.HeartBeat;
      }
    }

    // <summary>Field number for the "adminMessage" field.</summary>
    public const int AdminMessageFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.AdminMessage AdminMessage {
      get { return dataCase_ == DataOneofCase.AdminMessage ? (global::Org.Openfeed.AdminMessage) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.AdminMessage;
      }
    }

    // <summary>Field number for the "instrumentDefinition" field.</summary>
    public const int InstrumentDefinitionFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentDefinition InstrumentDefinition {
      get { return dataCase_ == DataOneofCase.InstrumentDefinition ? (global::Org.Openfeed.InstrumentDefinition) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.InstrumentDefinition;
      }
    }

    // <summary>Field number for the "instrumentGroupStatus" field.</summary>
    public const int InstrumentGroupStatusFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentGroupStatus InstrumentGroupStatus {
      get { return dataCase_ == DataOneofCase.InstrumentGroupStatus ? (global::Org.Openfeed.InstrumentGroupStatus) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.InstrumentGroupStatus;
      }
    }

    // <summary>Field number for the "marketSnapshot" field.</summary>
    public const int MarketSnapshotFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSnapshot MarketSnapshot {
      get { return dataCase_ == DataOneofCase.MarketSnapshot ? (global::Org.Openfeed.MarketSnapshot) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.MarketSnapshot;
      }
    }

    // <summary>Field number for the "marketUpdate" field.</summary>
    public const int MarketUpdateFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketUpdate MarketUpdate {
      get { return dataCase_ == DataOneofCase.MarketUpdate ? (global::Org.Openfeed.MarketUpdate) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.MarketUpdate;
      }
    }

    // <summary>Field number for the "marketStatus" field.</summary>
    public const int MarketStatusFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketStatus MarketStatus {
      get { return dataCase_ == DataOneofCase.MarketStatus ? (global::Org.Openfeed.MarketStatus) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.MarketStatus;
      }
    }

    private object data_;
    // <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      ChannelReset = 10,
      HeartBeat = 11,
      AdminMessage = 12,
      InstrumentDefinition = 13,
      InstrumentGroupStatus = 14,
      MarketSnapshot = 15,
      MarketUpdate = 16,
      MarketStatus = 17,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenfeedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenfeedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendingTime != other.SendingTime) return false;
      if (TotalCount != other.TotalCount) return false;
      if (SyncSequence != other.SyncSequence) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(ChannelReset, other.ChannelReset)) return false;
      if (!object.Equals(HeartBeat, other.HeartBeat)) return false;
      if (!object.Equals(AdminMessage, other.AdminMessage)) return false;
      if (!object.Equals(InstrumentDefinition, other.InstrumentDefinition)) return false;
      if (!object.Equals(InstrumentGroupStatus, other.InstrumentGroupStatus)) return false;
      if (!object.Equals(MarketSnapshot, other.MarketSnapshot)) return false;
      if (!object.Equals(MarketUpdate, other.MarketUpdate)) return false;
      if (!object.Equals(MarketStatus, other.MarketStatus)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendingTime != 0L) hash ^= SendingTime.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      if (SyncSequence != 0L) hash ^= SyncSequence.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (dataCase_ == DataOneofCase.ChannelReset) hash ^= ChannelReset.GetHashCode();
      if (dataCase_ == DataOneofCase.HeartBeat) hash ^= HeartBeat.GetHashCode();
      if (dataCase_ == DataOneofCase.AdminMessage) hash ^= AdminMessage.GetHashCode();
      if (dataCase_ == DataOneofCase.InstrumentDefinition) hash ^= InstrumentDefinition.GetHashCode();
      if (dataCase_ == DataOneofCase.InstrumentGroupStatus) hash ^= InstrumentGroupStatus.GetHashCode();
      if (dataCase_ == DataOneofCase.MarketSnapshot) hash ^= MarketSnapshot.GetHashCode();
      if (dataCase_ == DataOneofCase.MarketUpdate) hash ^= MarketUpdate.GetHashCode();
      if (dataCase_ == DataOneofCase.MarketStatus) hash ^= MarketStatus.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendingTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(SendingTime);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TotalCount);
      }
      if (SyncSequence != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SyncSequence);
      }
      if (context_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Context);
      }
      if (dataCase_ == DataOneofCase.ChannelReset) {
        output.WriteRawTag(82);
        output.WriteMessage(ChannelReset);
      }
      if (dataCase_ == DataOneofCase.HeartBeat) {
        output.WriteRawTag(90);
        output.WriteMessage(HeartBeat);
      }
      if (dataCase_ == DataOneofCase.AdminMessage) {
        output.WriteRawTag(98);
        output.WriteMessage(AdminMessage);
      }
      if (dataCase_ == DataOneofCase.InstrumentDefinition) {
        output.WriteRawTag(106);
        output.WriteMessage(InstrumentDefinition);
      }
      if (dataCase_ == DataOneofCase.InstrumentGroupStatus) {
        output.WriteRawTag(114);
        output.WriteMessage(InstrumentGroupStatus);
      }
      if (dataCase_ == DataOneofCase.MarketSnapshot) {
        output.WriteRawTag(122);
        output.WriteMessage(MarketSnapshot);
      }
      if (dataCase_ == DataOneofCase.MarketUpdate) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MarketUpdate);
      }
      if (dataCase_ == DataOneofCase.MarketStatus) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MarketStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SendingTime);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TotalCount);
      }
      if (SyncSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SyncSequence);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (dataCase_ == DataOneofCase.ChannelReset) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelReset);
      }
      if (dataCase_ == DataOneofCase.HeartBeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeartBeat);
      }
      if (dataCase_ == DataOneofCase.AdminMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdminMessage);
      }
      if (dataCase_ == DataOneofCase.InstrumentDefinition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentDefinition);
      }
      if (dataCase_ == DataOneofCase.InstrumentGroupStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentGroupStatus);
      }
      if (dataCase_ == DataOneofCase.MarketSnapshot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketSnapshot);
      }
      if (dataCase_ == DataOneofCase.MarketUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarketUpdate);
      }
      if (dataCase_ == DataOneofCase.MarketStatus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarketStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenfeedMessage other) {
      if (other == null) {
        return;
      }
      if (other.SendingTime != 0L) {
        SendingTime = other.SendingTime;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      if (other.SyncSequence != 0L) {
        SyncSequence = other.SyncSequence;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          Context = new global::Org.Openfeed.Context();
        }
        Context.MergeFrom(other.Context);
      }
      switch (other.DataCase) {
        case DataOneofCase.ChannelReset:
          if (ChannelReset == null) {
            ChannelReset = new global::Org.Openfeed.ChannelReset();
          }
          ChannelReset.MergeFrom(other.ChannelReset);
          break;
        case DataOneofCase.HeartBeat:
          if (HeartBeat == null) {
            HeartBeat = new global::Org.Openfeed.HeartBeat();
          }
          HeartBeat.MergeFrom(other.HeartBeat);
          break;
        case DataOneofCase.AdminMessage:
          if (AdminMessage == null) {
            AdminMessage = new global::Org.Openfeed.AdminMessage();
          }
          AdminMessage.MergeFrom(other.AdminMessage);
          break;
        case DataOneofCase.InstrumentDefinition:
          if (InstrumentDefinition == null) {
            InstrumentDefinition = new global::Org.Openfeed.InstrumentDefinition();
          }
          InstrumentDefinition.MergeFrom(other.InstrumentDefinition);
          break;
        case DataOneofCase.InstrumentGroupStatus:
          if (InstrumentGroupStatus == null) {
            InstrumentGroupStatus = new global::Org.Openfeed.InstrumentGroupStatus();
          }
          InstrumentGroupStatus.MergeFrom(other.InstrumentGroupStatus);
          break;
        case DataOneofCase.MarketSnapshot:
          if (MarketSnapshot == null) {
            MarketSnapshot = new global::Org.Openfeed.MarketSnapshot();
          }
          MarketSnapshot.MergeFrom(other.MarketSnapshot);
          break;
        case DataOneofCase.MarketUpdate:
          if (MarketUpdate == null) {
            MarketUpdate = new global::Org.Openfeed.MarketUpdate();
          }
          MarketUpdate.MergeFrom(other.MarketUpdate);
          break;
        case DataOneofCase.MarketStatus:
          if (MarketStatus == null) {
            MarketStatus = new global::Org.Openfeed.MarketStatus();
          }
          MarketStatus.MergeFrom(other.MarketStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SendingTime = input.ReadSInt64();
            break;
          }
          case 16: {
            TotalCount = input.ReadSInt32();
            break;
          }
          case 24: {
            SyncSequence = input.ReadInt64();
            break;
          }
          case 34: {
            if (context_ == null) {
              Context = new global::Org.Openfeed.Context();
            }
            input.ReadMessage(Context);
            break;
          }
          case 82: {
            global::Org.Openfeed.ChannelReset subBuilder = new global::Org.Openfeed.ChannelReset();
            if (dataCase_ == DataOneofCase.ChannelReset) {
              subBuilder.MergeFrom(ChannelReset);
            }
            input.ReadMessage(subBuilder);
            ChannelReset = subBuilder;
            break;
          }
          case 90: {
            global::Org.Openfeed.HeartBeat subBuilder = new global::Org.Openfeed.HeartBeat();
            if (dataCase_ == DataOneofCase.HeartBeat) {
              subBuilder.MergeFrom(HeartBeat);
            }
            input.ReadMessage(subBuilder);
            HeartBeat = subBuilder;
            break;
          }
          case 98: {
            global::Org.Openfeed.AdminMessage subBuilder = new global::Org.Openfeed.AdminMessage();
            if (dataCase_ == DataOneofCase.AdminMessage) {
              subBuilder.MergeFrom(AdminMessage);
            }
            input.ReadMessage(subBuilder);
            AdminMessage = subBuilder;
            break;
          }
          case 106: {
            global::Org.Openfeed.InstrumentDefinition subBuilder = new global::Org.Openfeed.InstrumentDefinition();
            if (dataCase_ == DataOneofCase.InstrumentDefinition) {
              subBuilder.MergeFrom(InstrumentDefinition);
            }
            input.ReadMessage(subBuilder);
            InstrumentDefinition = subBuilder;
            break;
          }
          case 114: {
            global::Org.Openfeed.InstrumentGroupStatus subBuilder = new global::Org.Openfeed.InstrumentGroupStatus();
            if (dataCase_ == DataOneofCase.InstrumentGroupStatus) {
              subBuilder.MergeFrom(InstrumentGroupStatus);
            }
            input.ReadMessage(subBuilder);
            InstrumentGroupStatus = subBuilder;
            break;
          }
          case 122: {
            global::Org.Openfeed.MarketSnapshot subBuilder = new global::Org.Openfeed.MarketSnapshot();
            if (dataCase_ == DataOneofCase.MarketSnapshot) {
              subBuilder.MergeFrom(MarketSnapshot);
            }
            input.ReadMessage(subBuilder);
            MarketSnapshot = subBuilder;
            break;
          }
          case 130: {
            global::Org.Openfeed.MarketUpdate subBuilder = new global::Org.Openfeed.MarketUpdate();
            if (dataCase_ == DataOneofCase.MarketUpdate) {
              subBuilder.MergeFrom(MarketUpdate);
            }
            input.ReadMessage(subBuilder);
            MarketUpdate = subBuilder;
            break;
          }
          case 138: {
            global::Org.Openfeed.MarketStatus subBuilder = new global::Org.Openfeed.MarketStatus();
            if (dataCase_ == DataOneofCase.MarketStatus) {
              subBuilder.MergeFrom(MarketStatus);
            }
            input.ReadMessage(subBuilder);
            MarketStatus = subBuilder;
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Channel Reset
  // </summary>
  public sealed partial class ChannelReset : pb::IMessage<ChannelReset> {
    private static readonly pb::MessageParser<ChannelReset> _parser = new pb::MessageParser<ChannelReset>(() => new ChannelReset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelReset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelReset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelReset(ChannelReset other) : this() {
      channel_ = other.channel_;
      transactionTime_ = other.transactionTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelReset Clone() {
      return new ChannelReset(this);
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 2;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelReset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelReset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (TransactionTime != other.TransactionTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Channel);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TransactionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelReset other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadSInt32();
            break;
          }
          case 16: {
            TransactionTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Heart Beat
  // </summary>
  public sealed partial class HeartBeat : pb::IMessage<HeartBeat> {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => new HeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat(HeartBeat other) : this() {
      transactionTime_ = other.transactionTime_;
      status_ = other.status_;
      exchange_ = other.exchange_;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat Clone() {
      return new HeartBeat(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 1;
    private long transactionTime_;
    // <summary>
    // UTC timestamp of transaction, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private bool exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Status != other.Status) return false;
      if (Exchange != other.Exchange) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Exchange != false) hash ^= Exchange.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TransactionTime);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (Exchange != false) {
        output.WriteRawTag(24);
        output.WriteBool(Exchange);
      }
      if (Channel != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Exchange != false) {
        size += 1 + 1;
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Exchange != false) {
        Exchange = other.Exchange;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 24: {
            Exchange = input.ReadBool();
            break;
          }
          case 32: {
            Channel = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Administrative Message
  // </summary>
  public sealed partial class AdminMessage : pb::IMessage<AdminMessage> {
    private static readonly pb::MessageParser<AdminMessage> _parser = new pb::MessageParser<AdminMessage>(() => new AdminMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage(AdminMessage other) : this() {
      originationTime_ = other.originationTime_;
      source_ = other.source_;
      languageCode_ = other.languageCode_;
      headLine_ = other.headLine_;
      text_ = other.text_;
      status_ = other.status_;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage Clone() {
      return new AdminMessage(this);
    }

    // <summary>Field number for the "originationTime" field.</summary>
    public const int OriginationTimeFieldNumber = 1;
    private long originationTime_;
    // <summary>
    // Origination time = UTC timestamp nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OriginationTime {
      get { return originationTime_; }
      set {
        originationTime_ = value;
      }
    }

    // <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "languageCode" field.</summary>
    public const int LanguageCodeFieldNumber = 3;
    private string languageCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "headLine" field.</summary>
    public const int HeadLineFieldNumber = 4;
    private string headLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadLine {
      get { return headLine_; }
      set {
        headLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Org.Openfeed.AdminMessage.Types.Status status_ = global::Org.Openfeed.AdminMessage.Types.Status.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.AdminMessage.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginationTime != other.OriginationTime) return false;
      if (Source != other.Source) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (HeadLine != other.HeadLine) return false;
      if (Text != other.Text) return false;
      if (Status != other.Status) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginationTime != 0L) hash ^= OriginationTime.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (HeadLine.Length != 0) hash ^= HeadLine.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Status != global::Org.Openfeed.AdminMessage.Types.Status.Ok) hash ^= Status.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginationTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(OriginationTime);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (HeadLine.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadLine);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
      if (Status != global::Org.Openfeed.AdminMessage.Types.Status.Ok) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (Channel != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OriginationTime);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (HeadLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadLine);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Status != global::Org.Openfeed.AdminMessage.Types.Status.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminMessage other) {
      if (other == null) {
        return;
      }
      if (other.OriginationTime != 0L) {
        OriginationTime = other.OriginationTime;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      if (other.HeadLine.Length != 0) {
        HeadLine = other.HeadLine;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Status != global::Org.Openfeed.AdminMessage.Types.Status.Ok) {
        Status = other.Status;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginationTime = input.ReadSInt64();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
          case 34: {
            HeadLine = input.ReadString();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
          case 48: {
            Status = (global::Org.Openfeed.AdminMessage.Types.Status) input.ReadEnum();
            break;
          }
          case 56: {
            Channel = input.ReadSInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the AdminMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("OK")] Ok = 0,
      }

    }
    #endregion

  }

  // <summary>
  // Instrument Group Status
  // </summary>
  public sealed partial class InstrumentGroupStatus : pb::IMessage<InstrumentGroupStatus> {
    private static readonly pb::MessageParser<InstrumentGroupStatus> _parser = new pb::MessageParser<InstrumentGroupStatus>(() => new InstrumentGroupStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentGroupStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentGroupStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentGroupStatus(InstrumentGroupStatus other) : this() {
      transactionTime_ = other.transactionTime_;
      instrumentGroupId_ = other.instrumentGroupId_;
      tradingStatus_ = other.tradingStatus_;
      tradeDate_ = other.tradeDate_;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentGroupStatus Clone() {
      return new InstrumentGroupStatus(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 1;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp of transaction, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "instrumentGroupId" field.</summary>
    public const int InstrumentGroupIdFieldNumber = 2;
    private string instrumentGroupId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentGroupId {
      get { return instrumentGroupId_; }
      set {
        instrumentGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "tradingStatus" field.</summary>
    public const int TradingStatusFieldNumber = 3;
    private global::Org.Openfeed.InstrumentTradingStatus tradingStatus_ = global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 4;
    private int tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 5;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentGroupStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentGroupStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (InstrumentGroupId != other.InstrumentGroupId) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (InstrumentGroupId.Length != 0) hash ^= InstrumentGroupId.GetHashCode();
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) hash ^= TradingStatus.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TransactionTime);
      }
      if (InstrumentGroupId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentGroupId);
      }
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TradingStatus);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(TradeDate);
      }
      if (Channel != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (InstrumentGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupId);
      }
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentGroupStatus other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.InstrumentGroupId.Length != 0) {
        InstrumentGroupId = other.InstrumentGroupId;
      }
      if (other.TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        TradingStatus = other.TradingStatus;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 18: {
            InstrumentGroupId = input.ReadString();
            break;
          }
          case 24: {
            TradingStatus = (global::Org.Openfeed.InstrumentTradingStatus) input.ReadEnum();
            break;
          }
          case 32: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 40: {
            Channel = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Market Status
  // </summary>
  public sealed partial class MarketStatus : pb::IMessage<MarketStatus> {
    private static readonly pb::MessageParser<MarketStatus> _parser = new pb::MessageParser<MarketStatus>(() => new MarketStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStatus(MarketStatus other) : this() {
      transactionTime_ = other.transactionTime_;
      channel_ = other.channel_;
      marketWideStatus_ = other.marketWideStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStatus Clone() {
      return new MarketStatus(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 1;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp of transaction, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    // <summary>Field number for the "marketWideStatus" field.</summary>
    public const int MarketWideStatusFieldNumber = 3;
    private global::Org.Openfeed.MarketWideStatus marketWideStatus_ = global::Org.Openfeed.MarketWideStatus.StatusUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketWideStatus MarketWideStatus {
      get { return marketWideStatus_; }
      set {
        marketWideStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Channel != other.Channel) return false;
      if (MarketWideStatus != other.MarketWideStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (MarketWideStatus != global::Org.Openfeed.MarketWideStatus.StatusUnknown) hash ^= MarketWideStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TransactionTime);
      }
      if (Channel != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Channel);
      }
      if (MarketWideStatus != global::Org.Openfeed.MarketWideStatus.StatusUnknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MarketWideStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Channel);
      }
      if (MarketWideStatus != global::Org.Openfeed.MarketWideStatus.StatusUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarketWideStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketStatus other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.MarketWideStatus != global::Org.Openfeed.MarketWideStatus.StatusUnknown) {
        MarketWideStatus = other.MarketWideStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Channel = input.ReadSInt32();
            break;
          }
          case 24: {
            MarketWideStatus = (global::Org.Openfeed.MarketWideStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Session used in snapshot.
  // </summary>
  public sealed partial class MarketSession : pb::IMessage<MarketSession> {
    private static readonly pb::MessageParser<MarketSession> _parser = new pb::MessageParser<MarketSession>(() => new MarketSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSession(MarketSession other) : this() {
      tradeDate_ = other.tradeDate_;
      open_ = other.open_ != null ? other.open_.Clone() : null;
      high_ = other.high_ != null ? other.high_.Clone() : null;
      low_ = other.low_ != null ? other.low_.Clone() : null;
      last_ = other.last_ != null ? other.last_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      settlement_ = other.settlement_ != null ? other.settlement_.Clone() : null;
      prevSettlement_ = other.prevSettlement_ != null ? other.prevSettlement_.Clone() : null;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      numberOfTrades_ = other.numberOfTrades_ != null ? other.numberOfTrades_.Clone() : null;
      monetaryValue_ = other.monetaryValue_ != null ? other.monetaryValue_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSession Clone() {
      return new MarketSession(this);
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 4;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 30;
    private global::Org.Openfeed.Open open_;
    // <summary>
    // Most recent opening price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Open Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 31;
    private global::Org.Openfeed.High high_;
    // <summary>
    // High price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.High High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 32;
    private global::Org.Openfeed.Low low_;
    // <summary>
    // Low price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Low Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    // <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 35;
    private global::Org.Openfeed.Last last_;
    // <summary>
    // Most recent traded price and quantity
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Last Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 38;
    private global::Org.Openfeed.Volume volume_;
    // <summary>
    // Total traded volume
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Volume Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    // <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 39;
    private global::Org.Openfeed.Settlement settlement_;
    // <summary>
    // Most recent settlement price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Settlement Settlement {
      get { return settlement_; }
      set {
        settlement_ = value;
      }
    }

    // <summary>Field number for the "prevSettlement" field.</summary>
    public const int PrevSettlementFieldNumber = 44;
    private global::Org.Openfeed.Settlement prevSettlement_;
    // <summary>
    // Most recent settlement price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Settlement PrevSettlement {
      get { return prevSettlement_; }
      set {
        prevSettlement_ = value;
      }
    }

    // <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 40;
    private global::Org.Openfeed.OpenInterest openInterest_;
    // <summary>
    // Most recent open interest
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.OpenInterest OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    // <summary>Field number for the "numberOfTrades" field.</summary>
    public const int NumberOfTradesFieldNumber = 41;
    private global::Org.Openfeed.NumberOfTrades numberOfTrades_;
    // <summary>
    // Number of trades
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.NumberOfTrades NumberOfTrades {
      get { return numberOfTrades_; }
      set {
        numberOfTrades_ = value;
      }
    }

    // <summary>Field number for the "monetaryValue" field.</summary>
    public const int MonetaryValueFieldNumber = 42;
    private global::Org.Openfeed.MonetaryValue monetaryValue_;
    // <summary>
    // Monetary value
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MonetaryValue MonetaryValue {
      get { return monetaryValue_; }
      set {
        monetaryValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeDate != other.TradeDate) return false;
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(High, other.High)) return false;
      if (!object.Equals(Low, other.Low)) return false;
      if (!object.Equals(Last, other.Last)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Settlement, other.Settlement)) return false;
      if (!object.Equals(PrevSettlement, other.PrevSettlement)) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(NumberOfTrades, other.NumberOfTrades)) return false;
      if (!object.Equals(MonetaryValue, other.MonetaryValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (high_ != null) hash ^= High.GetHashCode();
      if (low_ != null) hash ^= Low.GetHashCode();
      if (last_ != null) hash ^= Last.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (settlement_ != null) hash ^= Settlement.GetHashCode();
      if (prevSettlement_ != null) hash ^= PrevSettlement.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (numberOfTrades_ != null) hash ^= NumberOfTrades.GetHashCode();
      if (monetaryValue_ != null) hash ^= MonetaryValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeDate != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(TradeDate);
      }
      if (open_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Open);
      }
      if (high_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(High);
      }
      if (low_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Low);
      }
      if (last_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Last);
      }
      if (volume_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Volume);
      }
      if (settlement_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Settlement);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(OpenInterest);
      }
      if (numberOfTrades_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(NumberOfTrades);
      }
      if (monetaryValue_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MonetaryValue);
      }
      if (prevSettlement_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(PrevSettlement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (open_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (high_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(High);
      }
      if (low_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Low);
      }
      if (last_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Last);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (settlement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Settlement);
      }
      if (prevSettlement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevSettlement);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (numberOfTrades_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumberOfTrades);
      }
      if (monetaryValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonetaryValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketSession other) {
      if (other == null) {
        return;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.open_ != null) {
        if (open_ == null) {
          Open = new global::Org.Openfeed.Open();
        }
        Open.MergeFrom(other.Open);
      }
      if (other.high_ != null) {
        if (high_ == null) {
          High = new global::Org.Openfeed.High();
        }
        High.MergeFrom(other.High);
      }
      if (other.low_ != null) {
        if (low_ == null) {
          Low = new global::Org.Openfeed.Low();
        }
        Low.MergeFrom(other.Low);
      }
      if (other.last_ != null) {
        if (last_ == null) {
          Last = new global::Org.Openfeed.Last();
        }
        Last.MergeFrom(other.Last);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::Org.Openfeed.Volume();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.settlement_ != null) {
        if (settlement_ == null) {
          Settlement = new global::Org.Openfeed.Settlement();
        }
        Settlement.MergeFrom(other.Settlement);
      }
      if (other.prevSettlement_ != null) {
        if (prevSettlement_ == null) {
          PrevSettlement = new global::Org.Openfeed.Settlement();
        }
        PrevSettlement.MergeFrom(other.PrevSettlement);
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::Org.Openfeed.OpenInterest();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      if (other.numberOfTrades_ != null) {
        if (numberOfTrades_ == null) {
          NumberOfTrades = new global::Org.Openfeed.NumberOfTrades();
        }
        NumberOfTrades.MergeFrom(other.NumberOfTrades);
      }
      if (other.monetaryValue_ != null) {
        if (monetaryValue_ == null) {
          MonetaryValue = new global::Org.Openfeed.MonetaryValue();
        }
        MonetaryValue.MergeFrom(other.MonetaryValue);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 32: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 242: {
            if (open_ == null) {
              Open = new global::Org.Openfeed.Open();
            }
            input.ReadMessage(Open);
            break;
          }
          case 250: {
            if (high_ == null) {
              High = new global::Org.Openfeed.High();
            }
            input.ReadMessage(High);
            break;
          }
          case 258: {
            if (low_ == null) {
              Low = new global::Org.Openfeed.Low();
            }
            input.ReadMessage(Low);
            break;
          }
          case 282: {
            if (last_ == null) {
              Last = new global::Org.Openfeed.Last();
            }
            input.ReadMessage(Last);
            break;
          }
          case 306: {
            if (volume_ == null) {
              Volume = new global::Org.Openfeed.Volume();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 314: {
            if (settlement_ == null) {
              Settlement = new global::Org.Openfeed.Settlement();
            }
            input.ReadMessage(Settlement);
            break;
          }
          case 322: {
            if (openInterest_ == null) {
              OpenInterest = new global::Org.Openfeed.OpenInterest();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 330: {
            if (numberOfTrades_ == null) {
              NumberOfTrades = new global::Org.Openfeed.NumberOfTrades();
            }
            input.ReadMessage(NumberOfTrades);
            break;
          }
          case 338: {
            if (monetaryValue_ == null) {
              MonetaryValue = new global::Org.Openfeed.MonetaryValue();
            }
            input.ReadMessage(MonetaryValue);
            break;
          }
          case 354: {
            if (prevSettlement_ == null) {
              PrevSettlement = new global::Org.Openfeed.Settlement();
            }
            input.ReadMessage(PrevSettlement);
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Snapshot for a market
  // </summary>
  public sealed partial class MarketSnapshot : pb::IMessage<MarketSnapshot> {
    private static readonly pb::MessageParser<MarketSnapshot> _parser = new pb::MessageParser<MarketSnapshot>(() => new MarketSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshot(MarketSnapshot other) : this() {
      marketId_ = other.marketId_;
      transactionTime_ = other.transactionTime_;
      marketSequence_ = other.marketSequence_;
      tradeDate_ = other.tradeDate_;
      totalChunks_ = other.totalChunks_;
      currentChunk_ = other.currentChunk_;
      symbol_ = other.symbol_;
      priceDenominator_ = other.priceDenominator_;
      service_ = other.service_;
      instrumentStatus_ = other.instrumentStatus_ != null ? other.instrumentStatus_.Clone() : null;
      bbo_ = other.bbo_ != null ? other.bbo_.Clone() : null;
      index_ = other.index_ != null ? other.index_.Clone() : null;
      priceLevels_ = other.priceLevels_.Clone();
      orders_ = other.orders_.Clone();
      news_ = other.news_ != null ? other.news_.Clone() : null;
      open_ = other.open_ != null ? other.open_.Clone() : null;
      high_ = other.high_ != null ? other.high_.Clone() : null;
      low_ = other.low_ != null ? other.low_.Clone() : null;
      close_ = other.close_ != null ? other.close_.Clone() : null;
      prevClose_ = other.prevClose_ != null ? other.prevClose_.Clone() : null;
      last_ = other.last_ != null ? other.last_.Clone() : null;
      yearHigh_ = other.yearHigh_ != null ? other.yearHigh_.Clone() : null;
      yearLow_ = other.yearLow_ != null ? other.yearLow_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      settlement_ = other.settlement_ != null ? other.settlement_.Clone() : null;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      vwap_ = other.vwap_ != null ? other.vwap_.Clone() : null;
      dividendsIncomeDistributions_ = other.dividendsIncomeDistributions_ != null ? other.dividendsIncomeDistributions_.Clone() : null;
      numberOfTrades_ = other.numberOfTrades_ != null ? other.numberOfTrades_.Clone() : null;
      monetaryValue_ = other.monetaryValue_ != null ? other.monetaryValue_.Clone() : null;
      capitalDistributions_ = other.capitalDistributions_ != null ? other.capitalDistributions_.Clone() : null;
      sharesOutstanding_ = other.sharesOutstanding_ != null ? other.sharesOutstanding_.Clone() : null;
      netAssetValue_ = other.netAssetValue_ != null ? other.netAssetValue_.Clone() : null;
      previousSession_ = other.previousSession_ != null ? other.previousSession_.Clone() : null;
      tSession_ = other.tSession_ != null ? other.tSession_.Clone() : null;
      volumeAtPrice_ = other.volumeAtPrice_ != null ? other.volumeAtPrice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshot Clone() {
      return new MarketSnapshot(this);
    }

    // <summary>Field number for the "marketId" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private long marketId_;
    // <summary>
    // Unique id identifying the market
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 2;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp of transaction, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "marketSequence" field.</summary>
    public const int MarketSequenceFieldNumber = 3;
    private long marketSequence_;
    // <summary>
    // Instrument level sequence number
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketSequence {
      get { return marketSequence_; }
      set {
        marketSequence_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 4;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "totalChunks" field.</summary>
    public const int TotalChunksFieldNumber = 5;
    private int totalChunks_;
    // <summary>
    // A snapshot with market depth may exceed the maximum message size.
    //  In that case, the snapshot will be broken up across multiple
    //  snapshot messages.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalChunks {
      get { return totalChunks_; }
      set {
        totalChunks_ = value;
      }
    }

    // <summary>Field number for the "currentChunk" field.</summary>
    public const int CurrentChunkFieldNumber = 6;
    private int currentChunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentChunk {
      get { return currentChunk_; }
      set {
        currentChunk_ = value;
      }
    }

    // <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 7;
    private string symbol_ = "";
    // <summary>
    // Optional symbol identifier
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "priceDenominator" field.</summary>
    public const int PriceDenominatorFieldNumber = 8;
    private int priceDenominator_;
    // <summary>
    // Divide prices by this value to get real price values.  Optional, use value
    // from InstrumentDefinition if not set.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceDenominator {
      get { return priceDenominator_; }
      set {
        priceDenominator_ = value;
      }
    }

    // <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 9;
    private global::Org.Openfeed.Service service_ = global::Org.Openfeed.Service.UnknownService;
    // <summary>
    // 
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Service Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    // <summary>Field number for the "instrumentStatus" field.</summary>
    public const int InstrumentStatusFieldNumber = 10;
    private global::Org.Openfeed.InstrumentStatus instrumentStatus_;
    // <summary>
    // 
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentStatus InstrumentStatus {
      get { return instrumentStatus_; }
      set {
        instrumentStatus_ = value;
      }
    }

    // <summary>Field number for the "bbo" field.</summary>
    public const int BboFieldNumber = 11;
    private global::Org.Openfeed.BestBidOffer bbo_;
    // <summary>
    // Best Bid Offer
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BestBidOffer Bbo {
      get { return bbo_; }
      set {
        bbo_ = value;
      }
    }

    // <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 12;
    private global::Org.Openfeed.IndexValue index_;
    // <summary>
    // Index Value
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.IndexValue Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    // <summary>Field number for the "priceLevels" field.</summary>
    public const int PriceLevelsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Org.Openfeed.AddPriceLevel> _repeated_priceLevels_codec
        = pb::FieldCodec.ForMessage(106, global::Org.Openfeed.AddPriceLevel.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.AddPriceLevel> priceLevels_ = new pbc::RepeatedField<global::Org.Openfeed.AddPriceLevel>();
    // <summary>
    // Price Level Book
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.AddPriceLevel> PriceLevels {
      get { return priceLevels_; }
    }

    // <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Org.Openfeed.AddOrder> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(114, global::Org.Openfeed.AddOrder.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.AddOrder> orders_ = new pbc::RepeatedField<global::Org.Openfeed.AddOrder>();
    // <summary>
    // Order Book
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.AddOrder> Orders {
      get { return orders_; }
    }

    // <summary>Field number for the "news" field.</summary>
    public const int NewsFieldNumber = 15;
    private global::Org.Openfeed.News news_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.News News {
      get { return news_; }
      set {
        news_ = value;
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 30;
    private global::Org.Openfeed.Open open_;
    // <summary>
    // Most recent opening price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Open Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 31;
    private global::Org.Openfeed.High high_;
    // <summary>
    // High price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.High High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 32;
    private global::Org.Openfeed.Low low_;
    // <summary>
    // Low price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Low Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    // <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 33;
    private global::Org.Openfeed.Close close_;
    // <summary>
    // Most recent closing price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Close Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    // <summary>Field number for the "prevClose" field.</summary>
    public const int PrevCloseFieldNumber = 34;
    private global::Org.Openfeed.PrevClose prevClose_;
    // <summary>
    // Previous closing price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.PrevClose PrevClose {
      get { return prevClose_; }
      set {
        prevClose_ = value;
      }
    }

    // <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 35;
    private global::Org.Openfeed.Last last_;
    // <summary>
    // Most recent traded price and quantity
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Last Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    // <summary>Field number for the "yearHigh" field.</summary>
    public const int YearHighFieldNumber = 36;
    private global::Org.Openfeed.YearHigh yearHigh_;
    // <summary>
    // Year high price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.YearHigh YearHigh {
      get { return yearHigh_; }
      set {
        yearHigh_ = value;
      }
    }

    // <summary>Field number for the "yearLow" field.</summary>
    public const int YearLowFieldNumber = 37;
    private global::Org.Openfeed.YearLow yearLow_;
    // <summary>
    // Year low price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.YearLow YearLow {
      get { return yearLow_; }
      set {
        yearLow_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 38;
    private global::Org.Openfeed.Volume volume_;
    // <summary>
    // Total traded volume
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Volume Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    // <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 39;
    private global::Org.Openfeed.Settlement settlement_;
    // <summary>
    // Most recent settlement price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Settlement Settlement {
      get { return settlement_; }
      set {
        settlement_ = value;
      }
    }

    // <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 40;
    private global::Org.Openfeed.OpenInterest openInterest_;
    // <summary>
    // Most recent open interest
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.OpenInterest OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    // <summary>Field number for the "vwap" field.</summary>
    public const int VwapFieldNumber = 41;
    private global::Org.Openfeed.Vwap vwap_;
    // <summary>
    // Most recent volume weighted average price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Vwap Vwap {
      get { return vwap_; }
      set {
        vwap_ = value;
      }
    }

    // <summary>Field number for the "dividendsIncomeDistributions" field.</summary>
    public const int DividendsIncomeDistributionsFieldNumber = 42;
    private global::Org.Openfeed.DividendsIncomeDistributions dividendsIncomeDistributions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.DividendsIncomeDistributions DividendsIncomeDistributions {
      get { return dividendsIncomeDistributions_; }
      set {
        dividendsIncomeDistributions_ = value;
      }
    }

    // <summary>Field number for the "numberOfTrades" field.</summary>
    public const int NumberOfTradesFieldNumber = 43;
    private global::Org.Openfeed.NumberOfTrades numberOfTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.NumberOfTrades NumberOfTrades {
      get { return numberOfTrades_; }
      set {
        numberOfTrades_ = value;
      }
    }

    // <summary>Field number for the "monetaryValue" field.</summary>
    public const int MonetaryValueFieldNumber = 44;
    private global::Org.Openfeed.MonetaryValue monetaryValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MonetaryValue MonetaryValue {
      get { return monetaryValue_; }
      set {
        monetaryValue_ = value;
      }
    }

    // <summary>Field number for the "capitalDistributions" field.</summary>
    public const int CapitalDistributionsFieldNumber = 45;
    private global::Org.Openfeed.CapitalDistributions capitalDistributions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.CapitalDistributions CapitalDistributions {
      get { return capitalDistributions_; }
      set {
        capitalDistributions_ = value;
      }
    }

    // <summary>Field number for the "sharesOutstanding" field.</summary>
    public const int SharesOutstandingFieldNumber = 46;
    private global::Org.Openfeed.SharesOutstanding sharesOutstanding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SharesOutstanding SharesOutstanding {
      get { return sharesOutstanding_; }
      set {
        sharesOutstanding_ = value;
      }
    }

    // <summary>Field number for the "netAssetValue" field.</summary>
    public const int NetAssetValueFieldNumber = 47;
    private global::Org.Openfeed.NetAssetValue netAssetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.NetAssetValue NetAssetValue {
      get { return netAssetValue_; }
      set {
        netAssetValue_ = value;
      }
    }

    // <summary>Field number for the "previousSession" field.</summary>
    public const int PreviousSessionFieldNumber = 48;
    private global::Org.Openfeed.MarketSession previousSession_;
    // <summary>
    // Previous session.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSession PreviousSession {
      get { return previousSession_; }
      set {
        previousSession_ = value;
      }
    }

    // <summary>Field number for the "tSession" field.</summary>
    public const int TSessionFieldNumber = 49;
    private global::Org.Openfeed.MarketSession tSession_;
    // <summary>
    // 'T' session.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSession TSession {
      get { return tSession_; }
      set {
        tSession_ = value;
      }
    }

    // <summary>Field number for the "volumeAtPrice" field.</summary>
    public const int VolumeAtPriceFieldNumber = 50;
    private global::Org.Openfeed.VolumeAtPrice volumeAtPrice_;
    // <summary>
    // Volume at price. Used by the market state/ JERQ.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.VolumeAtPrice VolumeAtPrice {
      get { return volumeAtPrice_; }
      set {
        volumeAtPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (MarketSequence != other.MarketSequence) return false;
      if (TradeDate != other.TradeDate) return false;
      if (TotalChunks != other.TotalChunks) return false;
      if (CurrentChunk != other.CurrentChunk) return false;
      if (Symbol != other.Symbol) return false;
      if (PriceDenominator != other.PriceDenominator) return false;
      if (Service != other.Service) return false;
      if (!object.Equals(InstrumentStatus, other.InstrumentStatus)) return false;
      if (!object.Equals(Bbo, other.Bbo)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if(!priceLevels_.Equals(other.priceLevels_)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (!object.Equals(News, other.News)) return false;
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(High, other.High)) return false;
      if (!object.Equals(Low, other.Low)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      if (!object.Equals(PrevClose, other.PrevClose)) return false;
      if (!object.Equals(Last, other.Last)) return false;
      if (!object.Equals(YearHigh, other.YearHigh)) return false;
      if (!object.Equals(YearLow, other.YearLow)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Settlement, other.Settlement)) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(Vwap, other.Vwap)) return false;
      if (!object.Equals(DividendsIncomeDistributions, other.DividendsIncomeDistributions)) return false;
      if (!object.Equals(NumberOfTrades, other.NumberOfTrades)) return false;
      if (!object.Equals(MonetaryValue, other.MonetaryValue)) return false;
      if (!object.Equals(CapitalDistributions, other.CapitalDistributions)) return false;
      if (!object.Equals(SharesOutstanding, other.SharesOutstanding)) return false;
      if (!object.Equals(NetAssetValue, other.NetAssetValue)) return false;
      if (!object.Equals(PreviousSession, other.PreviousSession)) return false;
      if (!object.Equals(TSession, other.TSession)) return false;
      if (!object.Equals(VolumeAtPrice, other.VolumeAtPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0L) hash ^= MarketId.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (MarketSequence != 0L) hash ^= MarketSequence.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
      if (CurrentChunk != 0) hash ^= CurrentChunk.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (PriceDenominator != 0) hash ^= PriceDenominator.GetHashCode();
      if (Service != global::Org.Openfeed.Service.UnknownService) hash ^= Service.GetHashCode();
      if (instrumentStatus_ != null) hash ^= InstrumentStatus.GetHashCode();
      if (bbo_ != null) hash ^= Bbo.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      hash ^= priceLevels_.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (news_ != null) hash ^= News.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (high_ != null) hash ^= High.GetHashCode();
      if (low_ != null) hash ^= Low.GetHashCode();
      if (close_ != null) hash ^= Close.GetHashCode();
      if (prevClose_ != null) hash ^= PrevClose.GetHashCode();
      if (last_ != null) hash ^= Last.GetHashCode();
      if (yearHigh_ != null) hash ^= YearHigh.GetHashCode();
      if (yearLow_ != null) hash ^= YearLow.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (settlement_ != null) hash ^= Settlement.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (vwap_ != null) hash ^= Vwap.GetHashCode();
      if (dividendsIncomeDistributions_ != null) hash ^= DividendsIncomeDistributions.GetHashCode();
      if (numberOfTrades_ != null) hash ^= NumberOfTrades.GetHashCode();
      if (monetaryValue_ != null) hash ^= MonetaryValue.GetHashCode();
      if (capitalDistributions_ != null) hash ^= CapitalDistributions.GetHashCode();
      if (sharesOutstanding_ != null) hash ^= SharesOutstanding.GetHashCode();
      if (netAssetValue_ != null) hash ^= NetAssetValue.GetHashCode();
      if (previousSession_ != null) hash ^= PreviousSession.GetHashCode();
      if (tSession_ != null) hash ^= TSession.GetHashCode();
      if (volumeAtPrice_ != null) hash ^= VolumeAtPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TransactionTime);
      }
      if (MarketSequence != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MarketSequence);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(TradeDate);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(TotalChunks);
      }
      if (CurrentChunk != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(CurrentChunk);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Symbol);
      }
      if (PriceDenominator != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(PriceDenominator);
      }
      if (Service != global::Org.Openfeed.Service.UnknownService) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Service);
      }
      if (instrumentStatus_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(InstrumentStatus);
      }
      if (bbo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Bbo);
      }
      if (index_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Index);
      }
      priceLevels_.WriteTo(output, _repeated_priceLevels_codec);
      orders_.WriteTo(output, _repeated_orders_codec);
      if (news_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(News);
      }
      if (open_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Open);
      }
      if (high_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(High);
      }
      if (low_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Low);
      }
      if (close_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Close);
      }
      if (prevClose_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(PrevClose);
      }
      if (last_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Last);
      }
      if (yearHigh_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(YearHigh);
      }
      if (yearLow_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(YearLow);
      }
      if (volume_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Volume);
      }
      if (settlement_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Settlement);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(OpenInterest);
      }
      if (vwap_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Vwap);
      }
      if (dividendsIncomeDistributions_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(DividendsIncomeDistributions);
      }
      if (numberOfTrades_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(NumberOfTrades);
      }
      if (monetaryValue_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(MonetaryValue);
      }
      if (capitalDistributions_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CapitalDistributions);
      }
      if (sharesOutstanding_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(SharesOutstanding);
      }
      if (netAssetValue_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(NetAssetValue);
      }
      if (previousSession_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(PreviousSession);
      }
      if (tSession_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(TSession);
      }
      if (volumeAtPrice_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(VolumeAtPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (MarketSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarketSequence);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (TotalChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TotalChunks);
      }
      if (CurrentChunk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CurrentChunk);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (PriceDenominator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PriceDenominator);
      }
      if (Service != global::Org.Openfeed.Service.UnknownService) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Service);
      }
      if (instrumentStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentStatus);
      }
      if (bbo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbo);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      size += priceLevels_.CalculateSize(_repeated_priceLevels_codec);
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (news_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(News);
      }
      if (open_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (high_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(High);
      }
      if (low_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Low);
      }
      if (close_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      if (prevClose_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevClose);
      }
      if (last_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Last);
      }
      if (yearHigh_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YearHigh);
      }
      if (yearLow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YearLow);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (settlement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Settlement);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (vwap_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vwap);
      }
      if (dividendsIncomeDistributions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DividendsIncomeDistributions);
      }
      if (numberOfTrades_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumberOfTrades);
      }
      if (monetaryValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonetaryValue);
      }
      if (capitalDistributions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CapitalDistributions);
      }
      if (sharesOutstanding_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SharesOutstanding);
      }
      if (netAssetValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NetAssetValue);
      }
      if (previousSession_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PreviousSession);
      }
      if (tSession_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TSession);
      }
      if (volumeAtPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VolumeAtPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0L) {
        MarketId = other.MarketId;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.MarketSequence != 0L) {
        MarketSequence = other.MarketSequence;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.TotalChunks != 0) {
        TotalChunks = other.TotalChunks;
      }
      if (other.CurrentChunk != 0) {
        CurrentChunk = other.CurrentChunk;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.PriceDenominator != 0) {
        PriceDenominator = other.PriceDenominator;
      }
      if (other.Service != global::Org.Openfeed.Service.UnknownService) {
        Service = other.Service;
      }
      if (other.instrumentStatus_ != null) {
        if (instrumentStatus_ == null) {
          InstrumentStatus = new global::Org.Openfeed.InstrumentStatus();
        }
        InstrumentStatus.MergeFrom(other.InstrumentStatus);
      }
      if (other.bbo_ != null) {
        if (bbo_ == null) {
          Bbo = new global::Org.Openfeed.BestBidOffer();
        }
        Bbo.MergeFrom(other.Bbo);
      }
      if (other.index_ != null) {
        if (index_ == null) {
          Index = new global::Org.Openfeed.IndexValue();
        }
        Index.MergeFrom(other.Index);
      }
      priceLevels_.Add(other.priceLevels_);
      orders_.Add(other.orders_);
      if (other.news_ != null) {
        if (news_ == null) {
          News = new global::Org.Openfeed.News();
        }
        News.MergeFrom(other.News);
      }
      if (other.open_ != null) {
        if (open_ == null) {
          Open = new global::Org.Openfeed.Open();
        }
        Open.MergeFrom(other.Open);
      }
      if (other.high_ != null) {
        if (high_ == null) {
          High = new global::Org.Openfeed.High();
        }
        High.MergeFrom(other.High);
      }
      if (other.low_ != null) {
        if (low_ == null) {
          Low = new global::Org.Openfeed.Low();
        }
        Low.MergeFrom(other.Low);
      }
      if (other.close_ != null) {
        if (close_ == null) {
          Close = new global::Org.Openfeed.Close();
        }
        Close.MergeFrom(other.Close);
      }
      if (other.prevClose_ != null) {
        if (prevClose_ == null) {
          PrevClose = new global::Org.Openfeed.PrevClose();
        }
        PrevClose.MergeFrom(other.PrevClose);
      }
      if (other.last_ != null) {
        if (last_ == null) {
          Last = new global::Org.Openfeed.Last();
        }
        Last.MergeFrom(other.Last);
      }
      if (other.yearHigh_ != null) {
        if (yearHigh_ == null) {
          YearHigh = new global::Org.Openfeed.YearHigh();
        }
        YearHigh.MergeFrom(other.YearHigh);
      }
      if (other.yearLow_ != null) {
        if (yearLow_ == null) {
          YearLow = new global::Org.Openfeed.YearLow();
        }
        YearLow.MergeFrom(other.YearLow);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::Org.Openfeed.Volume();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.settlement_ != null) {
        if (settlement_ == null) {
          Settlement = new global::Org.Openfeed.Settlement();
        }
        Settlement.MergeFrom(other.Settlement);
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::Org.Openfeed.OpenInterest();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      if (other.vwap_ != null) {
        if (vwap_ == null) {
          Vwap = new global::Org.Openfeed.Vwap();
        }
        Vwap.MergeFrom(other.Vwap);
      }
      if (other.dividendsIncomeDistributions_ != null) {
        if (dividendsIncomeDistributions_ == null) {
          DividendsIncomeDistributions = new global::Org.Openfeed.DividendsIncomeDistributions();
        }
        DividendsIncomeDistributions.MergeFrom(other.DividendsIncomeDistributions);
      }
      if (other.numberOfTrades_ != null) {
        if (numberOfTrades_ == null) {
          NumberOfTrades = new global::Org.Openfeed.NumberOfTrades();
        }
        NumberOfTrades.MergeFrom(other.NumberOfTrades);
      }
      if (other.monetaryValue_ != null) {
        if (monetaryValue_ == null) {
          MonetaryValue = new global::Org.Openfeed.MonetaryValue();
        }
        MonetaryValue.MergeFrom(other.MonetaryValue);
      }
      if (other.capitalDistributions_ != null) {
        if (capitalDistributions_ == null) {
          CapitalDistributions = new global::Org.Openfeed.CapitalDistributions();
        }
        CapitalDistributions.MergeFrom(other.CapitalDistributions);
      }
      if (other.sharesOutstanding_ != null) {
        if (sharesOutstanding_ == null) {
          SharesOutstanding = new global::Org.Openfeed.SharesOutstanding();
        }
        SharesOutstanding.MergeFrom(other.SharesOutstanding);
      }
      if (other.netAssetValue_ != null) {
        if (netAssetValue_ == null) {
          NetAssetValue = new global::Org.Openfeed.NetAssetValue();
        }
        NetAssetValue.MergeFrom(other.NetAssetValue);
      }
      if (other.previousSession_ != null) {
        if (previousSession_ == null) {
          PreviousSession = new global::Org.Openfeed.MarketSession();
        }
        PreviousSession.MergeFrom(other.PreviousSession);
      }
      if (other.tSession_ != null) {
        if (tSession_ == null) {
          TSession = new global::Org.Openfeed.MarketSession();
        }
        TSession.MergeFrom(other.TSession);
      }
      if (other.volumeAtPrice_ != null) {
        if (volumeAtPrice_ == null) {
          VolumeAtPrice = new global::Org.Openfeed.VolumeAtPrice();
        }
        VolumeAtPrice.MergeFrom(other.VolumeAtPrice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 16: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 24: {
            MarketSequence = input.ReadInt64();
            break;
          }
          case 32: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 40: {
            TotalChunks = input.ReadSInt32();
            break;
          }
          case 48: {
            CurrentChunk = input.ReadSInt32();
            break;
          }
          case 58: {
            Symbol = input.ReadString();
            break;
          }
          case 64: {
            PriceDenominator = input.ReadSInt32();
            break;
          }
          case 72: {
            Service = (global::Org.Openfeed.Service) input.ReadEnum();
            break;
          }
          case 82: {
            if (instrumentStatus_ == null) {
              InstrumentStatus = new global::Org.Openfeed.InstrumentStatus();
            }
            input.ReadMessage(InstrumentStatus);
            break;
          }
          case 90: {
            if (bbo_ == null) {
              Bbo = new global::Org.Openfeed.BestBidOffer();
            }
            input.ReadMessage(Bbo);
            break;
          }
          case 98: {
            if (index_ == null) {
              Index = new global::Org.Openfeed.IndexValue();
            }
            input.ReadMessage(Index);
            break;
          }
          case 106: {
            priceLevels_.AddEntriesFrom(input, _repeated_priceLevels_codec);
            break;
          }
          case 114: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 122: {
            if (news_ == null) {
              News = new global::Org.Openfeed.News();
            }
            input.ReadMessage(News);
            break;
          }
          case 242: {
            if (open_ == null) {
              Open = new global::Org.Openfeed.Open();
            }
            input.ReadMessage(Open);
            break;
          }
          case 250: {
            if (high_ == null) {
              High = new global::Org.Openfeed.High();
            }
            input.ReadMessage(High);
            break;
          }
          case 258: {
            if (low_ == null) {
              Low = new global::Org.Openfeed.Low();
            }
            input.ReadMessage(Low);
            break;
          }
          case 266: {
            if (close_ == null) {
              Close = new global::Org.Openfeed.Close();
            }
            input.ReadMessage(Close);
            break;
          }
          case 274: {
            if (prevClose_ == null) {
              PrevClose = new global::Org.Openfeed.PrevClose();
            }
            input.ReadMessage(PrevClose);
            break;
          }
          case 282: {
            if (last_ == null) {
              Last = new global::Org.Openfeed.Last();
            }
            input.ReadMessage(Last);
            break;
          }
          case 290: {
            if (yearHigh_ == null) {
              YearHigh = new global::Org.Openfeed.YearHigh();
            }
            input.ReadMessage(YearHigh);
            break;
          }
          case 298: {
            if (yearLow_ == null) {
              YearLow = new global::Org.Openfeed.YearLow();
            }
            input.ReadMessage(YearLow);
            break;
          }
          case 306: {
            if (volume_ == null) {
              Volume = new global::Org.Openfeed.Volume();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 314: {
            if (settlement_ == null) {
              Settlement = new global::Org.Openfeed.Settlement();
            }
            input.ReadMessage(Settlement);
            break;
          }
          case 322: {
            if (openInterest_ == null) {
              OpenInterest = new global::Org.Openfeed.OpenInterest();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 330: {
            if (vwap_ == null) {
              Vwap = new global::Org.Openfeed.Vwap();
            }
            input.ReadMessage(Vwap);
            break;
          }
          case 338: {
            if (dividendsIncomeDistributions_ == null) {
              DividendsIncomeDistributions = new global::Org.Openfeed.DividendsIncomeDistributions();
            }
            input.ReadMessage(DividendsIncomeDistributions);
            break;
          }
          case 346: {
            if (numberOfTrades_ == null) {
              NumberOfTrades = new global::Org.Openfeed.NumberOfTrades();
            }
            input.ReadMessage(NumberOfTrades);
            break;
          }
          case 354: {
            if (monetaryValue_ == null) {
              MonetaryValue = new global::Org.Openfeed.MonetaryValue();
            }
            input.ReadMessage(MonetaryValue);
            break;
          }
          case 362: {
            if (capitalDistributions_ == null) {
              CapitalDistributions = new global::Org.Openfeed.CapitalDistributions();
            }
            input.ReadMessage(CapitalDistributions);
            break;
          }
          case 370: {
            if (sharesOutstanding_ == null) {
              SharesOutstanding = new global::Org.Openfeed.SharesOutstanding();
            }
            input.ReadMessage(SharesOutstanding);
            break;
          }
          case 378: {
            if (netAssetValue_ == null) {
              NetAssetValue = new global::Org.Openfeed.NetAssetValue();
            }
            input.ReadMessage(NetAssetValue);
            break;
          }
          case 386: {
            if (previousSession_ == null) {
              PreviousSession = new global::Org.Openfeed.MarketSession();
            }
            input.ReadMessage(PreviousSession);
            break;
          }
          case 394: {
            if (tSession_ == null) {
              TSession = new global::Org.Openfeed.MarketSession();
            }
            input.ReadMessage(TSession);
            break;
          }
          case 402: {
            if (volumeAtPrice_ == null) {
              VolumeAtPrice = new global::Org.Openfeed.VolumeAtPrice();
            }
            input.ReadMessage(VolumeAtPrice);
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Used by market state to return snapshot.
  // </summary>
  public sealed partial class MarketSnapshotResponse : pb::IMessage<MarketSnapshotResponse> {
    private static readonly pb::MessageParser<MarketSnapshotResponse> _parser = new pb::MessageParser<MarketSnapshotResponse>(() => new MarketSnapshotResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketSnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshotResponse(MarketSnapshotResponse other) : this() {
      result_ = other.result_;
      message_ = other.message_;
      marketSnapshot_ = other.marketSnapshot_ != null ? other.marketSnapshot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSnapshotResponse Clone() {
      return new MarketSnapshotResponse(this);
    }

    // <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Org.Openfeed.SnapshotRequestResult result_ = global::Org.Openfeed.SnapshotRequestResult.SnapshotRequestUnknownResult;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SnapshotRequestResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    // <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "marketSnapshot" field.</summary>
    public const int MarketSnapshotFieldNumber = 3;
    private global::Org.Openfeed.MarketSnapshot marketSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSnapshot MarketSnapshot {
      get { return marketSnapshot_; }
      set {
        marketSnapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketSnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketSnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(MarketSnapshot, other.MarketSnapshot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Org.Openfeed.SnapshotRequestResult.SnapshotRequestUnknownResult) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (marketSnapshot_ != null) hash ^= MarketSnapshot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Org.Openfeed.SnapshotRequestResult.SnapshotRequestUnknownResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (marketSnapshot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MarketSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Org.Openfeed.SnapshotRequestResult.SnapshotRequestUnknownResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (marketSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketSnapshot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketSnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Org.Openfeed.SnapshotRequestResult.SnapshotRequestUnknownResult) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.marketSnapshot_ != null) {
        if (marketSnapshot_ == null) {
          MarketSnapshot = new global::Org.Openfeed.MarketSnapshot();
        }
        MarketSnapshot.MergeFrom(other.MarketSnapshot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Org.Openfeed.SnapshotRequestResult) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (marketSnapshot_ == null) {
              MarketSnapshot = new global::Org.Openfeed.MarketSnapshot();
            }
            input.ReadMessage(MarketSnapshot);
            break;
          }
        }
      }
    }

  }

  // <summary>
  //
  // Market Update for an instrument
  // </summary>
  public sealed partial class MarketUpdate : pb::IMessage<MarketUpdate> {
    private static readonly pb::MessageParser<MarketUpdate> _parser = new pb::MessageParser<MarketUpdate>(() => new MarketUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketUpdate(MarketUpdate other) : this() {
      marketId_ = other.marketId_;
      symbol_ = other.symbol_;
      transactionTime_ = other.transactionTime_;
      distributionTime_ = other.distributionTime_;
      marketSequence_ = other.marketSequence_;
      sourceSequence_ = other.sourceSequence_;
      originatorId_ = other.originatorId_;
      priceDenominator_ = other.priceDenominator_;
      context_ = other.context_ != null ? other.context_.Clone() : null;
      session_ = other.session_ != null ? other.session_.Clone() : null;
      tSession_ = other.tSession_ != null ? other.tSession_.Clone() : null;
      previousSession_ = other.previousSession_ != null ? other.previousSession_.Clone() : null;
      regional_ = other.regional_;
      switch (other.DataCase) {
        case DataOneofCase.News:
          News = other.News.Clone();
          break;
        case DataOneofCase.ClearBook:
          ClearBook = other.ClearBook.Clone();
          break;
        case DataOneofCase.InstrumentStatus:
          InstrumentStatus = other.InstrumentStatus.Clone();
          break;
        case DataOneofCase.Bbo:
          Bbo = other.Bbo.Clone();
          break;
        case DataOneofCase.DepthPriceLevel:
          DepthPriceLevel = other.DepthPriceLevel.Clone();
          break;
        case DataOneofCase.DepthOrder:
          DepthOrder = other.DepthOrder.Clone();
          break;
        case DataOneofCase.Index:
          Index = other.Index.Clone();
          break;
        case DataOneofCase.Trades:
          Trades = other.Trades.Clone();
          break;
        case DataOneofCase.Open:
          Open = other.Open.Clone();
          break;
        case DataOneofCase.High:
          High = other.High.Clone();
          break;
        case DataOneofCase.Low:
          Low = other.Low.Clone();
          break;
        case DataOneofCase.Close:
          Close = other.Close.Clone();
          break;
        case DataOneofCase.PrevClose:
          PrevClose = other.PrevClose.Clone();
          break;
        case DataOneofCase.Last:
          Last = other.Last.Clone();
          break;
        case DataOneofCase.YearHigh:
          YearHigh = other.YearHigh.Clone();
          break;
        case DataOneofCase.YearLow:
          YearLow = other.YearLow.Clone();
          break;
        case DataOneofCase.Volume:
          Volume = other.Volume.Clone();
          break;
        case DataOneofCase.Settlement:
          Settlement = other.Settlement.Clone();
          break;
        case DataOneofCase.OpenInterest:
          OpenInterest = other.OpenInterest.Clone();
          break;
        case DataOneofCase.Vwap:
          Vwap = other.Vwap.Clone();
          break;
        case DataOneofCase.DividendsIncomeDistributions:
          DividendsIncomeDistributions = other.DividendsIncomeDistributions.Clone();
          break;
        case DataOneofCase.NumberOfTrades:
          NumberOfTrades = other.NumberOfTrades.Clone();
          break;
        case DataOneofCase.MonetaryValue:
          MonetaryValue = other.MonetaryValue.Clone();
          break;
        case DataOneofCase.CapitalDistributions:
          CapitalDistributions = other.CapitalDistributions.Clone();
          break;
        case DataOneofCase.SharesOutstanding:
          SharesOutstanding = other.SharesOutstanding.Clone();
          break;
        case DataOneofCase.NetAssetValue:
          NetAssetValue = other.NetAssetValue.Clone();
          break;
        case DataOneofCase.MarketSummary:
          MarketSummary = other.MarketSummary.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketUpdate Clone() {
      return new MarketUpdate(this);
    }

    // <summary>Field number for the "marketId" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private long marketId_;
    // <summary>
    // Unique id identifying the market
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    // <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    // <summary>
    // Optional symbol identifier
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 3;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp of transaction, nano seconds since Unix epoch
    // This is usually the execution venue timestamp.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "distributionTime" field.</summary>
    public const int DistributionTimeFieldNumber = 4;
    private long distributionTime_;
    // <summary>
    // Distribution time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributionTime {
      get { return distributionTime_; }
      set {
        distributionTime_ = value;
      }
    }

    // <summary>Field number for the "marketSequence" field.</summary>
    public const int MarketSequenceFieldNumber = 5;
    private long marketSequence_;
    // <summary>
    // Market level sequencing number
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketSequence {
      get { return marketSequence_; }
      set {
        marketSequence_ = value;
      }
    }

    // <summary>Field number for the "sourceSequence" field.</summary>
    public const int SourceSequenceFieldNumber = 6;
    private long sourceSequence_;
    // <summary>
    // Data source sequence number
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SourceSequence {
      get { return sourceSequence_; }
      set {
        sourceSequence_ = value;
      }
    }

    // <summary>Field number for the "originatorId" field.</summary>
    public const int OriginatorIdFieldNumber = 7;
    private pb::ByteString originatorId_ = pb::ByteString.Empty;
    // <summary>
    // Market participant/originator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginatorId {
      get { return originatorId_; }
      set {
        originatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "priceDenominator" field.</summary>
    public const int PriceDenominatorFieldNumber = 9;
    private int priceDenominator_;
    // <summary>
    // Divide prices by this value to get real price values.  Optional, use value
    // from InstrumentDefinition if not set.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceDenominator {
      get { return priceDenominator_; }
      set {
        priceDenominator_ = value;
      }
    }

    // <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 10;
    private global::Org.Openfeed.Context context_;
    // <summary>
    // Feed specific context data set as required.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    // <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 11;
    private global::Org.Openfeed.MarketSession session_;
    // <summary>
    // Current session. This is used to 'enhance' updates from the translator in the Market State
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSession Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    // <summary>Field number for the "tSession" field.</summary>
    public const int TSessionFieldNumber = 12;
    private global::Org.Openfeed.MarketSession tSession_;
    // <summary>
    // 'T' session. This is used to 'enhance' updates from the translator in the Market State
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSession TSession {
      get { return tSession_; }
      set {
        tSession_ = value;
      }
    }

    // <summary>Field number for the "previousSession" field.</summary>
    public const int PreviousSessionFieldNumber = 13;
    private global::Org.Openfeed.MarketSession previousSession_;
    // <summary>
    // Previous session. This is used to 'enhance' updates from the translator in the Market State
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSession PreviousSession {
      get { return previousSession_; }
      set {
        previousSession_ = value;
      }
    }

    // <summary>Field number for the "regional" field.</summary>
    public const int RegionalFieldNumber = 14;
    private bool regional_;
    // <summary>
    // True if message applies to regional/participant member
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Regional {
      get { return regional_; }
      set {
        regional_ = value;
      }
    }

    // <summary>Field number for the "news" field.</summary>
    public const int NewsFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.News News {
      get { return dataCase_ == DataOneofCase.News ? (global::Org.Openfeed.News) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.News;
      }
    }

    // <summary>Field number for the "clearBook" field.</summary>
    public const int ClearBookFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.ClearBook ClearBook {
      get { return dataCase_ == DataOneofCase.ClearBook ? (global::Org.Openfeed.ClearBook) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ClearBook;
      }
    }

    // <summary>Field number for the "instrumentStatus" field.</summary>
    public const int InstrumentStatusFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentStatus InstrumentStatus {
      get { return dataCase_ == DataOneofCase.InstrumentStatus ? (global::Org.Openfeed.InstrumentStatus) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.InstrumentStatus;
      }
    }

    // <summary>Field number for the "bbo" field.</summary>
    public const int BboFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BestBidOffer Bbo {
      get { return dataCase_ == DataOneofCase.Bbo ? (global::Org.Openfeed.BestBidOffer) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Bbo;
      }
    }

    // <summary>Field number for the "depthPriceLevel" field.</summary>
    public const int DepthPriceLevelFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.DepthPriceLevel DepthPriceLevel {
      get { return dataCase_ == DataOneofCase.DepthPriceLevel ? (global::Org.Openfeed.DepthPriceLevel) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DepthPriceLevel;
      }
    }

    // <summary>Field number for the "depthOrder" field.</summary>
    public const int DepthOrderFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.DepthOrder DepthOrder {
      get { return dataCase_ == DataOneofCase.DepthOrder ? (global::Org.Openfeed.DepthOrder) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DepthOrder;
      }
    }

    // <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.IndexValue Index {
      get { return dataCase_ == DataOneofCase.Index ? (global::Org.Openfeed.IndexValue) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Index;
      }
    }

    // <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Trades Trades {
      get { return dataCase_ == DataOneofCase.Trades ? (global::Org.Openfeed.Trades) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Trades;
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Open Open {
      get { return dataCase_ == DataOneofCase.Open ? (global::Org.Openfeed.Open) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Open;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.High High {
      get { return dataCase_ == DataOneofCase.High ? (global::Org.Openfeed.High) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.High;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Low Low {
      get { return dataCase_ == DataOneofCase.Low ? (global::Org.Openfeed.Low) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Low;
      }
    }

    // <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Close Close {
      get { return dataCase_ == DataOneofCase.Close ? (global::Org.Openfeed.Close) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Close;
      }
    }

    // <summary>Field number for the "prevClose" field.</summary>
    public const int PrevCloseFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.PrevClose PrevClose {
      get { return dataCase_ == DataOneofCase.PrevClose ? (global::Org.Openfeed.PrevClose) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PrevClose;
      }
    }

    // <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Last Last {
      get { return dataCase_ == DataOneofCase.Last ? (global::Org.Openfeed.Last) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Last;
      }
    }

    // <summary>Field number for the "yearHigh" field.</summary>
    public const int YearHighFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.YearHigh YearHigh {
      get { return dataCase_ == DataOneofCase.YearHigh ? (global::Org.Openfeed.YearHigh) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.YearHigh;
      }
    }

    // <summary>Field number for the "yearLow" field.</summary>
    public const int YearLowFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.YearLow YearLow {
      get { return dataCase_ == DataOneofCase.YearLow ? (global::Org.Openfeed.YearLow) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.YearLow;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Volume Volume {
      get { return dataCase_ == DataOneofCase.Volume ? (global::Org.Openfeed.Volume) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Volume;
      }
    }

    // <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Settlement Settlement {
      get { return dataCase_ == DataOneofCase.Settlement ? (global::Org.Openfeed.Settlement) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Settlement;
      }
    }

    // <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.OpenInterest OpenInterest {
      get { return dataCase_ == DataOneofCase.OpenInterest ? (global::Org.Openfeed.OpenInterest) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.OpenInterest;
      }
    }

    // <summary>Field number for the "vwap" field.</summary>
    public const int VwapFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Vwap Vwap {
      get { return dataCase_ == DataOneofCase.Vwap ? (global::Org.Openfeed.Vwap) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Vwap;
      }
    }

    // <summary>Field number for the "dividendsIncomeDistributions" field.</summary>
    public const int DividendsIncomeDistributionsFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.DividendsIncomeDistributions DividendsIncomeDistributions {
      get { return dataCase_ == DataOneofCase.DividendsIncomeDistributions ? (global::Org.Openfeed.DividendsIncomeDistributions) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DividendsIncomeDistributions;
      }
    }

    // <summary>Field number for the "numberOfTrades" field.</summary>
    public const int NumberOfTradesFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.NumberOfTrades NumberOfTrades {
      get { return dataCase_ == DataOneofCase.NumberOfTrades ? (global::Org.Openfeed.NumberOfTrades) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.NumberOfTrades;
      }
    }

    // <summary>Field number for the "monetaryValue" field.</summary>
    public const int MonetaryValueFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MonetaryValue MonetaryValue {
      get { return dataCase_ == DataOneofCase.MonetaryValue ? (global::Org.Openfeed.MonetaryValue) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.MonetaryValue;
      }
    }

    // <summary>Field number for the "capitalDistributions" field.</summary>
    public const int CapitalDistributionsFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.CapitalDistributions CapitalDistributions {
      get { return dataCase_ == DataOneofCase.CapitalDistributions ? (global::Org.Openfeed.CapitalDistributions) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CapitalDistributions;
      }
    }

    // <summary>Field number for the "sharesOutstanding" field.</summary>
    public const int SharesOutstandingFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SharesOutstanding SharesOutstanding {
      get { return dataCase_ == DataOneofCase.SharesOutstanding ? (global::Org.Openfeed.SharesOutstanding) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.SharesOutstanding;
      }
    }

    // <summary>Field number for the "netAssetValue" field.</summary>
    public const int NetAssetValueFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.NetAssetValue NetAssetValue {
      get { return dataCase_ == DataOneofCase.NetAssetValue ? (global::Org.Openfeed.NetAssetValue) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.NetAssetValue;
      }
    }

    // <summary>Field number for the "marketSummary" field.</summary>
    public const int MarketSummaryFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSummary MarketSummary {
      get { return dataCase_ == DataOneofCase.MarketSummary ? (global::Org.Openfeed.MarketSummary) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.MarketSummary;
      }
    }

    private object data_;
    // <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      News = 20,
      ClearBook = 21,
      InstrumentStatus = 22,
      Bbo = 23,
      DepthPriceLevel = 24,
      DepthOrder = 25,
      Index = 26,
      Trades = 27,
      Open = 28,
      High = 29,
      Low = 30,
      Close = 31,
      PrevClose = 32,
      Last = 33,
      YearHigh = 34,
      YearLow = 35,
      Volume = 36,
      Settlement = 37,
      OpenInterest = 38,
      Vwap = 39,
      DividendsIncomeDistributions = 40,
      NumberOfTrades = 41,
      MonetaryValue = 42,
      CapitalDistributions = 43,
      SharesOutstanding = 44,
      NetAssetValue = 45,
      MarketSummary = 46,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (Symbol != other.Symbol) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (DistributionTime != other.DistributionTime) return false;
      if (MarketSequence != other.MarketSequence) return false;
      if (SourceSequence != other.SourceSequence) return false;
      if (OriginatorId != other.OriginatorId) return false;
      if (PriceDenominator != other.PriceDenominator) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(TSession, other.TSession)) return false;
      if (!object.Equals(PreviousSession, other.PreviousSession)) return false;
      if (Regional != other.Regional) return false;
      if (!object.Equals(News, other.News)) return false;
      if (!object.Equals(ClearBook, other.ClearBook)) return false;
      if (!object.Equals(InstrumentStatus, other.InstrumentStatus)) return false;
      if (!object.Equals(Bbo, other.Bbo)) return false;
      if (!object.Equals(DepthPriceLevel, other.DepthPriceLevel)) return false;
      if (!object.Equals(DepthOrder, other.DepthOrder)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(Trades, other.Trades)) return false;
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(High, other.High)) return false;
      if (!object.Equals(Low, other.Low)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      if (!object.Equals(PrevClose, other.PrevClose)) return false;
      if (!object.Equals(Last, other.Last)) return false;
      if (!object.Equals(YearHigh, other.YearHigh)) return false;
      if (!object.Equals(YearLow, other.YearLow)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Settlement, other.Settlement)) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(Vwap, other.Vwap)) return false;
      if (!object.Equals(DividendsIncomeDistributions, other.DividendsIncomeDistributions)) return false;
      if (!object.Equals(NumberOfTrades, other.NumberOfTrades)) return false;
      if (!object.Equals(MonetaryValue, other.MonetaryValue)) return false;
      if (!object.Equals(CapitalDistributions, other.CapitalDistributions)) return false;
      if (!object.Equals(SharesOutstanding, other.SharesOutstanding)) return false;
      if (!object.Equals(NetAssetValue, other.NetAssetValue)) return false;
      if (!object.Equals(MarketSummary, other.MarketSummary)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0L) hash ^= MarketId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (DistributionTime != 0L) hash ^= DistributionTime.GetHashCode();
      if (MarketSequence != 0L) hash ^= MarketSequence.GetHashCode();
      if (SourceSequence != 0L) hash ^= SourceSequence.GetHashCode();
      if (OriginatorId.Length != 0) hash ^= OriginatorId.GetHashCode();
      if (PriceDenominator != 0) hash ^= PriceDenominator.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (session_ != null) hash ^= Session.GetHashCode();
      if (tSession_ != null) hash ^= TSession.GetHashCode();
      if (previousSession_ != null) hash ^= PreviousSession.GetHashCode();
      if (Regional != false) hash ^= Regional.GetHashCode();
      if (dataCase_ == DataOneofCase.News) hash ^= News.GetHashCode();
      if (dataCase_ == DataOneofCase.ClearBook) hash ^= ClearBook.GetHashCode();
      if (dataCase_ == DataOneofCase.InstrumentStatus) hash ^= InstrumentStatus.GetHashCode();
      if (dataCase_ == DataOneofCase.Bbo) hash ^= Bbo.GetHashCode();
      if (dataCase_ == DataOneofCase.DepthPriceLevel) hash ^= DepthPriceLevel.GetHashCode();
      if (dataCase_ == DataOneofCase.DepthOrder) hash ^= DepthOrder.GetHashCode();
      if (dataCase_ == DataOneofCase.Index) hash ^= Index.GetHashCode();
      if (dataCase_ == DataOneofCase.Trades) hash ^= Trades.GetHashCode();
      if (dataCase_ == DataOneofCase.Open) hash ^= Open.GetHashCode();
      if (dataCase_ == DataOneofCase.High) hash ^= High.GetHashCode();
      if (dataCase_ == DataOneofCase.Low) hash ^= Low.GetHashCode();
      if (dataCase_ == DataOneofCase.Close) hash ^= Close.GetHashCode();
      if (dataCase_ == DataOneofCase.PrevClose) hash ^= PrevClose.GetHashCode();
      if (dataCase_ == DataOneofCase.Last) hash ^= Last.GetHashCode();
      if (dataCase_ == DataOneofCase.YearHigh) hash ^= YearHigh.GetHashCode();
      if (dataCase_ == DataOneofCase.YearLow) hash ^= YearLow.GetHashCode();
      if (dataCase_ == DataOneofCase.Volume) hash ^= Volume.GetHashCode();
      if (dataCase_ == DataOneofCase.Settlement) hash ^= Settlement.GetHashCode();
      if (dataCase_ == DataOneofCase.OpenInterest) hash ^= OpenInterest.GetHashCode();
      if (dataCase_ == DataOneofCase.Vwap) hash ^= Vwap.GetHashCode();
      if (dataCase_ == DataOneofCase.DividendsIncomeDistributions) hash ^= DividendsIncomeDistributions.GetHashCode();
      if (dataCase_ == DataOneofCase.NumberOfTrades) hash ^= NumberOfTrades.GetHashCode();
      if (dataCase_ == DataOneofCase.MonetaryValue) hash ^= MonetaryValue.GetHashCode();
      if (dataCase_ == DataOneofCase.CapitalDistributions) hash ^= CapitalDistributions.GetHashCode();
      if (dataCase_ == DataOneofCase.SharesOutstanding) hash ^= SharesOutstanding.GetHashCode();
      if (dataCase_ == DataOneofCase.NetAssetValue) hash ^= NetAssetValue.GetHashCode();
      if (dataCase_ == DataOneofCase.MarketSummary) hash ^= MarketSummary.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TransactionTime);
      }
      if (DistributionTime != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(DistributionTime);
      }
      if (MarketSequence != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(MarketSequence);
      }
      if (SourceSequence != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(SourceSequence);
      }
      if (OriginatorId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(OriginatorId);
      }
      if (PriceDenominator != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(PriceDenominator);
      }
      if (context_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Context);
      }
      if (session_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Session);
      }
      if (tSession_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TSession);
      }
      if (previousSession_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PreviousSession);
      }
      if (Regional != false) {
        output.WriteRawTag(112);
        output.WriteBool(Regional);
      }
      if (dataCase_ == DataOneofCase.News) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(News);
      }
      if (dataCase_ == DataOneofCase.ClearBook) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ClearBook);
      }
      if (dataCase_ == DataOneofCase.InstrumentStatus) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(InstrumentStatus);
      }
      if (dataCase_ == DataOneofCase.Bbo) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Bbo);
      }
      if (dataCase_ == DataOneofCase.DepthPriceLevel) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(DepthPriceLevel);
      }
      if (dataCase_ == DataOneofCase.DepthOrder) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(DepthOrder);
      }
      if (dataCase_ == DataOneofCase.Index) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Index);
      }
      if (dataCase_ == DataOneofCase.Trades) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Trades);
      }
      if (dataCase_ == DataOneofCase.Open) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Open);
      }
      if (dataCase_ == DataOneofCase.High) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(High);
      }
      if (dataCase_ == DataOneofCase.Low) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Low);
      }
      if (dataCase_ == DataOneofCase.Close) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Close);
      }
      if (dataCase_ == DataOneofCase.PrevClose) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(PrevClose);
      }
      if (dataCase_ == DataOneofCase.Last) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Last);
      }
      if (dataCase_ == DataOneofCase.YearHigh) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(YearHigh);
      }
      if (dataCase_ == DataOneofCase.YearLow) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(YearLow);
      }
      if (dataCase_ == DataOneofCase.Volume) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Volume);
      }
      if (dataCase_ == DataOneofCase.Settlement) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Settlement);
      }
      if (dataCase_ == DataOneofCase.OpenInterest) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(OpenInterest);
      }
      if (dataCase_ == DataOneofCase.Vwap) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Vwap);
      }
      if (dataCase_ == DataOneofCase.DividendsIncomeDistributions) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(DividendsIncomeDistributions);
      }
      if (dataCase_ == DataOneofCase.NumberOfTrades) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(NumberOfTrades);
      }
      if (dataCase_ == DataOneofCase.MonetaryValue) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MonetaryValue);
      }
      if (dataCase_ == DataOneofCase.CapitalDistributions) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(CapitalDistributions);
      }
      if (dataCase_ == DataOneofCase.SharesOutstanding) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(SharesOutstanding);
      }
      if (dataCase_ == DataOneofCase.NetAssetValue) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(NetAssetValue);
      }
      if (dataCase_ == DataOneofCase.MarketSummary) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(MarketSummary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (DistributionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(DistributionTime);
      }
      if (MarketSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketSequence);
      }
      if (SourceSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SourceSequence);
      }
      if (OriginatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginatorId);
      }
      if (PriceDenominator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PriceDenominator);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (session_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (tSession_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TSession);
      }
      if (previousSession_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousSession);
      }
      if (Regional != false) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.News) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(News);
      }
      if (dataCase_ == DataOneofCase.ClearBook) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClearBook);
      }
      if (dataCase_ == DataOneofCase.InstrumentStatus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstrumentStatus);
      }
      if (dataCase_ == DataOneofCase.Bbo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bbo);
      }
      if (dataCase_ == DataOneofCase.DepthPriceLevel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DepthPriceLevel);
      }
      if (dataCase_ == DataOneofCase.DepthOrder) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DepthOrder);
      }
      if (dataCase_ == DataOneofCase.Index) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (dataCase_ == DataOneofCase.Trades) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Trades);
      }
      if (dataCase_ == DataOneofCase.Open) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (dataCase_ == DataOneofCase.High) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(High);
      }
      if (dataCase_ == DataOneofCase.Low) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Low);
      }
      if (dataCase_ == DataOneofCase.Close) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      if (dataCase_ == DataOneofCase.PrevClose) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevClose);
      }
      if (dataCase_ == DataOneofCase.Last) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Last);
      }
      if (dataCase_ == DataOneofCase.YearHigh) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YearHigh);
      }
      if (dataCase_ == DataOneofCase.YearLow) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YearLow);
      }
      if (dataCase_ == DataOneofCase.Volume) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (dataCase_ == DataOneofCase.Settlement) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Settlement);
      }
      if (dataCase_ == DataOneofCase.OpenInterest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (dataCase_ == DataOneofCase.Vwap) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vwap);
      }
      if (dataCase_ == DataOneofCase.DividendsIncomeDistributions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DividendsIncomeDistributions);
      }
      if (dataCase_ == DataOneofCase.NumberOfTrades) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumberOfTrades);
      }
      if (dataCase_ == DataOneofCase.MonetaryValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonetaryValue);
      }
      if (dataCase_ == DataOneofCase.CapitalDistributions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CapitalDistributions);
      }
      if (dataCase_ == DataOneofCase.SharesOutstanding) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SharesOutstanding);
      }
      if (dataCase_ == DataOneofCase.NetAssetValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NetAssetValue);
      }
      if (dataCase_ == DataOneofCase.MarketSummary) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarketSummary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketUpdate other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0L) {
        MarketId = other.MarketId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.DistributionTime != 0L) {
        DistributionTime = other.DistributionTime;
      }
      if (other.MarketSequence != 0L) {
        MarketSequence = other.MarketSequence;
      }
      if (other.SourceSequence != 0L) {
        SourceSequence = other.SourceSequence;
      }
      if (other.OriginatorId.Length != 0) {
        OriginatorId = other.OriginatorId;
      }
      if (other.PriceDenominator != 0) {
        PriceDenominator = other.PriceDenominator;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          Context = new global::Org.Openfeed.Context();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.session_ != null) {
        if (session_ == null) {
          Session = new global::Org.Openfeed.MarketSession();
        }
        Session.MergeFrom(other.Session);
      }
      if (other.tSession_ != null) {
        if (tSession_ == null) {
          TSession = new global::Org.Openfeed.MarketSession();
        }
        TSession.MergeFrom(other.TSession);
      }
      if (other.previousSession_ != null) {
        if (previousSession_ == null) {
          PreviousSession = new global::Org.Openfeed.MarketSession();
        }
        PreviousSession.MergeFrom(other.PreviousSession);
      }
      if (other.Regional != false) {
        Regional = other.Regional;
      }
      switch (other.DataCase) {
        case DataOneofCase.News:
          if (News == null) {
            News = new global::Org.Openfeed.News();
          }
          News.MergeFrom(other.News);
          break;
        case DataOneofCase.ClearBook:
          if (ClearBook == null) {
            ClearBook = new global::Org.Openfeed.ClearBook();
          }
          ClearBook.MergeFrom(other.ClearBook);
          break;
        case DataOneofCase.InstrumentStatus:
          if (InstrumentStatus == null) {
            InstrumentStatus = new global::Org.Openfeed.InstrumentStatus();
          }
          InstrumentStatus.MergeFrom(other.InstrumentStatus);
          break;
        case DataOneofCase.Bbo:
          if (Bbo == null) {
            Bbo = new global::Org.Openfeed.BestBidOffer();
          }
          Bbo.MergeFrom(other.Bbo);
          break;
        case DataOneofCase.DepthPriceLevel:
          if (DepthPriceLevel == null) {
            DepthPriceLevel = new global::Org.Openfeed.DepthPriceLevel();
          }
          DepthPriceLevel.MergeFrom(other.DepthPriceLevel);
          break;
        case DataOneofCase.DepthOrder:
          if (DepthOrder == null) {
            DepthOrder = new global::Org.Openfeed.DepthOrder();
          }
          DepthOrder.MergeFrom(other.DepthOrder);
          break;
        case DataOneofCase.Index:
          if (Index == null) {
            Index = new global::Org.Openfeed.IndexValue();
          }
          Index.MergeFrom(other.Index);
          break;
        case DataOneofCase.Trades:
          if (Trades == null) {
            Trades = new global::Org.Openfeed.Trades();
          }
          Trades.MergeFrom(other.Trades);
          break;
        case DataOneofCase.Open:
          if (Open == null) {
            Open = new global::Org.Openfeed.Open();
          }
          Open.MergeFrom(other.Open);
          break;
        case DataOneofCase.High:
          if (High == null) {
            High = new global::Org.Openfeed.High();
          }
          High.MergeFrom(other.High);
          break;
        case DataOneofCase.Low:
          if (Low == null) {
            Low = new global::Org.Openfeed.Low();
          }
          Low.MergeFrom(other.Low);
          break;
        case DataOneofCase.Close:
          if (Close == null) {
            Close = new global::Org.Openfeed.Close();
          }
          Close.MergeFrom(other.Close);
          break;
        case DataOneofCase.PrevClose:
          if (PrevClose == null) {
            PrevClose = new global::Org.Openfeed.PrevClose();
          }
          PrevClose.MergeFrom(other.PrevClose);
          break;
        case DataOneofCase.Last:
          if (Last == null) {
            Last = new global::Org.Openfeed.Last();
          }
          Last.MergeFrom(other.Last);
          break;
        case DataOneofCase.YearHigh:
          if (YearHigh == null) {
            YearHigh = new global::Org.Openfeed.YearHigh();
          }
          YearHigh.MergeFrom(other.YearHigh);
          break;
        case DataOneofCase.YearLow:
          if (YearLow == null) {
            YearLow = new global::Org.Openfeed.YearLow();
          }
          YearLow.MergeFrom(other.YearLow);
          break;
        case DataOneofCase.Volume:
          if (Volume == null) {
            Volume = new global::Org.Openfeed.Volume();
          }
          Volume.MergeFrom(other.Volume);
          break;
        case DataOneofCase.Settlement:
          if (Settlement == null) {
            Settlement = new global::Org.Openfeed.Settlement();
          }
          Settlement.MergeFrom(other.Settlement);
          break;
        case DataOneofCase.OpenInterest:
          if (OpenInterest == null) {
            OpenInterest = new global::Org.Openfeed.OpenInterest();
          }
          OpenInterest.MergeFrom(other.OpenInterest);
          break;
        case DataOneofCase.Vwap:
          if (Vwap == null) {
            Vwap = new global::Org.Openfeed.Vwap();
          }
          Vwap.MergeFrom(other.Vwap);
          break;
        case DataOneofCase.DividendsIncomeDistributions:
          if (DividendsIncomeDistributions == null) {
            DividendsIncomeDistributions = new global::Org.Openfeed.DividendsIncomeDistributions();
          }
          DividendsIncomeDistributions.MergeFrom(other.DividendsIncomeDistributions);
          break;
        case DataOneofCase.NumberOfTrades:
          if (NumberOfTrades == null) {
            NumberOfTrades = new global::Org.Openfeed.NumberOfTrades();
          }
          NumberOfTrades.MergeFrom(other.NumberOfTrades);
          break;
        case DataOneofCase.MonetaryValue:
          if (MonetaryValue == null) {
            MonetaryValue = new global::Org.Openfeed.MonetaryValue();
          }
          MonetaryValue.MergeFrom(other.MonetaryValue);
          break;
        case DataOneofCase.CapitalDistributions:
          if (CapitalDistributions == null) {
            CapitalDistributions = new global::Org.Openfeed.CapitalDistributions();
          }
          CapitalDistributions.MergeFrom(other.CapitalDistributions);
          break;
        case DataOneofCase.SharesOutstanding:
          if (SharesOutstanding == null) {
            SharesOutstanding = new global::Org.Openfeed.SharesOutstanding();
          }
          SharesOutstanding.MergeFrom(other.SharesOutstanding);
          break;
        case DataOneofCase.NetAssetValue:
          if (NetAssetValue == null) {
            NetAssetValue = new global::Org.Openfeed.NetAssetValue();
          }
          NetAssetValue.MergeFrom(other.NetAssetValue);
          break;
        case DataOneofCase.MarketSummary:
          if (MarketSummary == null) {
            MarketSummary = new global::Org.Openfeed.MarketSummary();
          }
          MarketSummary.MergeFrom(other.MarketSummary);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 32: {
            DistributionTime = input.ReadSInt64();
            break;
          }
          case 40: {
            MarketSequence = input.ReadSInt64();
            break;
          }
          case 48: {
            SourceSequence = input.ReadSInt64();
            break;
          }
          case 58: {
            OriginatorId = input.ReadBytes();
            break;
          }
          case 72: {
            PriceDenominator = input.ReadSInt32();
            break;
          }
          case 82: {
            if (context_ == null) {
              Context = new global::Org.Openfeed.Context();
            }
            input.ReadMessage(Context);
            break;
          }
          case 90: {
            if (session_ == null) {
              Session = new global::Org.Openfeed.MarketSession();
            }
            input.ReadMessage(Session);
            break;
          }
          case 98: {
            if (tSession_ == null) {
              TSession = new global::Org.Openfeed.MarketSession();
            }
            input.ReadMessage(TSession);
            break;
          }
          case 106: {
            if (previousSession_ == null) {
              PreviousSession = new global::Org.Openfeed.MarketSession();
            }
            input.ReadMessage(PreviousSession);
            break;
          }
          case 112: {
            Regional = input.ReadBool();
            break;
          }
          case 162: {
            global::Org.Openfeed.News subBuilder = new global::Org.Openfeed.News();
            if (dataCase_ == DataOneofCase.News) {
              subBuilder.MergeFrom(News);
            }
            input.ReadMessage(subBuilder);
            News = subBuilder;
            break;
          }
          case 170: {
            global::Org.Openfeed.ClearBook subBuilder = new global::Org.Openfeed.ClearBook();
            if (dataCase_ == DataOneofCase.ClearBook) {
              subBuilder.MergeFrom(ClearBook);
            }
            input.ReadMessage(subBuilder);
            ClearBook = subBuilder;
            break;
          }
          case 178: {
            global::Org.Openfeed.InstrumentStatus subBuilder = new global::Org.Openfeed.InstrumentStatus();
            if (dataCase_ == DataOneofCase.InstrumentStatus) {
              subBuilder.MergeFrom(InstrumentStatus);
            }
            input.ReadMessage(subBuilder);
            InstrumentStatus = subBuilder;
            break;
          }
          case 186: {
            global::Org.Openfeed.BestBidOffer subBuilder = new global::Org.Openfeed.BestBidOffer();
            if (dataCase_ == DataOneofCase.Bbo) {
              subBuilder.MergeFrom(Bbo);
            }
            input.ReadMessage(subBuilder);
            Bbo = subBuilder;
            break;
          }
          case 194: {
            global::Org.Openfeed.DepthPriceLevel subBuilder = new global::Org.Openfeed.DepthPriceLevel();
            if (dataCase_ == DataOneofCase.DepthPriceLevel) {
              subBuilder.MergeFrom(DepthPriceLevel);
            }
            input.ReadMessage(subBuilder);
            DepthPriceLevel = subBuilder;
            break;
          }
          case 202: {
            global::Org.Openfeed.DepthOrder subBuilder = new global::Org.Openfeed.DepthOrder();
            if (dataCase_ == DataOneofCase.DepthOrder) {
              subBuilder.MergeFrom(DepthOrder);
            }
            input.ReadMessage(subBuilder);
            DepthOrder = subBuilder;
            break;
          }
          case 210: {
            global::Org.Openfeed.IndexValue subBuilder = new global::Org.Openfeed.IndexValue();
            if (dataCase_ == DataOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 218: {
            global::Org.Openfeed.Trades subBuilder = new global::Org.Openfeed.Trades();
            if (dataCase_ == DataOneofCase.Trades) {
              subBuilder.MergeFrom(Trades);
            }
            input.ReadMessage(subBuilder);
            Trades = subBuilder;
            break;
          }
          case 226: {
            global::Org.Openfeed.Open subBuilder = new global::Org.Openfeed.Open();
            if (dataCase_ == DataOneofCase.Open) {
              subBuilder.MergeFrom(Open);
            }
            input.ReadMessage(subBuilder);
            Open = subBuilder;
            break;
          }
          case 234: {
            global::Org.Openfeed.High subBuilder = new global::Org.Openfeed.High();
            if (dataCase_ == DataOneofCase.High) {
              subBuilder.MergeFrom(High);
            }
            input.ReadMessage(subBuilder);
            High = subBuilder;
            break;
          }
          case 242: {
            global::Org.Openfeed.Low subBuilder = new global::Org.Openfeed.Low();
            if (dataCase_ == DataOneofCase.Low) {
              subBuilder.MergeFrom(Low);
            }
            input.ReadMessage(subBuilder);
            Low = subBuilder;
            break;
          }
          case 250: {
            global::Org.Openfeed.Close subBuilder = new global::Org.Openfeed.Close();
            if (dataCase_ == DataOneofCase.Close) {
              subBuilder.MergeFrom(Close);
            }
            input.ReadMessage(subBuilder);
            Close = subBuilder;
            break;
          }
          case 258: {
            global::Org.Openfeed.PrevClose subBuilder = new global::Org.Openfeed.PrevClose();
            if (dataCase_ == DataOneofCase.PrevClose) {
              subBuilder.MergeFrom(PrevClose);
            }
            input.ReadMessage(subBuilder);
            PrevClose = subBuilder;
            break;
          }
          case 266: {
            global::Org.Openfeed.Last subBuilder = new global::Org.Openfeed.Last();
            if (dataCase_ == DataOneofCase.Last) {
              subBuilder.MergeFrom(Last);
            }
            input.ReadMessage(subBuilder);
            Last = subBuilder;
            break;
          }
          case 274: {
            global::Org.Openfeed.YearHigh subBuilder = new global::Org.Openfeed.YearHigh();
            if (dataCase_ == DataOneofCase.YearHigh) {
              subBuilder.MergeFrom(YearHigh);
            }
            input.ReadMessage(subBuilder);
            YearHigh = subBuilder;
            break;
          }
          case 282: {
            global::Org.Openfeed.YearLow subBuilder = new global::Org.Openfeed.YearLow();
            if (dataCase_ == DataOneofCase.YearLow) {
              subBuilder.MergeFrom(YearLow);
            }
            input.ReadMessage(subBuilder);
            YearLow = subBuilder;
            break;
          }
          case 290: {
            global::Org.Openfeed.Volume subBuilder = new global::Org.Openfeed.Volume();
            if (dataCase_ == DataOneofCase.Volume) {
              subBuilder.MergeFrom(Volume);
            }
            input.ReadMessage(subBuilder);
            Volume = subBuilder;
            break;
          }
          case 298: {
            global::Org.Openfeed.Settlement subBuilder = new global::Org.Openfeed.Settlement();
            if (dataCase_ == DataOneofCase.Settlement) {
              subBuilder.MergeFrom(Settlement);
            }
            input.ReadMessage(subBuilder);
            Settlement = subBuilder;
            break;
          }
          case 306: {
            global::Org.Openfeed.OpenInterest subBuilder = new global::Org.Openfeed.OpenInterest();
            if (dataCase_ == DataOneofCase.OpenInterest) {
              subBuilder.MergeFrom(OpenInterest);
            }
            input.ReadMessage(subBuilder);
            OpenInterest = subBuilder;
            break;
          }
          case 314: {
            global::Org.Openfeed.Vwap subBuilder = new global::Org.Openfeed.Vwap();
            if (dataCase_ == DataOneofCase.Vwap) {
              subBuilder.MergeFrom(Vwap);
            }
            input.ReadMessage(subBuilder);
            Vwap = subBuilder;
            break;
          }
          case 322: {
            global::Org.Openfeed.DividendsIncomeDistributions subBuilder = new global::Org.Openfeed.DividendsIncomeDistributions();
            if (dataCase_ == DataOneofCase.DividendsIncomeDistributions) {
              subBuilder.MergeFrom(DividendsIncomeDistributions);
            }
            input.ReadMessage(subBuilder);
            DividendsIncomeDistributions = subBuilder;
            break;
          }
          case 330: {
            global::Org.Openfeed.NumberOfTrades subBuilder = new global::Org.Openfeed.NumberOfTrades();
            if (dataCase_ == DataOneofCase.NumberOfTrades) {
              subBuilder.MergeFrom(NumberOfTrades);
            }
            input.ReadMessage(subBuilder);
            NumberOfTrades = subBuilder;
            break;
          }
          case 338: {
            global::Org.Openfeed.MonetaryValue subBuilder = new global::Org.Openfeed.MonetaryValue();
            if (dataCase_ == DataOneofCase.MonetaryValue) {
              subBuilder.MergeFrom(MonetaryValue);
            }
            input.ReadMessage(subBuilder);
            MonetaryValue = subBuilder;
            break;
          }
          case 346: {
            global::Org.Openfeed.CapitalDistributions subBuilder = new global::Org.Openfeed.CapitalDistributions();
            if (dataCase_ == DataOneofCase.CapitalDistributions) {
              subBuilder.MergeFrom(CapitalDistributions);
            }
            input.ReadMessage(subBuilder);
            CapitalDistributions = subBuilder;
            break;
          }
          case 354: {
            global::Org.Openfeed.SharesOutstanding subBuilder = new global::Org.Openfeed.SharesOutstanding();
            if (dataCase_ == DataOneofCase.SharesOutstanding) {
              subBuilder.MergeFrom(SharesOutstanding);
            }
            input.ReadMessage(subBuilder);
            SharesOutstanding = subBuilder;
            break;
          }
          case 362: {
            global::Org.Openfeed.NetAssetValue subBuilder = new global::Org.Openfeed.NetAssetValue();
            if (dataCase_ == DataOneofCase.NetAssetValue) {
              subBuilder.MergeFrom(NetAssetValue);
            }
            input.ReadMessage(subBuilder);
            NetAssetValue = subBuilder;
            break;
          }
          case 370: {
            global::Org.Openfeed.MarketSummary subBuilder = new global::Org.Openfeed.MarketSummary();
            if (dataCase_ == DataOneofCase.MarketSummary) {
              subBuilder.MergeFrom(MarketSummary);
            }
            input.ReadMessage(subBuilder);
            MarketSummary = subBuilder;
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Depth Price Level
  // </summary>
  public sealed partial class DepthPriceLevel : pb::IMessage<DepthPriceLevel> {
    private static readonly pb::MessageParser<DepthPriceLevel> _parser = new pb::MessageParser<DepthPriceLevel>(() => new DepthPriceLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthPriceLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthPriceLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthPriceLevel(DepthPriceLevel other) : this() {
      levels_ = other.levels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthPriceLevel Clone() {
      return new DepthPriceLevel(this);
    }

    // <summary>Field number for the "levels" field.</summary>
    public const int LevelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Openfeed.DepthPriceLevel.Types.Entry> _repeated_levels_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.DepthPriceLevel.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.DepthPriceLevel.Types.Entry> levels_ = new pbc::RepeatedField<global::Org.Openfeed.DepthPriceLevel.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.DepthPriceLevel.Types.Entry> Levels {
      get { return levels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthPriceLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthPriceLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!levels_.Equals(other.levels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= levels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      levels_.WriteTo(output, _repeated_levels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += levels_.CalculateSize(_repeated_levels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthPriceLevel other) {
      if (other == null) {
        return;
      }
      levels_.Add(other.levels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            levels_.AddEntriesFrom(input, _repeated_levels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the DepthPriceLevel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.DepthPriceLevel.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          switch (other.DataCase) {
            case DataOneofCase.AddPriceLevel:
              AddPriceLevel = other.AddPriceLevel.Clone();
              break;
            case DataOneofCase.DeletePriceLevel:
              DeletePriceLevel = other.DeletePriceLevel.Clone();
              break;
            case DataOneofCase.ModifyPriceLevel:
              ModifyPriceLevel = other.ModifyPriceLevel.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        // <summary>Field number for the "addPriceLevel" field.</summary>
        public const int AddPriceLevelFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.AddPriceLevel AddPriceLevel {
          get { return dataCase_ == DataOneofCase.AddPriceLevel ? (global::Org.Openfeed.AddPriceLevel) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.AddPriceLevel;
          }
        }

        // <summary>Field number for the "deletePriceLevel" field.</summary>
        public const int DeletePriceLevelFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.DeletePriceLevel DeletePriceLevel {
          get { return dataCase_ == DataOneofCase.DeletePriceLevel ? (global::Org.Openfeed.DeletePriceLevel) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeletePriceLevel;
          }
        }

        // <summary>Field number for the "modifyPriceLevel" field.</summary>
        public const int ModifyPriceLevelFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.ModifyPriceLevel ModifyPriceLevel {
          get { return dataCase_ == DataOneofCase.ModifyPriceLevel ? (global::Org.Openfeed.ModifyPriceLevel) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ModifyPriceLevel;
          }
        }

        private object data_;
        // <summary>Enum of possible cases for the "data" oneof.</summary>
        public enum DataOneofCase {
          None = 0,
          AddPriceLevel = 1,
          DeletePriceLevel = 2,
          ModifyPriceLevel = 3,
        }
        private DataOneofCase dataCase_ = DataOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataOneofCase DataCase {
          get { return dataCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          dataCase_ = DataOneofCase.None;
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AddPriceLevel, other.AddPriceLevel)) return false;
          if (!object.Equals(DeletePriceLevel, other.DeletePriceLevel)) return false;
          if (!object.Equals(ModifyPriceLevel, other.ModifyPriceLevel)) return false;
          if (DataCase != other.DataCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataCase_ == DataOneofCase.AddPriceLevel) hash ^= AddPriceLevel.GetHashCode();
          if (dataCase_ == DataOneofCase.DeletePriceLevel) hash ^= DeletePriceLevel.GetHashCode();
          if (dataCase_ == DataOneofCase.ModifyPriceLevel) hash ^= ModifyPriceLevel.GetHashCode();
          hash ^= (int) dataCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataCase_ == DataOneofCase.AddPriceLevel) {
            output.WriteRawTag(10);
            output.WriteMessage(AddPriceLevel);
          }
          if (dataCase_ == DataOneofCase.DeletePriceLevel) {
            output.WriteRawTag(18);
            output.WriteMessage(DeletePriceLevel);
          }
          if (dataCase_ == DataOneofCase.ModifyPriceLevel) {
            output.WriteRawTag(26);
            output.WriteMessage(ModifyPriceLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataCase_ == DataOneofCase.AddPriceLevel) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddPriceLevel);
          }
          if (dataCase_ == DataOneofCase.DeletePriceLevel) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletePriceLevel);
          }
          if (dataCase_ == DataOneofCase.ModifyPriceLevel) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyPriceLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          switch (other.DataCase) {
            case DataOneofCase.AddPriceLevel:
              if (AddPriceLevel == null) {
                AddPriceLevel = new global::Org.Openfeed.AddPriceLevel();
              }
              AddPriceLevel.MergeFrom(other.AddPriceLevel);
              break;
            case DataOneofCase.DeletePriceLevel:
              if (DeletePriceLevel == null) {
                DeletePriceLevel = new global::Org.Openfeed.DeletePriceLevel();
              }
              DeletePriceLevel.MergeFrom(other.DeletePriceLevel);
              break;
            case DataOneofCase.ModifyPriceLevel:
              if (ModifyPriceLevel == null) {
                ModifyPriceLevel = new global::Org.Openfeed.ModifyPriceLevel();
              }
              ModifyPriceLevel.MergeFrom(other.ModifyPriceLevel);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Org.Openfeed.AddPriceLevel subBuilder = new global::Org.Openfeed.AddPriceLevel();
                if (dataCase_ == DataOneofCase.AddPriceLevel) {
                  subBuilder.MergeFrom(AddPriceLevel);
                }
                input.ReadMessage(subBuilder);
                AddPriceLevel = subBuilder;
                break;
              }
              case 18: {
                global::Org.Openfeed.DeletePriceLevel subBuilder = new global::Org.Openfeed.DeletePriceLevel();
                if (dataCase_ == DataOneofCase.DeletePriceLevel) {
                  subBuilder.MergeFrom(DeletePriceLevel);
                }
                input.ReadMessage(subBuilder);
                DeletePriceLevel = subBuilder;
                break;
              }
              case 26: {
                global::Org.Openfeed.ModifyPriceLevel subBuilder = new global::Org.Openfeed.ModifyPriceLevel();
                if (dataCase_ == DataOneofCase.ModifyPriceLevel) {
                  subBuilder.MergeFrom(ModifyPriceLevel);
                }
                input.ReadMessage(subBuilder);
                ModifyPriceLevel = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  // <summary>
  // Depth By Order
  // </summary>
  public sealed partial class DepthOrder : pb::IMessage<DepthOrder> {
    private static readonly pb::MessageParser<DepthOrder> _parser = new pb::MessageParser<DepthOrder>(() => new DepthOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthOrder(DepthOrder other) : this() {
      orders_ = other.orders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthOrder Clone() {
      return new DepthOrder(this);
    }

    // <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Openfeed.DepthOrder.Types.Entry> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.DepthOrder.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.DepthOrder.Types.Entry> orders_ = new pbc::RepeatedField<global::Org.Openfeed.DepthOrder.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.DepthOrder.Types.Entry> Orders {
      get { return orders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orders_.Equals(other.orders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orders_.WriteTo(output, _repeated_orders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthOrder other) {
      if (other == null) {
        return;
      }
      orders_.Add(other.orders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the DepthOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.DepthOrder.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          switch (other.DataCase) {
            case DataOneofCase.AddOrder:
              AddOrder = other.AddOrder.Clone();
              break;
            case DataOneofCase.DeleteOrder:
              DeleteOrder = other.DeleteOrder.Clone();
              break;
            case DataOneofCase.ModifyOrder:
              ModifyOrder = other.ModifyOrder.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        // <summary>Field number for the "addOrder" field.</summary>
        public const int AddOrderFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.AddOrder AddOrder {
          get { return dataCase_ == DataOneofCase.AddOrder ? (global::Org.Openfeed.AddOrder) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.AddOrder;
          }
        }

        // <summary>Field number for the "deleteOrder" field.</summary>
        public const int DeleteOrderFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.DeleteOrder DeleteOrder {
          get { return dataCase_ == DataOneofCase.DeleteOrder ? (global::Org.Openfeed.DeleteOrder) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeleteOrder;
          }
        }

        // <summary>Field number for the "modifyOrder" field.</summary>
        public const int ModifyOrderFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.ModifyOrder ModifyOrder {
          get { return dataCase_ == DataOneofCase.ModifyOrder ? (global::Org.Openfeed.ModifyOrder) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ModifyOrder;
          }
        }

        private object data_;
        // <summary>Enum of possible cases for the "data" oneof.</summary>
        public enum DataOneofCase {
          None = 0,
          AddOrder = 1,
          DeleteOrder = 2,
          ModifyOrder = 3,
        }
        private DataOneofCase dataCase_ = DataOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataOneofCase DataCase {
          get { return dataCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          dataCase_ = DataOneofCase.None;
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AddOrder, other.AddOrder)) return false;
          if (!object.Equals(DeleteOrder, other.DeleteOrder)) return false;
          if (!object.Equals(ModifyOrder, other.ModifyOrder)) return false;
          if (DataCase != other.DataCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataCase_ == DataOneofCase.AddOrder) hash ^= AddOrder.GetHashCode();
          if (dataCase_ == DataOneofCase.DeleteOrder) hash ^= DeleteOrder.GetHashCode();
          if (dataCase_ == DataOneofCase.ModifyOrder) hash ^= ModifyOrder.GetHashCode();
          hash ^= (int) dataCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataCase_ == DataOneofCase.AddOrder) {
            output.WriteRawTag(10);
            output.WriteMessage(AddOrder);
          }
          if (dataCase_ == DataOneofCase.DeleteOrder) {
            output.WriteRawTag(18);
            output.WriteMessage(DeleteOrder);
          }
          if (dataCase_ == DataOneofCase.ModifyOrder) {
            output.WriteRawTag(26);
            output.WriteMessage(ModifyOrder);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataCase_ == DataOneofCase.AddOrder) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddOrder);
          }
          if (dataCase_ == DataOneofCase.DeleteOrder) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteOrder);
          }
          if (dataCase_ == DataOneofCase.ModifyOrder) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyOrder);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          switch (other.DataCase) {
            case DataOneofCase.AddOrder:
              if (AddOrder == null) {
                AddOrder = new global::Org.Openfeed.AddOrder();
              }
              AddOrder.MergeFrom(other.AddOrder);
              break;
            case DataOneofCase.DeleteOrder:
              if (DeleteOrder == null) {
                DeleteOrder = new global::Org.Openfeed.DeleteOrder();
              }
              DeleteOrder.MergeFrom(other.DeleteOrder);
              break;
            case DataOneofCase.ModifyOrder:
              if (ModifyOrder == null) {
                ModifyOrder = new global::Org.Openfeed.ModifyOrder();
              }
              ModifyOrder.MergeFrom(other.ModifyOrder);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Org.Openfeed.AddOrder subBuilder = new global::Org.Openfeed.AddOrder();
                if (dataCase_ == DataOneofCase.AddOrder) {
                  subBuilder.MergeFrom(AddOrder);
                }
                input.ReadMessage(subBuilder);
                AddOrder = subBuilder;
                break;
              }
              case 18: {
                global::Org.Openfeed.DeleteOrder subBuilder = new global::Org.Openfeed.DeleteOrder();
                if (dataCase_ == DataOneofCase.DeleteOrder) {
                  subBuilder.MergeFrom(DeleteOrder);
                }
                input.ReadMessage(subBuilder);
                DeleteOrder = subBuilder;
                break;
              }
              case 26: {
                global::Org.Openfeed.ModifyOrder subBuilder = new global::Org.Openfeed.ModifyOrder();
                if (dataCase_ == DataOneofCase.ModifyOrder) {
                  subBuilder.MergeFrom(ModifyOrder);
                }
                input.ReadMessage(subBuilder);
                ModifyOrder = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  // <summary>
  // News or informational message
  // </summary>
  public sealed partial class News : pb::IMessage<News> {
    private static readonly pb::MessageParser<News> _parser = new pb::MessageParser<News>(() => new News());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<News> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public News() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public News(News other) : this() {
      originationTime_ = other.originationTime_;
      source_ = other.source_;
      languageCode_ = other.languageCode_;
      headLine_ = other.headLine_;
      text_ = other.text_;
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public News Clone() {
      return new News(this);
    }

    // <summary>Field number for the "originationTime" field.</summary>
    public const int OriginationTimeFieldNumber = 1;
    private long originationTime_;
    // <summary>
    // Origination time = UTC timestamp nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OriginationTime {
      get { return originationTime_; }
      set {
        originationTime_ = value;
      }
    }

    // <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "languageCode" field.</summary>
    public const int LanguageCodeFieldNumber = 3;
    private string languageCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "headLine" field.</summary>
    public const int HeadLineFieldNumber = 4;
    private string headLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadLine {
      get { return headLine_; }
      set {
        headLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_symbols_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> symbols_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as News);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(News other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginationTime != other.OriginationTime) return false;
      if (Source != other.Source) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (HeadLine != other.HeadLine) return false;
      if (Text != other.Text) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginationTime != 0L) hash ^= OriginationTime.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (HeadLine.Length != 0) hash ^= HeadLine.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginationTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(OriginationTime);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (HeadLine.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadLine);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OriginationTime);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (HeadLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadLine);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(News other) {
      if (other == null) {
        return;
      }
      if (other.OriginationTime != 0L) {
        OriginationTime = other.OriginationTime;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      if (other.HeadLine.Length != 0) {
        HeadLine = other.HeadLine;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginationTime = input.ReadSInt64();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
          case 34: {
            HeadLine = input.ReadString();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
          case 50: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Clear all data from the order books that are configured for this market.
  // </summary>
  public sealed partial class ClearBook : pb::IMessage<ClearBook> {
    private static readonly pb::MessageParser<ClearBook> _parser = new pb::MessageParser<ClearBook>(() => new ClearBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBook(ClearBook other) : this() {
      reserved_ = other.reserved_;
      transactionTime_ = other.transactionTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBook Clone() {
      return new ClearBook(this);
    }

    // <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 1;
    private int reserved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved {
      get { return reserved_; }
      set {
        reserved_ = value;
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 2;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reserved != other.Reserved) return false;
      if (TransactionTime != other.TransactionTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reserved != 0) hash ^= Reserved.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reserved != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Reserved);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TransactionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Reserved);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBook other) {
      if (other == null) {
        return;
      }
      if (other.Reserved != 0) {
        Reserved = other.Reserved;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reserved = input.ReadSInt32();
            break;
          }
          case 16: {
            TransactionTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  //
  // Instrument Status
  // </summary>
  public sealed partial class InstrumentStatus : pb::IMessage<InstrumentStatus> {
    private static readonly pb::MessageParser<InstrumentStatus> _parser = new pb::MessageParser<InstrumentStatus>(() => new InstrumentStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus(InstrumentStatus other) : this() {
      transactionTime_ = other.transactionTime_;
      tradingStatus_ = other.tradingStatus_;
      openingTime_ = other.openingTime_;
      note_ = other.note_;
      tradeDate_ = other.tradeDate_;
      regulationSHOShortSalePriceTest_ = other.regulationSHOShortSalePriceTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus Clone() {
      return new InstrumentStatus(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradingStatus" field.</summary>
    public const int TradingStatusFieldNumber = 10;
    private global::Org.Openfeed.InstrumentTradingStatus tradingStatus_ = global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    // <summary>Field number for the "openingTime" field.</summary>
    public const int OpeningTimeFieldNumber = 11;
    private long openingTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpeningTime {
      get { return openingTime_; }
      set {
        openingTime_ = value;
      }
    }

    // <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 12;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 13;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "regulationSHOShortSalePriceTest" field.</summary>
    public const int RegulationSHOShortSalePriceTestFieldNumber = 14;
    private global::Org.Openfeed.RegulationSHOShortSalePriceTest regulationSHOShortSalePriceTest_ = global::Org.Openfeed.RegulationSHOShortSalePriceTest.UnknownPriceTest;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.RegulationSHOShortSalePriceTest RegulationSHOShortSalePriceTest {
      get { return regulationSHOShortSalePriceTest_; }
      set {
        regulationSHOShortSalePriceTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OpeningTime != other.OpeningTime) return false;
      if (Note != other.Note) return false;
      if (TradeDate != other.TradeDate) return false;
      if (RegulationSHOShortSalePriceTest != other.RegulationSHOShortSalePriceTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) hash ^= TradingStatus.GetHashCode();
      if (OpeningTime != 0L) hash ^= OpeningTime.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (RegulationSHOShortSalePriceTest != global::Org.Openfeed.RegulationSHOShortSalePriceTest.UnknownPriceTest) hash ^= RegulationSHOShortSalePriceTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TradingStatus);
      }
      if (OpeningTime != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(OpeningTime);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Note);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(TradeDate);
      }
      if (RegulationSHOShortSalePriceTest != global::Org.Openfeed.RegulationSHOShortSalePriceTest.UnknownPriceTest) {
        output.WriteRawTag(112);
        output.WriteEnum((int) RegulationSHOShortSalePriceTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OpeningTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OpeningTime);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (RegulationSHOShortSalePriceTest != global::Org.Openfeed.RegulationSHOShortSalePriceTest.UnknownPriceTest) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegulationSHOShortSalePriceTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentStatus other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradingStatus != global::Org.Openfeed.InstrumentTradingStatus.UnknownTradingStatus) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OpeningTime != 0L) {
        OpeningTime = other.OpeningTime;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.RegulationSHOShortSalePriceTest != global::Org.Openfeed.RegulationSHOShortSalePriceTest.UnknownPriceTest) {
        RegulationSHOShortSalePriceTest = other.RegulationSHOShortSalePriceTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradingStatus = (global::Org.Openfeed.InstrumentTradingStatus) input.ReadEnum();
            break;
          }
          case 88: {
            OpeningTime = input.ReadSInt64();
            break;
          }
          case 98: {
            Note = input.ReadString();
            break;
          }
          case 104: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 112: {
            RegulationSHOShortSalePriceTest = (global::Org.Openfeed.RegulationSHOShortSalePriceTest) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Best Bid and Offer.
  // If a side is not present, then that side has been deleted.
  // By default this value is the NBBO, if regional/participant quote then regional = true
  // </summary>
  public sealed partial class BestBidOffer : pb::IMessage<BestBidOffer> {
    private static readonly pb::MessageParser<BestBidOffer> _parser = new pb::MessageParser<BestBidOffer>(() => new BestBidOffer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BestBidOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestBidOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestBidOffer(BestBidOffer other) : this() {
      transactionTime_ = other.transactionTime_;
      bidPrice_ = other.bidPrice_;
      bidQuantity_ = other.bidQuantity_;
      bidOrderCount_ = other.bidOrderCount_;
      bidOriginator_ = other.bidOriginator_;
      bidQuoteCondition_ = other.bidQuoteCondition_;
      offerPrice_ = other.offerPrice_;
      offerQuantity_ = other.offerQuantity_;
      offerOrderCount_ = other.offerOrderCount_;
      offerOriginator_ = other.offerOriginator_;
      offerQuoteCondition_ = other.offerQuoteCondition_;
      quoteCondition_ = other.quoteCondition_;
      regional_ = other.regional_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestBidOffer Clone() {
      return new BestBidOffer(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "bidPrice" field.</summary>
    public const int BidPriceFieldNumber = 10;
    private long bidPrice_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    // <summary>Field number for the "bidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 11;
    private long bidQuantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    // <summary>Field number for the "bidOrderCount" field.</summary>
    public const int BidOrderCountFieldNumber = 12;
    private int bidOrderCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidOrderCount {
      get { return bidOrderCount_; }
      set {
        bidOrderCount_ = value;
      }
    }

    // <summary>Field number for the "bidOriginator" field.</summary>
    public const int BidOriginatorFieldNumber = 13;
    private pb::ByteString bidOriginator_ = pb::ByteString.Empty;
    // <summary>
    // Liquidity provider information
    // For Forex: BANK:CITY
    // For Equities: EXCHANGE_MIC
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BidOriginator {
      get { return bidOriginator_; }
      set {
        bidOriginator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "bidQuoteCondition" field.</summary>
    public const int BidQuoteConditionFieldNumber = 14;
    private pb::ByteString bidQuoteCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BidQuoteCondition {
      get { return bidQuoteCondition_; }
      set {
        bidQuoteCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "offerPrice" field.</summary>
    public const int OfferPriceFieldNumber = 20;
    private long offerPrice_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferPrice {
      get { return offerPrice_; }
      set {
        offerPrice_ = value;
      }
    }

    // <summary>Field number for the "offerQuantity" field.</summary>
    public const int OfferQuantityFieldNumber = 21;
    private long offerQuantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferQuantity {
      get { return offerQuantity_; }
      set {
        offerQuantity_ = value;
      }
    }

    // <summary>Field number for the "offerOrderCount" field.</summary>
    public const int OfferOrderCountFieldNumber = 22;
    private int offerOrderCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfferOrderCount {
      get { return offerOrderCount_; }
      set {
        offerOrderCount_ = value;
      }
    }

    // <summary>Field number for the "offerOriginator" field.</summary>
    public const int OfferOriginatorFieldNumber = 23;
    private pb::ByteString offerOriginator_ = pb::ByteString.Empty;
    // <summary>
    // Liquidity provider information
    // For Forex: BANK:CITY
    // For Equities: EXCHANGE_MIC
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OfferOriginator {
      get { return offerOriginator_; }
      set {
        offerOriginator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "offerQuoteCondition" field.</summary>
    public const int OfferQuoteConditionFieldNumber = 24;
    private pb::ByteString offerQuoteCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OfferQuoteCondition {
      get { return offerQuoteCondition_; }
      set {
        offerQuoteCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "quoteCondition" field.</summary>
    public const int QuoteConditionFieldNumber = 30;
    private pb::ByteString quoteCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString QuoteCondition {
      get { return quoteCondition_; }
      set {
        quoteCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "regional" field.</summary>
    public const int RegionalFieldNumber = 32;
    private bool regional_;
    // <summary>
    // True if regional/participant member quote
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Regional {
      get { return regional_; }
      set {
        regional_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BestBidOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BestBidOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (BidPrice != other.BidPrice) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if (BidOrderCount != other.BidOrderCount) return false;
      if (BidOriginator != other.BidOriginator) return false;
      if (BidQuoteCondition != other.BidQuoteCondition) return false;
      if (OfferPrice != other.OfferPrice) return false;
      if (OfferQuantity != other.OfferQuantity) return false;
      if (OfferOrderCount != other.OfferOrderCount) return false;
      if (OfferOriginator != other.OfferOriginator) return false;
      if (OfferQuoteCondition != other.OfferQuoteCondition) return false;
      if (QuoteCondition != other.QuoteCondition) return false;
      if (Regional != other.Regional) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (BidPrice != 0L) hash ^= BidPrice.GetHashCode();
      if (BidQuantity != 0L) hash ^= BidQuantity.GetHashCode();
      if (BidOrderCount != 0) hash ^= BidOrderCount.GetHashCode();
      if (BidOriginator.Length != 0) hash ^= BidOriginator.GetHashCode();
      if (BidQuoteCondition.Length != 0) hash ^= BidQuoteCondition.GetHashCode();
      if (OfferPrice != 0L) hash ^= OfferPrice.GetHashCode();
      if (OfferQuantity != 0L) hash ^= OfferQuantity.GetHashCode();
      if (OfferOrderCount != 0) hash ^= OfferOrderCount.GetHashCode();
      if (OfferOriginator.Length != 0) hash ^= OfferOriginator.GetHashCode();
      if (OfferQuoteCondition.Length != 0) hash ^= OfferQuoteCondition.GetHashCode();
      if (QuoteCondition.Length != 0) hash ^= QuoteCondition.GetHashCode();
      if (Regional != false) hash ^= Regional.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (BidPrice != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(BidPrice);
      }
      if (BidQuantity != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(BidQuantity);
      }
      if (BidOrderCount != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(BidOrderCount);
      }
      if (BidOriginator.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(BidOriginator);
      }
      if (BidQuoteCondition.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(BidQuoteCondition);
      }
      if (OfferPrice != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(OfferPrice);
      }
      if (OfferQuantity != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(OfferQuantity);
      }
      if (OfferOrderCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(OfferOrderCount);
      }
      if (OfferOriginator.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(OfferOriginator);
      }
      if (OfferQuoteCondition.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(OfferQuoteCondition);
      }
      if (QuoteCondition.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(QuoteCondition);
      }
      if (Regional != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(Regional);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (BidPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BidPrice);
      }
      if (BidQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BidQuantity);
      }
      if (BidOrderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BidOrderCount);
      }
      if (BidOriginator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BidOriginator);
      }
      if (BidQuoteCondition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BidQuoteCondition);
      }
      if (OfferPrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OfferPrice);
      }
      if (OfferQuantity != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OfferQuantity);
      }
      if (OfferOrderCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OfferOrderCount);
      }
      if (OfferOriginator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OfferOriginator);
      }
      if (OfferQuoteCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OfferQuoteCondition);
      }
      if (QuoteCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(QuoteCondition);
      }
      if (Regional != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BestBidOffer other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.BidPrice != 0L) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuantity != 0L) {
        BidQuantity = other.BidQuantity;
      }
      if (other.BidOrderCount != 0) {
        BidOrderCount = other.BidOrderCount;
      }
      if (other.BidOriginator.Length != 0) {
        BidOriginator = other.BidOriginator;
      }
      if (other.BidQuoteCondition.Length != 0) {
        BidQuoteCondition = other.BidQuoteCondition;
      }
      if (other.OfferPrice != 0L) {
        OfferPrice = other.OfferPrice;
      }
      if (other.OfferQuantity != 0L) {
        OfferQuantity = other.OfferQuantity;
      }
      if (other.OfferOrderCount != 0) {
        OfferOrderCount = other.OfferOrderCount;
      }
      if (other.OfferOriginator.Length != 0) {
        OfferOriginator = other.OfferOriginator;
      }
      if (other.OfferQuoteCondition.Length != 0) {
        OfferQuoteCondition = other.OfferQuoteCondition;
      }
      if (other.QuoteCondition.Length != 0) {
        QuoteCondition = other.QuoteCondition;
      }
      if (other.Regional != false) {
        Regional = other.Regional;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            BidPrice = input.ReadSInt64();
            break;
          }
          case 88: {
            BidQuantity = input.ReadSInt64();
            break;
          }
          case 96: {
            BidOrderCount = input.ReadSInt32();
            break;
          }
          case 106: {
            BidOriginator = input.ReadBytes();
            break;
          }
          case 114: {
            BidQuoteCondition = input.ReadBytes();
            break;
          }
          case 160: {
            OfferPrice = input.ReadSInt64();
            break;
          }
          case 168: {
            OfferQuantity = input.ReadSInt64();
            break;
          }
          case 176: {
            OfferOrderCount = input.ReadSInt32();
            break;
          }
          case 186: {
            OfferOriginator = input.ReadBytes();
            break;
          }
          case 194: {
            OfferQuoteCondition = input.ReadBytes();
            break;
          }
          case 242: {
            QuoteCondition = input.ReadBytes();
            break;
          }
          case 256: {
            Regional = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Insert a new price level, pushing existing levels down
  // </summary>
  public sealed partial class AddPriceLevel : pb::IMessage<AddPriceLevel> {
    private static readonly pb::MessageParser<AddPriceLevel> _parser = new pb::MessageParser<AddPriceLevel>(() => new AddPriceLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPriceLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPriceLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPriceLevel(AddPriceLevel other) : this() {
      transactionTime_ = other.transactionTime_;
      level_ = other.level_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      orderCount_ = other.orderCount_;
      impliedQuantity_ = other.impliedQuantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPriceLevel Clone() {
      return new AddPriceLevel(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private int level_;
    // <summary>
    // price level index, starting at 1
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 12;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 13;
    private long quantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "orderCount" field.</summary>
    public const int OrderCountFieldNumber = 14;
    private int orderCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCount {
      get { return orderCount_; }
      set {
        orderCount_ = value;
      }
    }

    // <summary>Field number for the "impliedQuantity" field.</summary>
    public const int ImpliedQuantityFieldNumber = 15;
    private long impliedQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImpliedQuantity {
      get { return impliedQuantity_; }
      set {
        impliedQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPriceLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPriceLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Level != other.Level) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (OrderCount != other.OrderCount) return false;
      if (ImpliedQuantity != other.ImpliedQuantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (OrderCount != 0) hash ^= OrderCount.GetHashCode();
      if (ImpliedQuantity != 0L) hash ^= ImpliedQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (Price != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Quantity);
      }
      if (OrderCount != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(OrderCount);
      }
      if (ImpliedQuantity != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(ImpliedQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (OrderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OrderCount);
      }
      if (ImpliedQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ImpliedQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPriceLevel other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.OrderCount != 0) {
        OrderCount = other.OrderCount;
      }
      if (other.ImpliedQuantity != 0L) {
        ImpliedQuantity = other.ImpliedQuantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Level = input.ReadSInt32();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 96: {
            Price = input.ReadSInt64();
            break;
          }
          case 104: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 112: {
            OrderCount = input.ReadSInt32();
            break;
          }
          case 120: {
            ImpliedQuantity = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Delete an existing price level, pulling existing levels up
  // </summary>
  public sealed partial class DeletePriceLevel : pb::IMessage<DeletePriceLevel> {
    private static readonly pb::MessageParser<DeletePriceLevel> _parser = new pb::MessageParser<DeletePriceLevel>(() => new DeletePriceLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePriceLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePriceLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePriceLevel(DeletePriceLevel other) : this() {
      transactionTime_ = other.transactionTime_;
      level_ = other.level_;
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePriceLevel Clone() {
      return new DeletePriceLevel(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private int level_;
    // <summary>
    // price level index, starting at 1
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePriceLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePriceLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Level != other.Level) return false;
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePriceLevel other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Level = input.ReadSInt32();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Modify the quantity or orderCount of an existing price level.
  // The price itself will not change.
  // </summary>
  public sealed partial class ModifyPriceLevel : pb::IMessage<ModifyPriceLevel> {
    private static readonly pb::MessageParser<ModifyPriceLevel> _parser = new pb::MessageParser<ModifyPriceLevel>(() => new ModifyPriceLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyPriceLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPriceLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPriceLevel(ModifyPriceLevel other) : this() {
      transactionTime_ = other.transactionTime_;
      level_ = other.level_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      orderCount_ = other.orderCount_;
      impliedQuantity_ = other.impliedQuantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPriceLevel Clone() {
      return new ModifyPriceLevel(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private int level_;
    // <summary>
    // price level index, starting at 1
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 12;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 13;
    private long quantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "orderCount" field.</summary>
    public const int OrderCountFieldNumber = 14;
    private int orderCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCount {
      get { return orderCount_; }
      set {
        orderCount_ = value;
      }
    }

    // <summary>Field number for the "impliedQuantity" field.</summary>
    public const int ImpliedQuantityFieldNumber = 15;
    private long impliedQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImpliedQuantity {
      get { return impliedQuantity_; }
      set {
        impliedQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyPriceLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyPriceLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Level != other.Level) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (OrderCount != other.OrderCount) return false;
      if (ImpliedQuantity != other.ImpliedQuantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (OrderCount != 0) hash ^= OrderCount.GetHashCode();
      if (ImpliedQuantity != 0L) hash ^= ImpliedQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (Price != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Quantity);
      }
      if (OrderCount != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(OrderCount);
      }
      if (ImpliedQuantity != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(ImpliedQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Level);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (OrderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OrderCount);
      }
      if (ImpliedQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ImpliedQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyPriceLevel other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.OrderCount != 0) {
        OrderCount = other.OrderCount;
      }
      if (other.ImpliedQuantity != 0L) {
        ImpliedQuantity = other.ImpliedQuantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Level = input.ReadSInt32();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 96: {
            Price = input.ReadSInt64();
            break;
          }
          case 104: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 112: {
            OrderCount = input.ReadSInt32();
            break;
          }
          case 120: {
            ImpliedQuantity = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Add an order to the order book.  Indexed by orderId, which is unique per channel
  // </summary>
  public sealed partial class AddOrder : pb::IMessage<AddOrder> {
    private static readonly pb::MessageParser<AddOrder> _parser = new pb::MessageParser<AddOrder>(() => new AddOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrder(AddOrder other) : this() {
      transactionTime_ = other.transactionTime_;
      orderId_ = other.orderId_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      isImplied_ = other.isImplied_;
      priority_ = other.priority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrder Clone() {
      return new AddOrder(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 10;
    private long orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 12;
    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 13;
    private long quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "isImplied" field.</summary>
    public const int IsImpliedFieldNumber = 14;
    private bool isImplied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImplied {
      get { return isImplied_; }
      set {
        isImplied_ = value;
      }
    }

    // <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 15;
    private long priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (OrderId != other.OrderId) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (IsImplied != other.IsImplied) return false;
      if (Priority != other.Priority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (OrderId != 0L) hash ^= OrderId.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (IsImplied != false) hash ^= IsImplied.GetHashCode();
      if (Priority != 0L) hash ^= Priority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (OrderId != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (Price != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Quantity);
      }
      if (IsImplied != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsImplied);
      }
      if (Priority != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(Priority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (OrderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (IsImplied != false) {
        size += 1 + 1;
      }
      if (Priority != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Priority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddOrder other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.OrderId != 0L) {
        OrderId = other.OrderId;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.IsImplied != false) {
        IsImplied = other.IsImplied;
      }
      if (other.Priority != 0L) {
        Priority = other.Priority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            OrderId = input.ReadSInt64();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 96: {
            Price = input.ReadSInt64();
            break;
          }
          case 104: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 112: {
            IsImplied = input.ReadBool();
            break;
          }
          case 120: {
            Priority = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Delete an order from the order book. Indexed by orderId, which is unique per channel
  // </summary>
  public sealed partial class DeleteOrder : pb::IMessage<DeleteOrder> {
    private static readonly pb::MessageParser<DeleteOrder> _parser = new pb::MessageParser<DeleteOrder>(() => new DeleteOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOrder(DeleteOrder other) : this() {
      transactionTime_ = other.transactionTime_;
      orderId_ = other.orderId_;
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOrder Clone() {
      return new DeleteOrder(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 10;
    private long orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (OrderId != other.OrderId) return false;
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (OrderId != 0L) hash ^= OrderId.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (OrderId != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (OrderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteOrder other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.OrderId != 0L) {
        OrderId = other.OrderId;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            OrderId = input.ReadSInt64();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Modify the price or quantity of an order.  The side and implied flag cannot change 
  // </summary>
  public sealed partial class ModifyOrder : pb::IMessage<ModifyOrder> {
    private static readonly pb::MessageParser<ModifyOrder> _parser = new pb::MessageParser<ModifyOrder>(() => new ModifyOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder(ModifyOrder other) : this() {
      transactionTime_ = other.transactionTime_;
      orderId_ = other.orderId_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      isImplied_ = other.isImplied_;
      priority_ = other.priority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder Clone() {
      return new ModifyOrder(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 10;
    private long orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 11;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 12;
    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 13;
    private long quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "isImplied" field.</summary>
    public const int IsImpliedFieldNumber = 14;
    private bool isImplied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImplied {
      get { return isImplied_; }
      set {
        isImplied_ = value;
      }
    }

    // <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 15;
    private long priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (OrderId != other.OrderId) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (IsImplied != other.IsImplied) return false;
      if (Priority != other.Priority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (OrderId != 0L) hash ^= OrderId.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (IsImplied != false) hash ^= IsImplied.GetHashCode();
      if (Priority != 0L) hash ^= Priority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (OrderId != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Side);
      }
      if (Price != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Quantity);
      }
      if (IsImplied != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsImplied);
      }
      if (Priority != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(Priority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (OrderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OrderId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (IsImplied != false) {
        size += 1 + 1;
      }
      if (Priority != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Priority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyOrder other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.OrderId != 0L) {
        OrderId = other.OrderId;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.IsImplied != false) {
        IsImplied = other.IsImplied;
      }
      if (other.Priority != 0L) {
        Priority = other.Priority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            OrderId = input.ReadSInt64();
            break;
          }
          case 88: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 96: {
            Price = input.ReadSInt64();
            break;
          }
          case 104: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 112: {
            IsImplied = input.ReadBool();
            break;
          }
          case 120: {
            Priority = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // For non-tradable index products
  // </summary>
  public sealed partial class IndexValue : pb::IMessage<IndexValue> {
    private static readonly pb::MessageParser<IndexValue> _parser = new pb::MessageParser<IndexValue>(() => new IndexValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndexValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexValue(IndexValue other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      last_ = other.last_;
      volume_ = other.volume_;
      open_ = other.open_;
      settlementOpen_ = other.settlementOpen_;
      specialOpen_ = other.specialOpen_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      bid_ = other.bid_;
      offer_ = other.offer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexValue Clone() {
      return new IndexValue(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 11;
    private long last_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 12;
    private long volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 13;
    private long open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    // <summary>Field number for the "settlementOpen" field.</summary>
    public const int SettlementOpenFieldNumber = 14;
    private long settlementOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettlementOpen {
      get { return settlementOpen_; }
      set {
        settlementOpen_ = value;
      }
    }

    // <summary>Field number for the "specialOpen" field.</summary>
    public const int SpecialOpenFieldNumber = 15;
    private long specialOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpecialOpen {
      get { return specialOpen_; }
      set {
        specialOpen_ = value;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 16;
    private long high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 17;
    private long low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    // <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 18;
    private long close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    // <summary>Field number for the "bid" field.</summary>
    public const int BidFieldNumber = 19;
    private long bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    // <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 20;
    private long offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndexValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndexValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Last != other.Last) return false;
      if (Volume != other.Volume) return false;
      if (Open != other.Open) return false;
      if (SettlementOpen != other.SettlementOpen) return false;
      if (SpecialOpen != other.SpecialOpen) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Close != other.Close) return false;
      if (Bid != other.Bid) return false;
      if (Offer != other.Offer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Last != 0L) hash ^= Last.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Open != 0L) hash ^= Open.GetHashCode();
      if (SettlementOpen != 0L) hash ^= SettlementOpen.GetHashCode();
      if (SpecialOpen != 0L) hash ^= SpecialOpen.GetHashCode();
      if (High != 0L) hash ^= High.GetHashCode();
      if (Low != 0L) hash ^= Low.GetHashCode();
      if (Close != 0L) hash ^= Close.GetHashCode();
      if (Bid != 0L) hash ^= Bid.GetHashCode();
      if (Offer != 0L) hash ^= Offer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Last != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Last);
      }
      if (Volume != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Volume);
      }
      if (Open != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Open);
      }
      if (SettlementOpen != 0L) {
        output.WriteRawTag(112);
        output.WriteSInt64(SettlementOpen);
      }
      if (SpecialOpen != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(SpecialOpen);
      }
      if (High != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(High);
      }
      if (Low != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(Low);
      }
      if (Close != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteSInt64(Close);
      }
      if (Bid != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteSInt64(Bid);
      }
      if (Offer != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(Offer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Last != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Last);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Volume);
      }
      if (Open != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Open);
      }
      if (SettlementOpen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SettlementOpen);
      }
      if (SpecialOpen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SpecialOpen);
      }
      if (High != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(High);
      }
      if (Low != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Low);
      }
      if (Close != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Close);
      }
      if (Bid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Bid);
      }
      if (Offer != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Offer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndexValue other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Last != 0L) {
        Last = other.Last;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Open != 0L) {
        Open = other.Open;
      }
      if (other.SettlementOpen != 0L) {
        SettlementOpen = other.SettlementOpen;
      }
      if (other.SpecialOpen != 0L) {
        SpecialOpen = other.SpecialOpen;
      }
      if (other.High != 0L) {
        High = other.High;
      }
      if (other.Low != 0L) {
        Low = other.Low;
      }
      if (other.Close != 0L) {
        Close = other.Close;
      }
      if (other.Bid != 0L) {
        Bid = other.Bid;
      }
      if (other.Offer != 0L) {
        Offer = other.Offer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Last = input.ReadSInt64();
            break;
          }
          case 96: {
            Volume = input.ReadSInt64();
            break;
          }
          case 104: {
            Open = input.ReadSInt64();
            break;
          }
          case 112: {
            SettlementOpen = input.ReadSInt64();
            break;
          }
          case 120: {
            SpecialOpen = input.ReadSInt64();
            break;
          }
          case 128: {
            High = input.ReadSInt64();
            break;
          }
          case 136: {
            Low = input.ReadSInt64();
            break;
          }
          case 144: {
            Close = input.ReadSInt64();
            break;
          }
          case 152: {
            Bid = input.ReadSInt64();
            break;
          }
          case 160: {
            Offer = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Trades
  // </summary>
  public sealed partial class Trades : pb::IMessage<Trades> {
    private static readonly pb::MessageParser<Trades> _parser = new pb::MessageParser<Trades>(() => new Trades());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades(Trades other) : this() {
      trades_ = other.trades_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades Clone() {
      return new Trades(this);
    }

    // <summary>Field number for the "trades" field.</summary>
    public const int Trades_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Openfeed.Trades.Types.Entry> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.Trades.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.Trades.Types.Entry> trades_ = new pbc::RepeatedField<global::Org.Openfeed.Trades.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.Trades.Types.Entry> Trades_ {
      get { return trades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trades_.WriteTo(output, _repeated_trades_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trades other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the Trades message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.Trades.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          switch (other.DataCase) {
            case DataOneofCase.Trade:
              Trade = other.Trade.Clone();
              break;
            case DataOneofCase.TradeCorrection:
              TradeCorrection = other.TradeCorrection.Clone();
              break;
            case DataOneofCase.TradeCancel:
              TradeCancel = other.TradeCancel.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        // <summary>Field number for the "trade" field.</summary>
        public const int TradeFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.Trade Trade {
          get { return dataCase_ == DataOneofCase.Trade ? (global::Org.Openfeed.Trade) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Trade;
          }
        }

        // <summary>Field number for the "tradeCorrection" field.</summary>
        public const int TradeCorrectionFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.TradeCorrection TradeCorrection {
          get { return dataCase_ == DataOneofCase.TradeCorrection ? (global::Org.Openfeed.TradeCorrection) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.TradeCorrection;
          }
        }

        // <summary>Field number for the "tradeCancel" field.</summary>
        public const int TradeCancelFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Org.Openfeed.TradeCancel TradeCancel {
          get { return dataCase_ == DataOneofCase.TradeCancel ? (global::Org.Openfeed.TradeCancel) data_ : null; }
          set {
            data_ = value;
            dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.TradeCancel;
          }
        }

        private object data_;
        // <summary>Enum of possible cases for the "data" oneof.</summary>
        public enum DataOneofCase {
          None = 0,
          Trade = 1,
          TradeCorrection = 2,
          TradeCancel = 3,
        }
        private DataOneofCase dataCase_ = DataOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataOneofCase DataCase {
          get { return dataCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          dataCase_ = DataOneofCase.None;
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Trade, other.Trade)) return false;
          if (!object.Equals(TradeCorrection, other.TradeCorrection)) return false;
          if (!object.Equals(TradeCancel, other.TradeCancel)) return false;
          if (DataCase != other.DataCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataCase_ == DataOneofCase.Trade) hash ^= Trade.GetHashCode();
          if (dataCase_ == DataOneofCase.TradeCorrection) hash ^= TradeCorrection.GetHashCode();
          if (dataCase_ == DataOneofCase.TradeCancel) hash ^= TradeCancel.GetHashCode();
          hash ^= (int) dataCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataCase_ == DataOneofCase.Trade) {
            output.WriteRawTag(10);
            output.WriteMessage(Trade);
          }
          if (dataCase_ == DataOneofCase.TradeCorrection) {
            output.WriteRawTag(18);
            output.WriteMessage(TradeCorrection);
          }
          if (dataCase_ == DataOneofCase.TradeCancel) {
            output.WriteRawTag(26);
            output.WriteMessage(TradeCancel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataCase_ == DataOneofCase.Trade) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trade);
          }
          if (dataCase_ == DataOneofCase.TradeCorrection) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeCorrection);
          }
          if (dataCase_ == DataOneofCase.TradeCancel) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeCancel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          switch (other.DataCase) {
            case DataOneofCase.Trade:
              if (Trade == null) {
                Trade = new global::Org.Openfeed.Trade();
              }
              Trade.MergeFrom(other.Trade);
              break;
            case DataOneofCase.TradeCorrection:
              if (TradeCorrection == null) {
                TradeCorrection = new global::Org.Openfeed.TradeCorrection();
              }
              TradeCorrection.MergeFrom(other.TradeCorrection);
              break;
            case DataOneofCase.TradeCancel:
              if (TradeCancel == null) {
                TradeCancel = new global::Org.Openfeed.TradeCancel();
              }
              TradeCancel.MergeFrom(other.TradeCancel);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Org.Openfeed.Trade subBuilder = new global::Org.Openfeed.Trade();
                if (dataCase_ == DataOneofCase.Trade) {
                  subBuilder.MergeFrom(Trade);
                }
                input.ReadMessage(subBuilder);
                Trade = subBuilder;
                break;
              }
              case 18: {
                global::Org.Openfeed.TradeCorrection subBuilder = new global::Org.Openfeed.TradeCorrection();
                if (dataCase_ == DataOneofCase.TradeCorrection) {
                  subBuilder.MergeFrom(TradeCorrection);
                }
                input.ReadMessage(subBuilder);
                TradeCorrection = subBuilder;
                break;
              }
              case 26: {
                global::Org.Openfeed.TradeCancel subBuilder = new global::Org.Openfeed.TradeCancel();
                if (dataCase_ == DataOneofCase.TradeCancel) {
                  subBuilder.MergeFrom(TradeCancel);
                }
                input.ReadMessage(subBuilder);
                TradeCancel = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  // <summary>
  // A live trade.  When received, update the "last" field
  // </summary>
  public sealed partial class Trade : pb::IMessage<Trade> {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade(Trade other) : this() {
      originatorId_ = other.originatorId_;
      transactionTime_ = other.transactionTime_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      tradeId_ = other.tradeId_;
      side_ = other.side_;
      tradeDate_ = other.tradeDate_;
      buyerId_ = other.buyerId_;
      sellerId_ = other.sellerId_;
      openingTrade_ = other.openingTrade_;
      systemPriced_ = other.systemPriced_;
      marketOnClose_ = other.marketOnClose_;
      oddLot_ = other.oddLot_;
      settlementTerms_ = other.settlementTerms_;
      crossType_ = other.crossType_;
      byPass_ = other.byPass_;
      lastPrice_ = other.lastPrice_;
      saleCondition_ = other.saleCondition_;
      currency_ = other.currency_;
      doesNotUpdateLast_ = other.doesNotUpdateLast_;
      doesNotUpdateVolume_ = other.doesNotUpdateVolume_;
      session_ = other.session_;
      blockTrade_ = other.blockTrade_;
      distributionTime_ = other.distributionTime_;
      transactionTime2_ = other.transactionTime2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade Clone() {
      return new Trade(this);
    }

    // <summary>Field number for the "originatorId" field.</summary>
    public const int OriginatorIdFieldNumber = 8;
    private pb::ByteString originatorId_ = pb::ByteString.Empty;
    // <summary>
    // Market participant/originator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginatorId {
      get { return originatorId_; }
      set {
        originatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 11;
    private long quantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "tradeId" field.</summary>
    public const int TradeIdFieldNumber = 12;
    private pb::ByteString tradeId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 13;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    // <summary>
    // The side of the aggressing order that caused the trade
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 14;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "buyerId" field.</summary>
    public const int BuyerIdFieldNumber = 15;
    private pb::ByteString buyerId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BuyerId {
      get { return buyerId_; }
      set {
        buyerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "sellerId" field.</summary>
    public const int SellerIdFieldNumber = 16;
    private pb::ByteString sellerId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SellerId {
      get { return sellerId_; }
      set {
        sellerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "openingTrade" field.</summary>
    public const int OpeningTradeFieldNumber = 17;
    private bool openingTrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpeningTrade {
      get { return openingTrade_; }
      set {
        openingTrade_ = value;
      }
    }

    // <summary>Field number for the "systemPriced" field.</summary>
    public const int SystemPricedFieldNumber = 18;
    private bool systemPriced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SystemPriced {
      get { return systemPriced_; }
      set {
        systemPriced_ = value;
      }
    }

    // <summary>Field number for the "marketOnClose" field.</summary>
    public const int MarketOnCloseFieldNumber = 19;
    private bool marketOnClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MarketOnClose {
      get { return marketOnClose_; }
      set {
        marketOnClose_ = value;
      }
    }

    // <summary>Field number for the "oddLot" field.</summary>
    public const int OddLotFieldNumber = 20;
    private bool oddLot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OddLot {
      get { return oddLot_; }
      set {
        oddLot_ = value;
      }
    }

    // <summary>Field number for the "settlementTerms" field.</summary>
    public const int SettlementTermsFieldNumber = 21;
    private global::Org.Openfeed.SettlementTerms settlementTerms_ = global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SettlementTerms SettlementTerms {
      get { return settlementTerms_; }
      set {
        settlementTerms_ = value;
      }
    }

    // <summary>Field number for the "crossType" field.</summary>
    public const int CrossTypeFieldNumber = 22;
    private global::Org.Openfeed.CrossType crossType_ = global::Org.Openfeed.CrossType.UnknownCrossType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.CrossType CrossType {
      get { return crossType_; }
      set {
        crossType_ = value;
      }
    }

    // <summary>Field number for the "byPass" field.</summary>
    public const int ByPassFieldNumber = 23;
    private bool byPass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByPass {
      get { return byPass_; }
      set {
        byPass_ = value;
      }
    }

    // <summary>Field number for the "lastPrice" field.</summary>
    public const int LastPriceFieldNumber = 24;
    private long lastPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    // <summary>Field number for the "saleCondition" field.</summary>
    public const int SaleConditionFieldNumber = 25;
    private pb::ByteString saleCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SaleCondition {
      get { return saleCondition_; }
      set {
        saleCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 26;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "doesNotUpdateLast" field.</summary>
    public const int DoesNotUpdateLastFieldNumber = 27;
    private bool doesNotUpdateLast_;
    // <summary>
    // Does not update Last
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoesNotUpdateLast {
      get { return doesNotUpdateLast_; }
      set {
        doesNotUpdateLast_ = value;
      }
    }

    // <summary>Field number for the "doesNotUpdateVolume" field.</summary>
    public const int DoesNotUpdateVolumeFieldNumber = 28;
    private bool doesNotUpdateVolume_;
    // <summary>
    // Does not update Volume
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoesNotUpdateVolume {
      get { return doesNotUpdateVolume_; }
      set {
        doesNotUpdateVolume_ = value;
      }
    }

    // <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 30;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "blockTrade" field.</summary>
    public const int BlockTradeFieldNumber = 31;
    private bool blockTrade_;
    // <summary>
    // Is this a block trade.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlockTrade {
      get { return blockTrade_; }
      set {
        blockTrade_ = value;
      }
    }

    // <summary>Field number for the "distributionTime" field.</summary>
    public const int DistributionTimeFieldNumber = 32;
    private long distributionTime_;
    // <summary>
    // Distribution time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributionTime {
      get { return distributionTime_; }
      set {
        distributionTime_ = value;
      }
    }

    // <summary>Field number for the "transactionTime2" field.</summary>
    public const int TransactionTime2FieldNumber = 33;
    private long transactionTime2_;
    // <summary>
    // time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime2 {
      get { return transactionTime2_; }
      set {
        transactionTime2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginatorId != other.OriginatorId) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (TradeId != other.TradeId) return false;
      if (Side != other.Side) return false;
      if (TradeDate != other.TradeDate) return false;
      if (BuyerId != other.BuyerId) return false;
      if (SellerId != other.SellerId) return false;
      if (OpeningTrade != other.OpeningTrade) return false;
      if (SystemPriced != other.SystemPriced) return false;
      if (MarketOnClose != other.MarketOnClose) return false;
      if (OddLot != other.OddLot) return false;
      if (SettlementTerms != other.SettlementTerms) return false;
      if (CrossType != other.CrossType) return false;
      if (ByPass != other.ByPass) return false;
      if (LastPrice != other.LastPrice) return false;
      if (SaleCondition != other.SaleCondition) return false;
      if (Currency != other.Currency) return false;
      if (DoesNotUpdateLast != other.DoesNotUpdateLast) return false;
      if (DoesNotUpdateVolume != other.DoesNotUpdateVolume) return false;
      if (Session != other.Session) return false;
      if (BlockTrade != other.BlockTrade) return false;
      if (DistributionTime != other.DistributionTime) return false;
      if (TransactionTime2 != other.TransactionTime2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginatorId.Length != 0) hash ^= OriginatorId.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (BuyerId.Length != 0) hash ^= BuyerId.GetHashCode();
      if (SellerId.Length != 0) hash ^= SellerId.GetHashCode();
      if (OpeningTrade != false) hash ^= OpeningTrade.GetHashCode();
      if (SystemPriced != false) hash ^= SystemPriced.GetHashCode();
      if (MarketOnClose != false) hash ^= MarketOnClose.GetHashCode();
      if (OddLot != false) hash ^= OddLot.GetHashCode();
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) hash ^= SettlementTerms.GetHashCode();
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) hash ^= CrossType.GetHashCode();
      if (ByPass != false) hash ^= ByPass.GetHashCode();
      if (LastPrice != 0L) hash ^= LastPrice.GetHashCode();
      if (SaleCondition.Length != 0) hash ^= SaleCondition.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (DoesNotUpdateLast != false) hash ^= DoesNotUpdateLast.GetHashCode();
      if (DoesNotUpdateVolume != false) hash ^= DoesNotUpdateVolume.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (BlockTrade != false) hash ^= BlockTrade.GetHashCode();
      if (DistributionTime != 0L) hash ^= DistributionTime.GetHashCode();
      if (TransactionTime2 != 0L) hash ^= TransactionTime2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginatorId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(OriginatorId);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Price != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Quantity);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(TradeId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Side);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(TradeDate);
      }
      if (BuyerId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(BuyerId);
      }
      if (SellerId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SellerId);
      }
      if (OpeningTrade != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(OpeningTrade);
      }
      if (SystemPriced != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SystemPriced);
      }
      if (MarketOnClose != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(MarketOnClose);
      }
      if (OddLot != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OddLot);
      }
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SettlementTerms);
      }
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CrossType);
      }
      if (ByPass != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(ByPass);
      }
      if (LastPrice != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteSInt64(LastPrice);
      }
      if (SaleCondition.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(SaleCondition);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Currency);
      }
      if (DoesNotUpdateLast != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(DoesNotUpdateLast);
      }
      if (DoesNotUpdateVolume != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DoesNotUpdateVolume);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Session);
      }
      if (BlockTrade != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(BlockTrade);
      }
      if (DistributionTime != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteSInt64(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteSInt64(TransactionTime2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginatorId);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TradeId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (BuyerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BuyerId);
      }
      if (SellerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SellerId);
      }
      if (OpeningTrade != false) {
        size += 2 + 1;
      }
      if (SystemPriced != false) {
        size += 2 + 1;
      }
      if (MarketOnClose != false) {
        size += 2 + 1;
      }
      if (OddLot != false) {
        size += 2 + 1;
      }
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementTerms);
      }
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CrossType);
      }
      if (ByPass != false) {
        size += 2 + 1;
      }
      if (LastPrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(LastPrice);
      }
      if (SaleCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SaleCondition);
      }
      if (Currency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (DoesNotUpdateLast != false) {
        size += 2 + 1;
      }
      if (DoesNotUpdateVolume != false) {
        size += 2 + 1;
      }
      if (Session.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (BlockTrade != false) {
        size += 2 + 1;
      }
      if (DistributionTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.OriginatorId.Length != 0) {
        OriginatorId = other.OriginatorId;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.BuyerId.Length != 0) {
        BuyerId = other.BuyerId;
      }
      if (other.SellerId.Length != 0) {
        SellerId = other.SellerId;
      }
      if (other.OpeningTrade != false) {
        OpeningTrade = other.OpeningTrade;
      }
      if (other.SystemPriced != false) {
        SystemPriced = other.SystemPriced;
      }
      if (other.MarketOnClose != false) {
        MarketOnClose = other.MarketOnClose;
      }
      if (other.OddLot != false) {
        OddLot = other.OddLot;
      }
      if (other.SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        SettlementTerms = other.SettlementTerms;
      }
      if (other.CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        CrossType = other.CrossType;
      }
      if (other.ByPass != false) {
        ByPass = other.ByPass;
      }
      if (other.LastPrice != 0L) {
        LastPrice = other.LastPrice;
      }
      if (other.SaleCondition.Length != 0) {
        SaleCondition = other.SaleCondition;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.DoesNotUpdateLast != false) {
        DoesNotUpdateLast = other.DoesNotUpdateLast;
      }
      if (other.DoesNotUpdateVolume != false) {
        DoesNotUpdateVolume = other.DoesNotUpdateVolume;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.BlockTrade != false) {
        BlockTrade = other.BlockTrade;
      }
      if (other.DistributionTime != 0L) {
        DistributionTime = other.DistributionTime;
      }
      if (other.TransactionTime2 != 0L) {
        TransactionTime2 = other.TransactionTime2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 66: {
            OriginatorId = input.ReadBytes();
            break;
          }
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Price = input.ReadSInt64();
            break;
          }
          case 88: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 98: {
            TradeId = input.ReadBytes();
            break;
          }
          case 104: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 112: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 122: {
            BuyerId = input.ReadBytes();
            break;
          }
          case 130: {
            SellerId = input.ReadBytes();
            break;
          }
          case 136: {
            OpeningTrade = input.ReadBool();
            break;
          }
          case 144: {
            SystemPriced = input.ReadBool();
            break;
          }
          case 152: {
            MarketOnClose = input.ReadBool();
            break;
          }
          case 160: {
            OddLot = input.ReadBool();
            break;
          }
          case 168: {
            SettlementTerms = (global::Org.Openfeed.SettlementTerms) input.ReadEnum();
            break;
          }
          case 176: {
            CrossType = (global::Org.Openfeed.CrossType) input.ReadEnum();
            break;
          }
          case 184: {
            ByPass = input.ReadBool();
            break;
          }
          case 192: {
            LastPrice = input.ReadSInt64();
            break;
          }
          case 202: {
            SaleCondition = input.ReadBytes();
            break;
          }
          case 210: {
            Currency = input.ReadString();
            break;
          }
          case 216: {
            DoesNotUpdateLast = input.ReadBool();
            break;
          }
          case 224: {
            DoesNotUpdateVolume = input.ReadBool();
            break;
          }
          case 242: {
            Session = input.ReadString();
            break;
          }
          case 248: {
            BlockTrade = input.ReadBool();
            break;
          }
          case 256: {
            DistributionTime = input.ReadSInt64();
            break;
          }
          case 264: {
            TransactionTime2 = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  //  Trade Correction
  // </summary>
  public sealed partial class TradeCorrection : pb::IMessage<TradeCorrection> {
    private static readonly pb::MessageParser<TradeCorrection> _parser = new pb::MessageParser<TradeCorrection>(() => new TradeCorrection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeCorrection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCorrection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCorrection(TradeCorrection other) : this() {
      originatorId_ = other.originatorId_;
      transactionTime_ = other.transactionTime_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      tradeId_ = other.tradeId_;
      side_ = other.side_;
      tradeDate_ = other.tradeDate_;
      buyerId_ = other.buyerId_;
      sellerId_ = other.sellerId_;
      openingTrade_ = other.openingTrade_;
      systemPriced_ = other.systemPriced_;
      marketOnClose_ = other.marketOnClose_;
      oddLot_ = other.oddLot_;
      settlementTerms_ = other.settlementTerms_;
      crossType_ = other.crossType_;
      byPass_ = other.byPass_;
      originalTradeId_ = other.originalTradeId_;
      saleCondition_ = other.saleCondition_;
      currency_ = other.currency_;
      distributionTime_ = other.distributionTime_;
      transactionTime2_ = other.transactionTime2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCorrection Clone() {
      return new TradeCorrection(this);
    }

    // <summary>Field number for the "originatorId" field.</summary>
    public const int OriginatorIdFieldNumber = 8;
    private pb::ByteString originatorId_ = pb::ByteString.Empty;
    // <summary>
    // Market participant/originator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginatorId {
      get { return originatorId_; }
      set {
        originatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private long price_;
    // <summary>
    // Corrected Price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 11;
    private long quantity_;
    // <summary>
    // Corrected Quantity
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "tradeId" field.</summary>
    public const int TradeIdFieldNumber = 12;
    private pb::ByteString tradeId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 13;
    private global::Org.Openfeed.BookSide side_ = global::Org.Openfeed.BookSide.UnknownBookSide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BookSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 14;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "buyerId" field.</summary>
    public const int BuyerIdFieldNumber = 15;
    private pb::ByteString buyerId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BuyerId {
      get { return buyerId_; }
      set {
        buyerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "sellerId" field.</summary>
    public const int SellerIdFieldNumber = 16;
    private pb::ByteString sellerId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SellerId {
      get { return sellerId_; }
      set {
        sellerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "openingTrade" field.</summary>
    public const int OpeningTradeFieldNumber = 17;
    private bool openingTrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpeningTrade {
      get { return openingTrade_; }
      set {
        openingTrade_ = value;
      }
    }

    // <summary>Field number for the "systemPriced" field.</summary>
    public const int SystemPricedFieldNumber = 18;
    private bool systemPriced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SystemPriced {
      get { return systemPriced_; }
      set {
        systemPriced_ = value;
      }
    }

    // <summary>Field number for the "marketOnClose" field.</summary>
    public const int MarketOnCloseFieldNumber = 19;
    private bool marketOnClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MarketOnClose {
      get { return marketOnClose_; }
      set {
        marketOnClose_ = value;
      }
    }

    // <summary>Field number for the "oddLot" field.</summary>
    public const int OddLotFieldNumber = 20;
    private bool oddLot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OddLot {
      get { return oddLot_; }
      set {
        oddLot_ = value;
      }
    }

    // <summary>Field number for the "settlementTerms" field.</summary>
    public const int SettlementTermsFieldNumber = 21;
    private global::Org.Openfeed.SettlementTerms settlementTerms_ = global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SettlementTerms SettlementTerms {
      get { return settlementTerms_; }
      set {
        settlementTerms_ = value;
      }
    }

    // <summary>Field number for the "crossType" field.</summary>
    public const int CrossTypeFieldNumber = 22;
    private global::Org.Openfeed.CrossType crossType_ = global::Org.Openfeed.CrossType.UnknownCrossType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.CrossType CrossType {
      get { return crossType_; }
      set {
        crossType_ = value;
      }
    }

    // <summary>Field number for the "byPass" field.</summary>
    public const int ByPassFieldNumber = 23;
    private bool byPass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ByPass {
      get { return byPass_; }
      set {
        byPass_ = value;
      }
    }

    // <summary>Field number for the "originalTradeId" field.</summary>
    public const int OriginalTradeIdFieldNumber = 24;
    private pb::ByteString originalTradeId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginalTradeId {
      get { return originalTradeId_; }
      set {
        originalTradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "saleCondition" field.</summary>
    public const int SaleConditionFieldNumber = 25;
    private pb::ByteString saleCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SaleCondition {
      get { return saleCondition_; }
      set {
        saleCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 26;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "distributionTime" field.</summary>
    public const int DistributionTimeFieldNumber = 27;
    private long distributionTime_;
    // <summary>
    // Distribution time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributionTime {
      get { return distributionTime_; }
      set {
        distributionTime_ = value;
      }
    }

    // <summary>Field number for the "transactionTime2" field.</summary>
    public const int TransactionTime2FieldNumber = 28;
    private long transactionTime2_;
    // <summary>
    // time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime2 {
      get { return transactionTime2_; }
      set {
        transactionTime2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeCorrection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeCorrection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginatorId != other.OriginatorId) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (TradeId != other.TradeId) return false;
      if (Side != other.Side) return false;
      if (TradeDate != other.TradeDate) return false;
      if (BuyerId != other.BuyerId) return false;
      if (SellerId != other.SellerId) return false;
      if (OpeningTrade != other.OpeningTrade) return false;
      if (SystemPriced != other.SystemPriced) return false;
      if (MarketOnClose != other.MarketOnClose) return false;
      if (OddLot != other.OddLot) return false;
      if (SettlementTerms != other.SettlementTerms) return false;
      if (CrossType != other.CrossType) return false;
      if (ByPass != other.ByPass) return false;
      if (OriginalTradeId != other.OriginalTradeId) return false;
      if (SaleCondition != other.SaleCondition) return false;
      if (Currency != other.Currency) return false;
      if (DistributionTime != other.DistributionTime) return false;
      if (TransactionTime2 != other.TransactionTime2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginatorId.Length != 0) hash ^= OriginatorId.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) hash ^= Side.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (BuyerId.Length != 0) hash ^= BuyerId.GetHashCode();
      if (SellerId.Length != 0) hash ^= SellerId.GetHashCode();
      if (OpeningTrade != false) hash ^= OpeningTrade.GetHashCode();
      if (SystemPriced != false) hash ^= SystemPriced.GetHashCode();
      if (MarketOnClose != false) hash ^= MarketOnClose.GetHashCode();
      if (OddLot != false) hash ^= OddLot.GetHashCode();
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) hash ^= SettlementTerms.GetHashCode();
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) hash ^= CrossType.GetHashCode();
      if (ByPass != false) hash ^= ByPass.GetHashCode();
      if (OriginalTradeId.Length != 0) hash ^= OriginalTradeId.GetHashCode();
      if (SaleCondition.Length != 0) hash ^= SaleCondition.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (DistributionTime != 0L) hash ^= DistributionTime.GetHashCode();
      if (TransactionTime2 != 0L) hash ^= TransactionTime2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginatorId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(OriginatorId);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Price != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Quantity);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(TradeId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Side);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(TradeDate);
      }
      if (BuyerId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(BuyerId);
      }
      if (SellerId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SellerId);
      }
      if (OpeningTrade != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(OpeningTrade);
      }
      if (SystemPriced != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SystemPriced);
      }
      if (MarketOnClose != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(MarketOnClose);
      }
      if (OddLot != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OddLot);
      }
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SettlementTerms);
      }
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CrossType);
      }
      if (ByPass != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(ByPass);
      }
      if (OriginalTradeId.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(OriginalTradeId);
      }
      if (SaleCondition.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(SaleCondition);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Currency);
      }
      if (DistributionTime != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteSInt64(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteSInt64(TransactionTime2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginatorId);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TradeId);
      }
      if (Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (BuyerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BuyerId);
      }
      if (SellerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SellerId);
      }
      if (OpeningTrade != false) {
        size += 2 + 1;
      }
      if (SystemPriced != false) {
        size += 2 + 1;
      }
      if (MarketOnClose != false) {
        size += 2 + 1;
      }
      if (OddLot != false) {
        size += 2 + 1;
      }
      if (SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementTerms);
      }
      if (CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CrossType);
      }
      if (ByPass != false) {
        size += 2 + 1;
      }
      if (OriginalTradeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OriginalTradeId);
      }
      if (SaleCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SaleCondition);
      }
      if (Currency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (DistributionTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeCorrection other) {
      if (other == null) {
        return;
      }
      if (other.OriginatorId.Length != 0) {
        OriginatorId = other.OriginatorId;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.Side != global::Org.Openfeed.BookSide.UnknownBookSide) {
        Side = other.Side;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.BuyerId.Length != 0) {
        BuyerId = other.BuyerId;
      }
      if (other.SellerId.Length != 0) {
        SellerId = other.SellerId;
      }
      if (other.OpeningTrade != false) {
        OpeningTrade = other.OpeningTrade;
      }
      if (other.SystemPriced != false) {
        SystemPriced = other.SystemPriced;
      }
      if (other.MarketOnClose != false) {
        MarketOnClose = other.MarketOnClose;
      }
      if (other.OddLot != false) {
        OddLot = other.OddLot;
      }
      if (other.SettlementTerms != global::Org.Openfeed.SettlementTerms.UnknownSettlementTerms) {
        SettlementTerms = other.SettlementTerms;
      }
      if (other.CrossType != global::Org.Openfeed.CrossType.UnknownCrossType) {
        CrossType = other.CrossType;
      }
      if (other.ByPass != false) {
        ByPass = other.ByPass;
      }
      if (other.OriginalTradeId.Length != 0) {
        OriginalTradeId = other.OriginalTradeId;
      }
      if (other.SaleCondition.Length != 0) {
        SaleCondition = other.SaleCondition;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.DistributionTime != 0L) {
        DistributionTime = other.DistributionTime;
      }
      if (other.TransactionTime2 != 0L) {
        TransactionTime2 = other.TransactionTime2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 66: {
            OriginatorId = input.ReadBytes();
            break;
          }
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Price = input.ReadSInt64();
            break;
          }
          case 88: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 98: {
            TradeId = input.ReadBytes();
            break;
          }
          case 104: {
            Side = (global::Org.Openfeed.BookSide) input.ReadEnum();
            break;
          }
          case 112: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 122: {
            BuyerId = input.ReadBytes();
            break;
          }
          case 130: {
            SellerId = input.ReadBytes();
            break;
          }
          case 136: {
            OpeningTrade = input.ReadBool();
            break;
          }
          case 144: {
            SystemPriced = input.ReadBool();
            break;
          }
          case 152: {
            MarketOnClose = input.ReadBool();
            break;
          }
          case 160: {
            OddLot = input.ReadBool();
            break;
          }
          case 168: {
            SettlementTerms = (global::Org.Openfeed.SettlementTerms) input.ReadEnum();
            break;
          }
          case 176: {
            CrossType = (global::Org.Openfeed.CrossType) input.ReadEnum();
            break;
          }
          case 184: {
            ByPass = input.ReadBool();
            break;
          }
          case 194: {
            OriginalTradeId = input.ReadBytes();
            break;
          }
          case 202: {
            SaleCondition = input.ReadBytes();
            break;
          }
          case 210: {
            Currency = input.ReadString();
            break;
          }
          case 216: {
            DistributionTime = input.ReadSInt64();
            break;
          }
          case 224: {
            TransactionTime2 = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  //
  // Trade Cancel/Break
  // </summary>
  public sealed partial class TradeCancel : pb::IMessage<TradeCancel> {
    private static readonly pb::MessageParser<TradeCancel> _parser = new pb::MessageParser<TradeCancel>(() => new TradeCancel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCancel(TradeCancel other) : this() {
      originatorId_ = other.originatorId_;
      transactionTime_ = other.transactionTime_;
      correctedTradePrice_ = other.correctedTradePrice_;
      correctedTradeQuantity_ = other.correctedTradeQuantity_;
      tradeId_ = other.tradeId_;
      saleCondition_ = other.saleCondition_;
      currency_ = other.currency_;
      distributionTime_ = other.distributionTime_;
      transactionTime2_ = other.transactionTime2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCancel Clone() {
      return new TradeCancel(this);
    }

    // <summary>Field number for the "originatorId" field.</summary>
    public const int OriginatorIdFieldNumber = 8;
    private pb::ByteString originatorId_ = pb::ByteString.Empty;
    // <summary>
    // Market participant/originator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginatorId {
      get { return originatorId_; }
      set {
        originatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "correctedTradePrice" field.</summary>
    public const int CorrectedTradePriceFieldNumber = 10;
    private long correctedTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CorrectedTradePrice {
      get { return correctedTradePrice_; }
      set {
        correctedTradePrice_ = value;
      }
    }

    // <summary>Field number for the "correctedTradeQuantity" field.</summary>
    public const int CorrectedTradeQuantityFieldNumber = 11;
    private long correctedTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CorrectedTradeQuantity {
      get { return correctedTradeQuantity_; }
      set {
        correctedTradeQuantity_ = value;
      }
    }

    // <summary>Field number for the "tradeId" field.</summary>
    public const int TradeIdFieldNumber = 12;
    private pb::ByteString tradeId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "saleCondition" field.</summary>
    public const int SaleConditionFieldNumber = 13;
    private pb::ByteString saleCondition_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SaleCondition {
      get { return saleCondition_; }
      set {
        saleCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 14;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "distributionTime" field.</summary>
    public const int DistributionTimeFieldNumber = 15;
    private long distributionTime_;
    // <summary>
    // Distribution time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributionTime {
      get { return distributionTime_; }
      set {
        distributionTime_ = value;
      }
    }

    // <summary>Field number for the "transactionTime2" field.</summary>
    public const int TransactionTime2FieldNumber = 16;
    private long transactionTime2_;
    // <summary>
    // time in nano seconds since epoch.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime2 {
      get { return transactionTime2_; }
      set {
        transactionTime2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginatorId != other.OriginatorId) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (CorrectedTradePrice != other.CorrectedTradePrice) return false;
      if (CorrectedTradeQuantity != other.CorrectedTradeQuantity) return false;
      if (TradeId != other.TradeId) return false;
      if (SaleCondition != other.SaleCondition) return false;
      if (Currency != other.Currency) return false;
      if (DistributionTime != other.DistributionTime) return false;
      if (TransactionTime2 != other.TransactionTime2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginatorId.Length != 0) hash ^= OriginatorId.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (CorrectedTradePrice != 0L) hash ^= CorrectedTradePrice.GetHashCode();
      if (CorrectedTradeQuantity != 0L) hash ^= CorrectedTradeQuantity.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (SaleCondition.Length != 0) hash ^= SaleCondition.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (DistributionTime != 0L) hash ^= DistributionTime.GetHashCode();
      if (TransactionTime2 != 0L) hash ^= TransactionTime2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginatorId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(OriginatorId);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (CorrectedTradePrice != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(CorrectedTradePrice);
      }
      if (CorrectedTradeQuantity != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(CorrectedTradeQuantity);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(TradeId);
      }
      if (SaleCondition.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(SaleCondition);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Currency);
      }
      if (DistributionTime != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(TransactionTime2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginatorId);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (CorrectedTradePrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CorrectedTradePrice);
      }
      if (CorrectedTradeQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CorrectedTradeQuantity);
      }
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TradeId);
      }
      if (SaleCondition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SaleCondition);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (DistributionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(DistributionTime);
      }
      if (TransactionTime2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeCancel other) {
      if (other == null) {
        return;
      }
      if (other.OriginatorId.Length != 0) {
        OriginatorId = other.OriginatorId;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.CorrectedTradePrice != 0L) {
        CorrectedTradePrice = other.CorrectedTradePrice;
      }
      if (other.CorrectedTradeQuantity != 0L) {
        CorrectedTradeQuantity = other.CorrectedTradeQuantity;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.SaleCondition.Length != 0) {
        SaleCondition = other.SaleCondition;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.DistributionTime != 0L) {
        DistributionTime = other.DistributionTime;
      }
      if (other.TransactionTime2 != 0L) {
        TransactionTime2 = other.TransactionTime2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 66: {
            OriginatorId = input.ReadBytes();
            break;
          }
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            CorrectedTradePrice = input.ReadSInt64();
            break;
          }
          case 88: {
            CorrectedTradeQuantity = input.ReadSInt64();
            break;
          }
          case 98: {
            TradeId = input.ReadBytes();
            break;
          }
          case 106: {
            SaleCondition = input.ReadBytes();
            break;
          }
          case 114: {
            Currency = input.ReadString();
            break;
          }
          case 120: {
            DistributionTime = input.ReadSInt64();
            break;
          }
          case 128: {
            TransactionTime2 = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Open : pb::IMessage<Open> {
    private static readonly pb::MessageParser<Open> _parser = new pb::MessageParser<Open>(() => new Open());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Open> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open(Open other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      openCloseSettlementFlag_ = other.openCloseSettlementFlag_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open Clone() {
      return new Open(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "OpenCloseSettlementFlag" field.</summary>
    public const int OpenCloseSettlementFlagFieldNumber = 12;
    private global::Org.Openfeed.OpenCloseSettlementFlag openCloseSettlementFlag_ = global::Org.Openfeed.OpenCloseSettlementFlag.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.OpenCloseSettlementFlag OpenCloseSettlementFlag {
      get { return openCloseSettlementFlag_; }
      set {
        openCloseSettlementFlag_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 13;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Open);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Open other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (OpenCloseSettlementFlag != other.OpenCloseSettlementFlag) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (OpenCloseSettlementFlag != global::Org.Openfeed.OpenCloseSettlementFlag.Unknown) hash ^= OpenCloseSettlementFlag.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (OpenCloseSettlementFlag != global::Org.Openfeed.OpenCloseSettlementFlag.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OpenCloseSettlementFlag);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (OpenCloseSettlementFlag != global::Org.Openfeed.OpenCloseSettlementFlag.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpenCloseSettlementFlag);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Open other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.OpenCloseSettlementFlag != global::Org.Openfeed.OpenCloseSettlementFlag.Unknown) {
        OpenCloseSettlementFlag = other.OpenCloseSettlementFlag;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 96: {
            OpenCloseSettlementFlag = (global::Org.Openfeed.OpenCloseSettlementFlag) input.ReadEnum();
            break;
          }
          case 106: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class High : pb::IMessage<High> {
    private static readonly pb::MessageParser<High> _parser = new pb::MessageParser<High>(() => new High());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<High> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public High() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public High(High other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public High Clone() {
      return new High(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 12;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as High);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(High other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(High other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 98: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Low : pb::IMessage<Low> {
    private static readonly pb::MessageParser<Low> _parser = new pb::MessageParser<Low>(() => new Low());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Low> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Low() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Low(Low other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Low Clone() {
      return new Low(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 12;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Low);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Low other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Low other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 98: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Close : pb::IMessage<Close> {
    private static readonly pb::MessageParser<Close> _parser = new pb::MessageParser<Close>(() => new Close());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Close> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Close() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Close(Close other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Close Clone() {
      return new Close(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 12;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Close);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Close other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Close other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 98: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrevClose : pb::IMessage<PrevClose> {
    private static readonly pb::MessageParser<PrevClose> _parser = new pb::MessageParser<PrevClose>(() => new PrevClose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrevClose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrevClose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrevClose(PrevClose other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrevClose Clone() {
      return new PrevClose(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 12;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrevClose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrevClose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrevClose other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 98: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Last : pb::IMessage<Last> {
    private static readonly pb::MessageParser<Last> _parser = new pb::MessageParser<Last>(() => new Last());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Last> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Last() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Last(Last other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      currency_ = other.currency_;
      session_ = other.session_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Last Clone() {
      return new Last(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 12;
    private long quantity_;
    // <summary>
    // Divide by quantityDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 13;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 30;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Last);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Last other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Currency != other.Currency) return false;
      if (Session != other.Session) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Quantity);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Currency);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Session);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Quantity);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (Session.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Last other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 96: {
            Quantity = input.ReadSInt64();
            break;
          }
          case 106: {
            Currency = input.ReadString();
            break;
          }
          case 242: {
            Session = input.ReadString();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // 52 week
  // </summary>
  public sealed partial class YearHigh : pb::IMessage<YearHigh> {
    private static readonly pb::MessageParser<YearHigh> _parser = new pb::MessageParser<YearHigh>(() => new YearHigh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YearHigh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearHigh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearHigh(YearHigh other) : this() {
      transactionTime_ = other.transactionTime_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearHigh Clone() {
      return new YearHigh(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 11;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YearHigh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YearHigh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Price != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YearHigh other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Price = input.ReadSInt64();
            break;
          }
          case 90: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // 52 week
  // </summary>
  public sealed partial class YearLow : pb::IMessage<YearLow> {
    private static readonly pb::MessageParser<YearLow> _parser = new pb::MessageParser<YearLow>(() => new YearLow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YearLow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearLow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearLow(YearLow other) : this() {
      transactionTime_ = other.transactionTime_;
      price_ = other.price_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YearLow Clone() {
      return new YearLow(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 11;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YearLow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YearLow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (Price != other.Price) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (Price != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Price);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YearLow other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Price = input.ReadSInt64();
            break;
          }
          case 90: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Total volume traded
  // </summary>
  public sealed partial class Volume : pb::IMessage<Volume> {
    private static readonly pb::MessageParser<Volume> _parser = new pb::MessageParser<Volume>(() => new Volume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Volume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume(Volume other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume Clone() {
      return new Volume(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int Volume_FieldNumber = 11;
    private long volume_;
    // <summary>
    // Total volume traded.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume_ {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Volume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Volume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Volume_ != other.Volume_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Volume_ != 0L) hash ^= Volume_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Volume_ != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Volume_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Volume_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Volume_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Volume other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Volume_ != 0L) {
        Volume_ = other.Volume_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Volume_ = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Total number of trades
  // </summary>
  public sealed partial class NumberOfTrades : pb::IMessage<NumberOfTrades> {
    private static readonly pb::MessageParser<NumberOfTrades> _parser = new pb::MessageParser<NumberOfTrades>(() => new NumberOfTrades());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumberOfTrades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberOfTrades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberOfTrades(NumberOfTrades other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      numberTrades_ = other.numberTrades_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberOfTrades Clone() {
      return new NumberOfTrades(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "numberTrades" field.</summary>
    public const int NumberTradesFieldNumber = 11;
    private long numberTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumberTrades {
      get { return numberTrades_; }
      set {
        numberTrades_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumberOfTrades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumberOfTrades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (NumberTrades != other.NumberTrades) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (NumberTrades != 0L) hash ^= NumberTrades.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (NumberTrades != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(NumberTrades);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (NumberTrades != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(NumberTrades);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumberOfTrades other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.NumberTrades != 0L) {
        NumberTrades = other.NumberTrades;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            NumberTrades = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Total monetary value of trades
  // </summary>
  public sealed partial class MonetaryValue : pb::IMessage<MonetaryValue> {
    private static readonly pb::MessageParser<MonetaryValue> _parser = new pb::MessageParser<MonetaryValue>(() => new MonetaryValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonetaryValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryValue(MonetaryValue other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      value_ = other.value_;
      valueCurrencyCode_ = other.valueCurrencyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryValue Clone() {
      return new MonetaryValue(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 11;
    private long value_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    // <summary>Field number for the "valueCurrencyCode" field.</summary>
    public const int ValueCurrencyCodeFieldNumber = 12;
    private string valueCurrencyCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueCurrencyCode {
      get { return valueCurrencyCode_; }
      set {
        valueCurrencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonetaryValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonetaryValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Value != other.Value) return false;
      if (ValueCurrencyCode != other.ValueCurrencyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (ValueCurrencyCode.Length != 0) hash ^= ValueCurrencyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Value != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Value);
      }
      if (ValueCurrencyCode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ValueCurrencyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Value);
      }
      if (ValueCurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueCurrencyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonetaryValue other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.ValueCurrencyCode.Length != 0) {
        ValueCurrencyCode = other.ValueCurrencyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Value = input.ReadSInt64();
            break;
          }
          case 98: {
            ValueCurrencyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Settlement value for futures and options markets.
  // </summary>
  public sealed partial class Settlement : pb::IMessage<Settlement> {
    private static readonly pb::MessageParser<Settlement> _parser = new pb::MessageParser<Settlement>(() => new Settlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement(Settlement other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      price_ = other.price_;
      preliminarySettle_ = other.preliminarySettle_;
      currency_ = other.currency_;
      settlementSource_ = other.settlementSource_;
      session_ = other.session_;
      reserved_ = other.reserved_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement Clone() {
      return new Settlement(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private long price_;
    // <summary>
    // Divide by priceDenominator
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    // <summary>Field number for the "preliminarySettle" field.</summary>
    public const int PreliminarySettleFieldNumber = 12;
    private bool preliminarySettle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreliminarySettle {
      get { return preliminarySettle_; }
      set {
        preliminarySettle_ = value;
      }
    }

    // <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 13;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "settlementSource" field.</summary>
    public const int SettlementSourceFieldNumber = 14;
    private global::Org.Openfeed.SettlementSource settlementSource_ = global::Org.Openfeed.SettlementSource.UnknownSettlementSource;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.SettlementSource SettlementSource {
      get { return settlementSource_; }
      set {
        settlementSource_ = value;
      }
    }

    // <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 15;
    private string session_ = "";
    // <summary>
    // Used by CME ITC.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 127;
    private bool reserved_;
    // <summary>
    // Reserved
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved {
      get { return reserved_; }
      set {
        reserved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Price != other.Price) return false;
      if (PreliminarySettle != other.PreliminarySettle) return false;
      if (Currency != other.Currency) return false;
      if (SettlementSource != other.SettlementSource) return false;
      if (Session != other.Session) return false;
      if (Reserved != other.Reserved) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (PreliminarySettle != false) hash ^= PreliminarySettle.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SettlementSource != global::Org.Openfeed.SettlementSource.UnknownSettlementSource) hash ^= SettlementSource.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (Reserved != false) hash ^= Reserved.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Price != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Price);
      }
      if (PreliminarySettle != false) {
        output.WriteRawTag(96);
        output.WriteBool(PreliminarySettle);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Currency);
      }
      if (SettlementSource != global::Org.Openfeed.SettlementSource.UnknownSettlementSource) {
        output.WriteRawTag(112);
        output.WriteEnum((int) SettlementSource);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Session);
      }
      if (Reserved != false) {
        output.WriteRawTag(248, 7);
        output.WriteBool(Reserved);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
      }
      if (PreliminarySettle != false) {
        size += 1 + 1;
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SettlementSource != global::Org.Openfeed.SettlementSource.UnknownSettlementSource) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementSource);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (Reserved != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settlement other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.PreliminarySettle != false) {
        PreliminarySettle = other.PreliminarySettle;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SettlementSource != global::Org.Openfeed.SettlementSource.UnknownSettlementSource) {
        SettlementSource = other.SettlementSource;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.Reserved != false) {
        Reserved = other.Reserved;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Price = input.ReadSInt64();
            break;
          }
          case 96: {
            PreliminarySettle = input.ReadBool();
            break;
          }
          case 106: {
            Currency = input.ReadString();
            break;
          }
          case 112: {
            SettlementSource = (global::Org.Openfeed.SettlementSource) input.ReadEnum();
            break;
          }
          case 122: {
            Session = input.ReadString();
            break;
          }
          case 1016: {
            Reserved = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Open interest
  // </summary>
  public sealed partial class OpenInterest : pb::IMessage<OpenInterest> {
    private static readonly pb::MessageParser<OpenInterest> _parser = new pb::MessageParser<OpenInterest>(() => new OpenInterest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenInterest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenInterest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenInterest(OpenInterest other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenInterest Clone() {
      return new OpenInterest(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 11;
    private long volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenInterest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenInterest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Volume != other.Volume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Volume != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Volume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenInterest other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Volume = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Volume Weighted Average Price
  // </summary>
  public sealed partial class Vwap : pb::IMessage<Vwap> {
    private static readonly pb::MessageParser<Vwap> _parser = new pb::MessageParser<Vwap>(() => new Vwap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vwap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vwap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vwap(Vwap other) : this() {
      transactionTime_ = other.transactionTime_;
      tradeDate_ = other.tradeDate_;
      vwap_ = other.vwap_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vwap Clone() {
      return new Vwap(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 9;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 10;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "vwap" field.</summary>
    public const int Vwap_FieldNumber = 11;
    private long vwap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Vwap_ {
      get { return vwap_; }
      set {
        vwap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vwap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vwap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (Vwap_ != other.Vwap_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      if (Vwap_ != 0L) hash ^= Vwap_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(TransactionTime);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(TradeDate);
      }
      if (Vwap_ != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(Vwap_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      if (Vwap_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Vwap_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vwap other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.Vwap_ != 0L) {
        Vwap_ = other.Vwap_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 72: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 80: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 88: {
            Vwap_ = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Dividends and Income Distributions
  // </summary>
  public sealed partial class DividendsIncomeDistributions : pb::IMessage<DividendsIncomeDistributions> {
    private static readonly pb::MessageParser<DividendsIncomeDistributions> _parser = new pb::MessageParser<DividendsIncomeDistributions>(() => new DividendsIncomeDistributions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DividendsIncomeDistributions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendsIncomeDistributions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendsIncomeDistributions(DividendsIncomeDistributions other) : this() {
      transactionTime_ = other.transactionTime_;
      instrumentType_ = other.instrumentType_;
      corporateAction_ = other.corporateAction_;
      distributionType_ = other.distributionType_;
      payableDate_ = other.payableDate_;
      recordDate_ = other.recordDate_;
      exDividendDate_ = other.exDividendDate_;
      amount_ = other.amount_;
      currencyCode_ = other.currencyCode_;
      notes_ = other.notes_.Clone();
      totalCashDistribution_ = other.totalCashDistribution_;
      nonQualifiedCashDistribution_ = other.nonQualifiedCashDistribution_;
      qualifiedCashDistribution_ = other.qualifiedCashDistribution_;
      taxFreeCashDistribution_ = other.taxFreeCashDistribution_;
      ordinaryForeignTaxCredit_ = other.ordinaryForeignTaxCredit_;
      qualifiedForeignTaxCredit_ = other.qualifiedForeignTaxCredit_;
      stockDividendRatio_ = other.stockDividendRatio_;
      reinvestDate_ = other.reinvestDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendsIncomeDistributions Clone() {
      return new DividendsIncomeDistributions(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 6;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "instrumentType" field.</summary>
    public const int InstrumentTypeFieldNumber = 7;
    private string instrumentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "corporateAction" field.</summary>
    public const int CorporateActionFieldNumber = 8;
    private string corporateAction_ = "";
    // <summary>
    // Corporate Action
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorporateAction {
      get { return corporateAction_; }
      set {
        corporateAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "distributionType" field.</summary>
    public const int DistributionTypeFieldNumber = 9;
    private string distributionType_ = "";
    // <summary>
    // Distribution Type
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistributionType {
      get { return distributionType_; }
      set {
        distributionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "payableDate" field.</summary>
    public const int PayableDateFieldNumber = 10;
    private int payableDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayableDate {
      get { return payableDate_; }
      set {
        payableDate_ = value;
      }
    }

    // <summary>Field number for the "recordDate" field.</summary>
    public const int RecordDateFieldNumber = 11;
    private int recordDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    // <summary>Field number for the "exDividendDate" field.</summary>
    public const int ExDividendDateFieldNumber = 12;
    private int exDividendDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExDividendDate {
      get { return exDividendDate_; }
      set {
        exDividendDate_ = value;
      }
    }

    // <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 13;
    private long amount_;
    // <summary>
    // Cash amount of distribution
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    // <summary>Field number for the "currencyCode" field.</summary>
    public const int CurrencyCodeFieldNumber = 14;
    private string currencyCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_notes_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> notes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Notes {
      get { return notes_; }
    }

    // <summary>Field number for the "totalCashDistribution" field.</summary>
    public const int TotalCashDistributionFieldNumber = 16;
    private long totalCashDistribution_;
    // <summary>
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCashDistribution {
      get { return totalCashDistribution_; }
      set {
        totalCashDistribution_ = value;
      }
    }

    // <summary>Field number for the "nonQualifiedCashDistribution" field.</summary>
    public const int NonQualifiedCashDistributionFieldNumber = 17;
    private long nonQualifiedCashDistribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NonQualifiedCashDistribution {
      get { return nonQualifiedCashDistribution_; }
      set {
        nonQualifiedCashDistribution_ = value;
      }
    }

    // <summary>Field number for the "qualifiedCashDistribution" field.</summary>
    public const int QualifiedCashDistributionFieldNumber = 18;
    private long qualifiedCashDistribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QualifiedCashDistribution {
      get { return qualifiedCashDistribution_; }
      set {
        qualifiedCashDistribution_ = value;
      }
    }

    // <summary>Field number for the "taxFreeCashDistribution" field.</summary>
    public const int TaxFreeCashDistributionFieldNumber = 19;
    private long taxFreeCashDistribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TaxFreeCashDistribution {
      get { return taxFreeCashDistribution_; }
      set {
        taxFreeCashDistribution_ = value;
      }
    }

    // <summary>Field number for the "ordinaryForeignTaxCredit" field.</summary>
    public const int OrdinaryForeignTaxCreditFieldNumber = 20;
    private long ordinaryForeignTaxCredit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrdinaryForeignTaxCredit {
      get { return ordinaryForeignTaxCredit_; }
      set {
        ordinaryForeignTaxCredit_ = value;
      }
    }

    // <summary>Field number for the "qualifiedForeignTaxCredit" field.</summary>
    public const int QualifiedForeignTaxCreditFieldNumber = 21;
    private long qualifiedForeignTaxCredit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QualifiedForeignTaxCredit {
      get { return qualifiedForeignTaxCredit_; }
      set {
        qualifiedForeignTaxCredit_ = value;
      }
    }

    // <summary>Field number for the "stockDividendRatio" field.</summary>
    public const int StockDividendRatioFieldNumber = 22;
    private long stockDividendRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StockDividendRatio {
      get { return stockDividendRatio_; }
      set {
        stockDividendRatio_ = value;
      }
    }

    // <summary>Field number for the "reinvestDate" field.</summary>
    public const int ReinvestDateFieldNumber = 23;
    private int reinvestDate_;
    // <summary>
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReinvestDate {
      get { return reinvestDate_; }
      set {
        reinvestDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DividendsIncomeDistributions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DividendsIncomeDistributions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (CorporateAction != other.CorporateAction) return false;
      if (DistributionType != other.DistributionType) return false;
      if (PayableDate != other.PayableDate) return false;
      if (RecordDate != other.RecordDate) return false;
      if (ExDividendDate != other.ExDividendDate) return false;
      if (Amount != other.Amount) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if(!notes_.Equals(other.notes_)) return false;
      if (TotalCashDistribution != other.TotalCashDistribution) return false;
      if (NonQualifiedCashDistribution != other.NonQualifiedCashDistribution) return false;
      if (QualifiedCashDistribution != other.QualifiedCashDistribution) return false;
      if (TaxFreeCashDistribution != other.TaxFreeCashDistribution) return false;
      if (OrdinaryForeignTaxCredit != other.OrdinaryForeignTaxCredit) return false;
      if (QualifiedForeignTaxCredit != other.QualifiedForeignTaxCredit) return false;
      if (StockDividendRatio != other.StockDividendRatio) return false;
      if (ReinvestDate != other.ReinvestDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (CorporateAction.Length != 0) hash ^= CorporateAction.GetHashCode();
      if (DistributionType.Length != 0) hash ^= DistributionType.GetHashCode();
      if (PayableDate != 0) hash ^= PayableDate.GetHashCode();
      if (RecordDate != 0) hash ^= RecordDate.GetHashCode();
      if (ExDividendDate != 0) hash ^= ExDividendDate.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      hash ^= notes_.GetHashCode();
      if (TotalCashDistribution != 0L) hash ^= TotalCashDistribution.GetHashCode();
      if (NonQualifiedCashDistribution != 0L) hash ^= NonQualifiedCashDistribution.GetHashCode();
      if (QualifiedCashDistribution != 0L) hash ^= QualifiedCashDistribution.GetHashCode();
      if (TaxFreeCashDistribution != 0L) hash ^= TaxFreeCashDistribution.GetHashCode();
      if (OrdinaryForeignTaxCredit != 0L) hash ^= OrdinaryForeignTaxCredit.GetHashCode();
      if (QualifiedForeignTaxCredit != 0L) hash ^= QualifiedForeignTaxCredit.GetHashCode();
      if (StockDividendRatio != 0L) hash ^= StockDividendRatio.GetHashCode();
      if (ReinvestDate != 0) hash ^= ReinvestDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(TransactionTime);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InstrumentType);
      }
      if (CorporateAction.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CorporateAction);
      }
      if (DistributionType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DistributionType);
      }
      if (PayableDate != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(PayableDate);
      }
      if (RecordDate != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(RecordDate);
      }
      if (ExDividendDate != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(ExDividendDate);
      }
      if (Amount != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(Amount);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CurrencyCode);
      }
      notes_.WriteTo(output, _repeated_notes_codec);
      if (TotalCashDistribution != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(TotalCashDistribution);
      }
      if (NonQualifiedCashDistribution != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(NonQualifiedCashDistribution);
      }
      if (QualifiedCashDistribution != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteSInt64(QualifiedCashDistribution);
      }
      if (TaxFreeCashDistribution != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteSInt64(TaxFreeCashDistribution);
      }
      if (OrdinaryForeignTaxCredit != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(OrdinaryForeignTaxCredit);
      }
      if (QualifiedForeignTaxCredit != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(QualifiedForeignTaxCredit);
      }
      if (StockDividendRatio != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteSInt64(StockDividendRatio);
      }
      if (ReinvestDate != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(ReinvestDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (CorporateAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorporateAction);
      }
      if (DistributionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistributionType);
      }
      if (PayableDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PayableDate);
      }
      if (RecordDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RecordDate);
      }
      if (ExDividendDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExDividendDate);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (TotalCashDistribution != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TotalCashDistribution);
      }
      if (NonQualifiedCashDistribution != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(NonQualifiedCashDistribution);
      }
      if (QualifiedCashDistribution != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(QualifiedCashDistribution);
      }
      if (TaxFreeCashDistribution != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(TaxFreeCashDistribution);
      }
      if (OrdinaryForeignTaxCredit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OrdinaryForeignTaxCredit);
      }
      if (QualifiedForeignTaxCredit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(QualifiedForeignTaxCredit);
      }
      if (StockDividendRatio != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(StockDividendRatio);
      }
      if (ReinvestDate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ReinvestDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DividendsIncomeDistributions other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.CorporateAction.Length != 0) {
        CorporateAction = other.CorporateAction;
      }
      if (other.DistributionType.Length != 0) {
        DistributionType = other.DistributionType;
      }
      if (other.PayableDate != 0) {
        PayableDate = other.PayableDate;
      }
      if (other.RecordDate != 0) {
        RecordDate = other.RecordDate;
      }
      if (other.ExDividendDate != 0) {
        ExDividendDate = other.ExDividendDate;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      notes_.Add(other.notes_);
      if (other.TotalCashDistribution != 0L) {
        TotalCashDistribution = other.TotalCashDistribution;
      }
      if (other.NonQualifiedCashDistribution != 0L) {
        NonQualifiedCashDistribution = other.NonQualifiedCashDistribution;
      }
      if (other.QualifiedCashDistribution != 0L) {
        QualifiedCashDistribution = other.QualifiedCashDistribution;
      }
      if (other.TaxFreeCashDistribution != 0L) {
        TaxFreeCashDistribution = other.TaxFreeCashDistribution;
      }
      if (other.OrdinaryForeignTaxCredit != 0L) {
        OrdinaryForeignTaxCredit = other.OrdinaryForeignTaxCredit;
      }
      if (other.QualifiedForeignTaxCredit != 0L) {
        QualifiedForeignTaxCredit = other.QualifiedForeignTaxCredit;
      }
      if (other.StockDividendRatio != 0L) {
        StockDividendRatio = other.StockDividendRatio;
      }
      if (other.ReinvestDate != 0) {
        ReinvestDate = other.ReinvestDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 48: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 58: {
            InstrumentType = input.ReadString();
            break;
          }
          case 66: {
            CorporateAction = input.ReadString();
            break;
          }
          case 74: {
            DistributionType = input.ReadString();
            break;
          }
          case 80: {
            PayableDate = input.ReadSInt32();
            break;
          }
          case 88: {
            RecordDate = input.ReadSInt32();
            break;
          }
          case 96: {
            ExDividendDate = input.ReadSInt32();
            break;
          }
          case 104: {
            Amount = input.ReadSInt64();
            break;
          }
          case 114: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 122: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
          case 128: {
            TotalCashDistribution = input.ReadSInt64();
            break;
          }
          case 136: {
            NonQualifiedCashDistribution = input.ReadSInt64();
            break;
          }
          case 144: {
            QualifiedCashDistribution = input.ReadSInt64();
            break;
          }
          case 152: {
            TaxFreeCashDistribution = input.ReadSInt64();
            break;
          }
          case 160: {
            OrdinaryForeignTaxCredit = input.ReadSInt64();
            break;
          }
          case 168: {
            QualifiedForeignTaxCredit = input.ReadSInt64();
            break;
          }
          case 176: {
            StockDividendRatio = input.ReadSInt64();
            break;
          }
          case 184: {
            ReinvestDate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Capital Distributions
  // </summary>
  public sealed partial class CapitalDistributions : pb::IMessage<CapitalDistributions> {
    private static readonly pb::MessageParser<CapitalDistributions> _parser = new pb::MessageParser<CapitalDistributions>(() => new CapitalDistributions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CapitalDistributions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapitalDistributions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapitalDistributions(CapitalDistributions other) : this() {
      transactionTime_ = other.transactionTime_;
      instrumentType_ = other.instrumentType_;
      corporateAction_ = other.corporateAction_;
      payableDate_ = other.payableDate_;
      recordDate_ = other.recordDate_;
      exDate_ = other.exDate_;
      shortTermCapitalGain_ = other.shortTermCapitalGain_;
      longTermCapitalGain_ = other.longTermCapitalGain_;
      unallocatedDistributions_ = other.unallocatedDistributions_;
      returnOfCapital_ = other.returnOfCapital_;
      currencyCode_ = other.currencyCode_;
      notes_ = other.notes_.Clone();
      reinvestDate_ = other.reinvestDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapitalDistributions Clone() {
      return new CapitalDistributions(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 8;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "instrumentType" field.</summary>
    public const int InstrumentTypeFieldNumber = 9;
    private string instrumentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "corporateAction" field.</summary>
    public const int CorporateActionFieldNumber = 10;
    private string corporateAction_ = "";
    // <summary>
    // Corporate Action
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorporateAction {
      get { return corporateAction_; }
      set {
        corporateAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "payableDate" field.</summary>
    public const int PayableDateFieldNumber = 11;
    private int payableDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayableDate {
      get { return payableDate_; }
      set {
        payableDate_ = value;
      }
    }

    // <summary>Field number for the "recordDate" field.</summary>
    public const int RecordDateFieldNumber = 12;
    private int recordDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    // <summary>Field number for the "exDate" field.</summary>
    public const int ExDateFieldNumber = 13;
    private int exDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExDate {
      get { return exDate_; }
      set {
        exDate_ = value;
      }
    }

    // <summary>Field number for the "shortTermCapitalGain" field.</summary>
    public const int ShortTermCapitalGainFieldNumber = 14;
    private long shortTermCapitalGain_;
    // <summary>
    // Distributions
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShortTermCapitalGain {
      get { return shortTermCapitalGain_; }
      set {
        shortTermCapitalGain_ = value;
      }
    }

    // <summary>Field number for the "longTermCapitalGain" field.</summary>
    public const int LongTermCapitalGainFieldNumber = 15;
    private long longTermCapitalGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongTermCapitalGain {
      get { return longTermCapitalGain_; }
      set {
        longTermCapitalGain_ = value;
      }
    }

    // <summary>Field number for the "unallocatedDistributions" field.</summary>
    public const int UnallocatedDistributionsFieldNumber = 16;
    private long unallocatedDistributions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnallocatedDistributions {
      get { return unallocatedDistributions_; }
      set {
        unallocatedDistributions_ = value;
      }
    }

    // <summary>Field number for the "returnOfCapital" field.</summary>
    public const int ReturnOfCapitalFieldNumber = 17;
    private long returnOfCapital_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReturnOfCapital {
      get { return returnOfCapital_; }
      set {
        returnOfCapital_ = value;
      }
    }

    // <summary>Field number for the "currencyCode" field.</summary>
    public const int CurrencyCodeFieldNumber = 18;
    private string currencyCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_notes_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> notes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Notes {
      get { return notes_; }
    }

    // <summary>Field number for the "reinvestDate" field.</summary>
    public const int ReinvestDateFieldNumber = 20;
    private int reinvestDate_;
    // <summary>
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReinvestDate {
      get { return reinvestDate_; }
      set {
        reinvestDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CapitalDistributions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CapitalDistributions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (CorporateAction != other.CorporateAction) return false;
      if (PayableDate != other.PayableDate) return false;
      if (RecordDate != other.RecordDate) return false;
      if (ExDate != other.ExDate) return false;
      if (ShortTermCapitalGain != other.ShortTermCapitalGain) return false;
      if (LongTermCapitalGain != other.LongTermCapitalGain) return false;
      if (UnallocatedDistributions != other.UnallocatedDistributions) return false;
      if (ReturnOfCapital != other.ReturnOfCapital) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if(!notes_.Equals(other.notes_)) return false;
      if (ReinvestDate != other.ReinvestDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (CorporateAction.Length != 0) hash ^= CorporateAction.GetHashCode();
      if (PayableDate != 0) hash ^= PayableDate.GetHashCode();
      if (RecordDate != 0) hash ^= RecordDate.GetHashCode();
      if (ExDate != 0) hash ^= ExDate.GetHashCode();
      if (ShortTermCapitalGain != 0L) hash ^= ShortTermCapitalGain.GetHashCode();
      if (LongTermCapitalGain != 0L) hash ^= LongTermCapitalGain.GetHashCode();
      if (UnallocatedDistributions != 0L) hash ^= UnallocatedDistributions.GetHashCode();
      if (ReturnOfCapital != 0L) hash ^= ReturnOfCapital.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      hash ^= notes_.GetHashCode();
      if (ReinvestDate != 0) hash ^= ReinvestDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(TransactionTime);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(InstrumentType);
      }
      if (CorporateAction.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CorporateAction);
      }
      if (PayableDate != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(PayableDate);
      }
      if (RecordDate != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(RecordDate);
      }
      if (ExDate != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(ExDate);
      }
      if (ShortTermCapitalGain != 0L) {
        output.WriteRawTag(112);
        output.WriteSInt64(ShortTermCapitalGain);
      }
      if (LongTermCapitalGain != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(LongTermCapitalGain);
      }
      if (UnallocatedDistributions != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(UnallocatedDistributions);
      }
      if (ReturnOfCapital != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(ReturnOfCapital);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CurrencyCode);
      }
      notes_.WriteTo(output, _repeated_notes_codec);
      if (ReinvestDate != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(ReinvestDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (CorporateAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorporateAction);
      }
      if (PayableDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PayableDate);
      }
      if (RecordDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RecordDate);
      }
      if (ExDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExDate);
      }
      if (ShortTermCapitalGain != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ShortTermCapitalGain);
      }
      if (LongTermCapitalGain != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongTermCapitalGain);
      }
      if (UnallocatedDistributions != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(UnallocatedDistributions);
      }
      if (ReturnOfCapital != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ReturnOfCapital);
      }
      if (CurrencyCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (ReinvestDate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ReinvestDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CapitalDistributions other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.CorporateAction.Length != 0) {
        CorporateAction = other.CorporateAction;
      }
      if (other.PayableDate != 0) {
        PayableDate = other.PayableDate;
      }
      if (other.RecordDate != 0) {
        RecordDate = other.RecordDate;
      }
      if (other.ExDate != 0) {
        ExDate = other.ExDate;
      }
      if (other.ShortTermCapitalGain != 0L) {
        ShortTermCapitalGain = other.ShortTermCapitalGain;
      }
      if (other.LongTermCapitalGain != 0L) {
        LongTermCapitalGain = other.LongTermCapitalGain;
      }
      if (other.UnallocatedDistributions != 0L) {
        UnallocatedDistributions = other.UnallocatedDistributions;
      }
      if (other.ReturnOfCapital != 0L) {
        ReturnOfCapital = other.ReturnOfCapital;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      notes_.Add(other.notes_);
      if (other.ReinvestDate != 0) {
        ReinvestDate = other.ReinvestDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 64: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 74: {
            InstrumentType = input.ReadString();
            break;
          }
          case 82: {
            CorporateAction = input.ReadString();
            break;
          }
          case 88: {
            PayableDate = input.ReadSInt32();
            break;
          }
          case 96: {
            RecordDate = input.ReadSInt32();
            break;
          }
          case 104: {
            ExDate = input.ReadSInt32();
            break;
          }
          case 112: {
            ShortTermCapitalGain = input.ReadSInt64();
            break;
          }
          case 120: {
            LongTermCapitalGain = input.ReadSInt64();
            break;
          }
          case 128: {
            UnallocatedDistributions = input.ReadSInt64();
            break;
          }
          case 136: {
            ReturnOfCapital = input.ReadSInt64();
            break;
          }
          case 146: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 154: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
          case 160: {
            ReinvestDate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // </summary>
  public sealed partial class SharesOutstanding : pb::IMessage<SharesOutstanding> {
    private static readonly pb::MessageParser<SharesOutstanding> _parser = new pb::MessageParser<SharesOutstanding>(() => new SharesOutstanding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharesOutstanding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharesOutstanding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharesOutstanding(SharesOutstanding other) : this() {
      sharesOutstanding_ = other.sharesOutstanding_;
      transactionTime_ = other.transactionTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharesOutstanding Clone() {
      return new SharesOutstanding(this);
    }

    // <summary>Field number for the "sharesOutstanding" field.</summary>
    public const int SharesOutstanding_FieldNumber = 1;
    private long sharesOutstanding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SharesOutstanding_ {
      get { return sharesOutstanding_; }
      set {
        sharesOutstanding_ = value;
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 2;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharesOutstanding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharesOutstanding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharesOutstanding_ != other.SharesOutstanding_) return false;
      if (TransactionTime != other.TransactionTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharesOutstanding_ != 0L) hash ^= SharesOutstanding_.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharesOutstanding_ != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(SharesOutstanding_);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TransactionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharesOutstanding_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SharesOutstanding_);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharesOutstanding other) {
      if (other == null) {
        return;
      }
      if (other.SharesOutstanding_ != 0L) {
        SharesOutstanding_ = other.SharesOutstanding_;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SharesOutstanding_ = input.ReadSInt64();
            break;
          }
          case 16: {
            TransactionTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // </summary>
  public sealed partial class NetAssetValue : pb::IMessage<NetAssetValue> {
    private static readonly pb::MessageParser<NetAssetValue> _parser = new pb::MessageParser<NetAssetValue>(() => new NetAssetValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetAssetValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAssetValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAssetValue(NetAssetValue other) : this() {
      netAssetValue_ = other.netAssetValue_;
      transactionTime_ = other.transactionTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAssetValue Clone() {
      return new NetAssetValue(this);
    }

    // <summary>Field number for the "netAssetValue" field.</summary>
    public const int NetAssetValue_FieldNumber = 1;
    private long netAssetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetAssetValue_ {
      get { return netAssetValue_; }
      set {
        netAssetValue_ = value;
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 2;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetAssetValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetAssetValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetAssetValue_ != other.NetAssetValue_) return false;
      if (TransactionTime != other.TransactionTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetAssetValue_ != 0L) hash ^= NetAssetValue_.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetAssetValue_ != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(NetAssetValue_);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TransactionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetAssetValue_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(NetAssetValue_);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetAssetValue other) {
      if (other == null) {
        return;
      }
      if (other.NetAssetValue_ != 0L) {
        NetAssetValue_ = other.NetAssetValue_;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetAssetValue_ = input.ReadSInt64();
            break;
          }
          case 16: {
            TransactionTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Intra and EOD Market Summary
  // </summary>
  public sealed partial class MarketSummary : pb::IMessage<MarketSummary> {
    private static readonly pb::MessageParser<MarketSummary> _parser = new pb::MessageParser<MarketSummary>(() => new MarketSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSummary(MarketSummary other) : this() {
      transactionTime_ = other.transactionTime_;
      tradingDate_ = other.tradingDate_;
      startOfDay_ = other.startOfDay_;
      endOfDay_ = other.endOfDay_;
      clear_ = other.clear_;
      instrumentStatus_ = other.instrumentStatus_ != null ? other.instrumentStatus_.Clone() : null;
      bbo_ = other.bbo_ != null ? other.bbo_.Clone() : null;
      open_ = other.open_ != null ? other.open_.Clone() : null;
      high_ = other.high_ != null ? other.high_.Clone() : null;
      low_ = other.low_ != null ? other.low_.Clone() : null;
      close_ = other.close_ != null ? other.close_.Clone() : null;
      prevClose_ = other.prevClose_ != null ? other.prevClose_.Clone() : null;
      last_ = other.last_ != null ? other.last_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      settlement_ = other.settlement_ != null ? other.settlement_.Clone() : null;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      vwap_ = other.vwap_ != null ? other.vwap_.Clone() : null;
      session_ = other.session_;
      summaryType_ = other.summaryType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketSummary Clone() {
      return new MarketSummary(this);
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 1;
    private long transactionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "tradingDate" field.</summary>
    public const int TradingDateFieldNumber = 2;
    private int tradingDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradingDate {
      get { return tradingDate_; }
      set {
        tradingDate_ = value;
      }
    }

    // <summary>Field number for the "startOfDay" field.</summary>
    public const int StartOfDayFieldNumber = 3;
    private bool startOfDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StartOfDay {
      get { return startOfDay_; }
      set {
        startOfDay_ = value;
      }
    }

    // <summary>Field number for the "endOfDay" field.</summary>
    public const int EndOfDayFieldNumber = 4;
    private bool endOfDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndOfDay {
      get { return endOfDay_; }
      set {
        endOfDay_ = value;
      }
    }

    // <summary>Field number for the "clear" field.</summary>
    public const int ClearFieldNumber = 5;
    private global::Org.Openfeed.MarketSummary.Types.ClearSet clear_ = global::Org.Openfeed.MarketSummary.Types.ClearSet.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSummary.Types.ClearSet Clear {
      get { return clear_; }
      set {
        clear_ = value;
      }
    }

    // <summary>Field number for the "instrumentStatus" field.</summary>
    public const int InstrumentStatusFieldNumber = 9;
    private global::Org.Openfeed.InstrumentStatus instrumentStatus_;
    // <summary>
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.InstrumentStatus InstrumentStatus {
      get { return instrumentStatus_; }
      set {
        instrumentStatus_ = value;
      }
    }

    // <summary>Field number for the "bbo" field.</summary>
    public const int BboFieldNumber = 10;
    private global::Org.Openfeed.BestBidOffer bbo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.BestBidOffer Bbo {
      get { return bbo_; }
      set {
        bbo_ = value;
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 11;
    private global::Org.Openfeed.Open open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Open Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 12;
    private global::Org.Openfeed.High high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.High High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 13;
    private global::Org.Openfeed.Low low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Low Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    // <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 14;
    private global::Org.Openfeed.Close close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Close Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    // <summary>Field number for the "prevClose" field.</summary>
    public const int PrevCloseFieldNumber = 15;
    private global::Org.Openfeed.PrevClose prevClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.PrevClose PrevClose {
      get { return prevClose_; }
      set {
        prevClose_ = value;
      }
    }

    // <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 16;
    private global::Org.Openfeed.Last last_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Last Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    // <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 17;
    private global::Org.Openfeed.Volume volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Volume Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    // <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 18;
    private global::Org.Openfeed.Settlement settlement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Settlement Settlement {
      get { return settlement_; }
      set {
        settlement_ = value;
      }
    }

    // <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 19;
    private global::Org.Openfeed.OpenInterest openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.OpenInterest OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    // <summary>Field number for the "vwap" field.</summary>
    public const int VwapFieldNumber = 20;
    private global::Org.Openfeed.Vwap vwap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Vwap Vwap {
      get { return vwap_; }
      set {
        vwap_ = value;
      }
    }

    // <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 21;
    private string session_ = "";
    // <summary>
    // Used by CME ITC.
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "summaryType" field.</summary>
    public const int SummaryTypeFieldNumber = 22;
    private global::Org.Openfeed.MarketSummary.Types.SummaryType summaryType_ = global::Org.Openfeed.MarketSummary.Types.SummaryType.ExchangeRefresh;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.MarketSummary.Types.SummaryType SummaryType {
      get { return summaryType_; }
      set {
        summaryType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionTime != other.TransactionTime) return false;
      if (TradingDate != other.TradingDate) return false;
      if (StartOfDay != other.StartOfDay) return false;
      if (EndOfDay != other.EndOfDay) return false;
      if (Clear != other.Clear) return false;
      if (!object.Equals(InstrumentStatus, other.InstrumentStatus)) return false;
      if (!object.Equals(Bbo, other.Bbo)) return false;
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(High, other.High)) return false;
      if (!object.Equals(Low, other.Low)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      if (!object.Equals(PrevClose, other.PrevClose)) return false;
      if (!object.Equals(Last, other.Last)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Settlement, other.Settlement)) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(Vwap, other.Vwap)) return false;
      if (Session != other.Session) return false;
      if (SummaryType != other.SummaryType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (TradingDate != 0) hash ^= TradingDate.GetHashCode();
      if (StartOfDay != false) hash ^= StartOfDay.GetHashCode();
      if (EndOfDay != false) hash ^= EndOfDay.GetHashCode();
      if (Clear != global::Org.Openfeed.MarketSummary.Types.ClearSet.None) hash ^= Clear.GetHashCode();
      if (instrumentStatus_ != null) hash ^= InstrumentStatus.GetHashCode();
      if (bbo_ != null) hash ^= Bbo.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (high_ != null) hash ^= High.GetHashCode();
      if (low_ != null) hash ^= Low.GetHashCode();
      if (close_ != null) hash ^= Close.GetHashCode();
      if (prevClose_ != null) hash ^= PrevClose.GetHashCode();
      if (last_ != null) hash ^= Last.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (settlement_ != null) hash ^= Settlement.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (vwap_ != null) hash ^= Vwap.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (SummaryType != global::Org.Openfeed.MarketSummary.Types.SummaryType.ExchangeRefresh) hash ^= SummaryType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionTime != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TransactionTime);
      }
      if (TradingDate != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TradingDate);
      }
      if (StartOfDay != false) {
        output.WriteRawTag(24);
        output.WriteBool(StartOfDay);
      }
      if (EndOfDay != false) {
        output.WriteRawTag(32);
        output.WriteBool(EndOfDay);
      }
      if (Clear != global::Org.Openfeed.MarketSummary.Types.ClearSet.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Clear);
      }
      if (instrumentStatus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(InstrumentStatus);
      }
      if (bbo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bbo);
      }
      if (open_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Open);
      }
      if (high_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(High);
      }
      if (low_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Low);
      }
      if (close_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Close);
      }
      if (prevClose_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PrevClose);
      }
      if (last_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Last);
      }
      if (volume_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Volume);
      }
      if (settlement_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Settlement);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(OpenInterest);
      }
      if (vwap_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Vwap);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Session);
      }
      if (SummaryType != global::Org.Openfeed.MarketSummary.Types.SummaryType.ExchangeRefresh) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SummaryType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (TradingDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradingDate);
      }
      if (StartOfDay != false) {
        size += 1 + 1;
      }
      if (EndOfDay != false) {
        size += 1 + 1;
      }
      if (Clear != global::Org.Openfeed.MarketSummary.Types.ClearSet.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Clear);
      }
      if (instrumentStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentStatus);
      }
      if (bbo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbo);
      }
      if (open_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (high_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(High);
      }
      if (low_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Low);
      }
      if (close_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      if (prevClose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevClose);
      }
      if (last_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Last);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (settlement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Settlement);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (vwap_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vwap);
      }
      if (Session.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (SummaryType != global::Org.Openfeed.MarketSummary.Types.SummaryType.ExchangeRefresh) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SummaryType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketSummary other) {
      if (other == null) {
        return;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.TradingDate != 0) {
        TradingDate = other.TradingDate;
      }
      if (other.StartOfDay != false) {
        StartOfDay = other.StartOfDay;
      }
      if (other.EndOfDay != false) {
        EndOfDay = other.EndOfDay;
      }
      if (other.Clear != global::Org.Openfeed.MarketSummary.Types.ClearSet.None) {
        Clear = other.Clear;
      }
      if (other.instrumentStatus_ != null) {
        if (instrumentStatus_ == null) {
          InstrumentStatus = new global::Org.Openfeed.InstrumentStatus();
        }
        InstrumentStatus.MergeFrom(other.InstrumentStatus);
      }
      if (other.bbo_ != null) {
        if (bbo_ == null) {
          Bbo = new global::Org.Openfeed.BestBidOffer();
        }
        Bbo.MergeFrom(other.Bbo);
      }
      if (other.open_ != null) {
        if (open_ == null) {
          Open = new global::Org.Openfeed.Open();
        }
        Open.MergeFrom(other.Open);
      }
      if (other.high_ != null) {
        if (high_ == null) {
          High = new global::Org.Openfeed.High();
        }
        High.MergeFrom(other.High);
      }
      if (other.low_ != null) {
        if (low_ == null) {
          Low = new global::Org.Openfeed.Low();
        }
        Low.MergeFrom(other.Low);
      }
      if (other.close_ != null) {
        if (close_ == null) {
          Close = new global::Org.Openfeed.Close();
        }
        Close.MergeFrom(other.Close);
      }
      if (other.prevClose_ != null) {
        if (prevClose_ == null) {
          PrevClose = new global::Org.Openfeed.PrevClose();
        }
        PrevClose.MergeFrom(other.PrevClose);
      }
      if (other.last_ != null) {
        if (last_ == null) {
          Last = new global::Org.Openfeed.Last();
        }
        Last.MergeFrom(other.Last);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::Org.Openfeed.Volume();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.settlement_ != null) {
        if (settlement_ == null) {
          Settlement = new global::Org.Openfeed.Settlement();
        }
        Settlement.MergeFrom(other.Settlement);
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::Org.Openfeed.OpenInterest();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      if (other.vwap_ != null) {
        if (vwap_ == null) {
          Vwap = new global::Org.Openfeed.Vwap();
        }
        Vwap.MergeFrom(other.Vwap);
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.SummaryType != global::Org.Openfeed.MarketSummary.Types.SummaryType.ExchangeRefresh) {
        SummaryType = other.SummaryType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 16: {
            TradingDate = input.ReadSInt32();
            break;
          }
          case 24: {
            StartOfDay = input.ReadBool();
            break;
          }
          case 32: {
            EndOfDay = input.ReadBool();
            break;
          }
          case 40: {
            Clear = (global::Org.Openfeed.MarketSummary.Types.ClearSet) input.ReadEnum();
            break;
          }
          case 74: {
            if (instrumentStatus_ == null) {
              InstrumentStatus = new global::Org.Openfeed.InstrumentStatus();
            }
            input.ReadMessage(InstrumentStatus);
            break;
          }
          case 82: {
            if (bbo_ == null) {
              Bbo = new global::Org.Openfeed.BestBidOffer();
            }
            input.ReadMessage(Bbo);
            break;
          }
          case 90: {
            if (open_ == null) {
              Open = new global::Org.Openfeed.Open();
            }
            input.ReadMessage(Open);
            break;
          }
          case 98: {
            if (high_ == null) {
              High = new global::Org.Openfeed.High();
            }
            input.ReadMessage(High);
            break;
          }
          case 106: {
            if (low_ == null) {
              Low = new global::Org.Openfeed.Low();
            }
            input.ReadMessage(Low);
            break;
          }
          case 114: {
            if (close_ == null) {
              Close = new global::Org.Openfeed.Close();
            }
            input.ReadMessage(Close);
            break;
          }
          case 122: {
            if (prevClose_ == null) {
              PrevClose = new global::Org.Openfeed.PrevClose();
            }
            input.ReadMessage(PrevClose);
            break;
          }
          case 130: {
            if (last_ == null) {
              Last = new global::Org.Openfeed.Last();
            }
            input.ReadMessage(Last);
            break;
          }
          case 138: {
            if (volume_ == null) {
              Volume = new global::Org.Openfeed.Volume();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 146: {
            if (settlement_ == null) {
              Settlement = new global::Org.Openfeed.Settlement();
            }
            input.ReadMessage(Settlement);
            break;
          }
          case 154: {
            if (openInterest_ == null) {
              OpenInterest = new global::Org.Openfeed.OpenInterest();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 162: {
            if (vwap_ == null) {
              Vwap = new global::Org.Openfeed.Vwap();
            }
            input.ReadMessage(Vwap);
            break;
          }
          case 170: {
            Session = input.ReadString();
            break;
          }
          case 176: {
            SummaryType = (global::Org.Openfeed.MarketSummary.Types.SummaryType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the MarketSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      // <summary>
      // Clears sets of fields
      // </summary>
      public enum ClearSet {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("ALL")] All = 1,
        [pbr::OriginalName("BA")] Ba = 2,
        [pbr::OriginalName("CUSTOM_1")] Custom1 = 3,
      }

      // <summary>
      // Used to differntiate various ddf messages.
      // </summary>
      public enum SummaryType {
        // <summary>
        // DDF 2/1 Exchange refresh
        // </summary>
        [pbr::OriginalName("EXCHANGE_REFRESH")] ExchangeRefresh = 0,
        // <summary>
        // DDF 2/6 Live Prices refresh
        // </summary>
        [pbr::OriginalName("REFRESH_LIVE_PRICE")] RefreshLivePrice = 1,
        // <summary>
        // DDF 3/C end-of-day commodity prices
        // </summary>
        [pbr::OriginalName("EOD_COMMODITY_PRICES")] EodCommodityPrices = 2,
        // <summary>
        // DDF 3/S end-of-day stock and forex prices and volume
        // </summary>
        [pbr::OriginalName("EOD_STOCK_FOREX_PRICES")] EodStockForexPrices = 3,
        // <summary>
        // DDF 3/I end-of-day commodity volume and open interest message
        // </summary>
        [pbr::OriginalName("EOD_COMMODITY_STATS")] EodCommodityStats = 4,
      }

    }
    #endregion

  }

  public sealed partial class Context : pb::IMessage<Context> {
    private static readonly pb::MessageParser<Context> _parser = new pb::MessageParser<Context>(() => new Context());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context(Context other) : this() {
      data_ = other.data_.Clone();
      tracePoints_ = other.tracePoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context Clone() {
      return new Context(this);
    }

    // <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Openfeed.ContextData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Openfeed.ContextData.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.ContextData> data_ = new pbc::RepeatedField<global::Org.Openfeed.ContextData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.ContextData> Data {
      get { return data_; }
    }

    // <summary>Field number for the "tracePoints" field.</summary>
    public const int TracePointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Openfeed.TracePoint> _repeated_tracePoints_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Openfeed.TracePoint.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.TracePoint> tracePoints_ = new pbc::RepeatedField<global::Org.Openfeed.TracePoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.TracePoint> TracePoints {
      get { return tracePoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if(!tracePoints_.Equals(other.tracePoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      hash ^= tracePoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      tracePoints_.WriteTo(output, _repeated_tracePoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      size += tracePoints_.CalculateSize(_repeated_tracePoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Context other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      tracePoints_.Add(other.tracePoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            tracePoints_.AddEntriesFrom(input, _repeated_tracePoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContextData : pb::IMessage<ContextData> {
    private static readonly pb::MessageParser<ContextData> _parser = new pb::MessageParser<ContextData>(() => new ContextData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextData(ContextData other) : this() {
      id_ = other.id_;
      switch (other.DataCase) {
        case DataOneofCase.Vstring:
          Vstring = other.Vstring;
          break;
        case DataOneofCase.Vbytes:
          Vbytes = other.Vbytes;
          break;
        case DataOneofCase.Vbool:
          Vbool = other.Vbool;
          break;
        case DataOneofCase.Vsint32:
          Vsint32 = other.Vsint32;
          break;
        case DataOneofCase.Vsint64:
          Vsint64 = other.Vsint64;
          break;
        case DataOneofCase.Vfloat:
          Vfloat = other.Vfloat;
          break;
        case DataOneofCase.Vdouble:
          Vdouble = other.Vdouble;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextData Clone() {
      return new ContextData(this);
    }

    // <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "vstring" field.</summary>
    public const int VstringFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vstring {
      get { return dataCase_ == DataOneofCase.Vstring ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Vstring;
      }
    }

    // <summary>Field number for the "vbytes" field.</summary>
    public const int VbytesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Vbytes {
      get { return dataCase_ == DataOneofCase.Vbytes ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Vbytes;
      }
    }

    // <summary>Field number for the "vbool" field.</summary>
    public const int VboolFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vbool {
      get { return dataCase_ == DataOneofCase.Vbool ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Vbool;
      }
    }

    // <summary>Field number for the "vsint32" field.</summary>
    public const int Vsint32FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vsint32 {
      get { return dataCase_ == DataOneofCase.Vsint32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Vsint32;
      }
    }

    // <summary>Field number for the "vsint64" field.</summary>
    public const int Vsint64FieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Vsint64 {
      get { return dataCase_ == DataOneofCase.Vsint64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Vsint64;
      }
    }

    // <summary>Field number for the "vfloat" field.</summary>
    public const int VfloatFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vfloat {
      get { return dataCase_ == DataOneofCase.Vfloat ? (float) data_ : 0F; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Vfloat;
      }
    }

    // <summary>Field number for the "vdouble" field.</summary>
    public const int VdoubleFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vdouble {
      get { return dataCase_ == DataOneofCase.Vdouble ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Vdouble;
      }
    }

    private object data_;
    // <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Vstring = 5,
      Vbytes = 6,
      Vbool = 7,
      Vsint32 = 8,
      Vsint64 = 9,
      Vfloat = 10,
      Vdouble = 11,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Vstring != other.Vstring) return false;
      if (Vbytes != other.Vbytes) return false;
      if (Vbool != other.Vbool) return false;
      if (Vsint32 != other.Vsint32) return false;
      if (Vsint64 != other.Vsint64) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vfloat, other.Vfloat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vdouble, other.Vdouble)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (dataCase_ == DataOneofCase.Vstring) hash ^= Vstring.GetHashCode();
      if (dataCase_ == DataOneofCase.Vbytes) hash ^= Vbytes.GetHashCode();
      if (dataCase_ == DataOneofCase.Vbool) hash ^= Vbool.GetHashCode();
      if (dataCase_ == DataOneofCase.Vsint32) hash ^= Vsint32.GetHashCode();
      if (dataCase_ == DataOneofCase.Vsint64) hash ^= Vsint64.GetHashCode();
      if (dataCase_ == DataOneofCase.Vfloat) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vfloat);
      if (dataCase_ == DataOneofCase.Vdouble) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vdouble);
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (dataCase_ == DataOneofCase.Vstring) {
        output.WriteRawTag(42);
        output.WriteString(Vstring);
      }
      if (dataCase_ == DataOneofCase.Vbytes) {
        output.WriteRawTag(50);
        output.WriteBytes(Vbytes);
      }
      if (dataCase_ == DataOneofCase.Vbool) {
        output.WriteRawTag(56);
        output.WriteBool(Vbool);
      }
      if (dataCase_ == DataOneofCase.Vsint32) {
        output.WriteRawTag(64);
        output.WriteSInt32(Vsint32);
      }
      if (dataCase_ == DataOneofCase.Vsint64) {
        output.WriteRawTag(72);
        output.WriteSInt64(Vsint64);
      }
      if (dataCase_ == DataOneofCase.Vfloat) {
        output.WriteRawTag(85);
        output.WriteFloat(Vfloat);
      }
      if (dataCase_ == DataOneofCase.Vdouble) {
        output.WriteRawTag(89);
        output.WriteDouble(Vdouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (dataCase_ == DataOneofCase.Vstring) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vstring);
      }
      if (dataCase_ == DataOneofCase.Vbytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Vbytes);
      }
      if (dataCase_ == DataOneofCase.Vbool) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.Vsint32) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Vsint32);
      }
      if (dataCase_ == DataOneofCase.Vsint64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Vsint64);
      }
      if (dataCase_ == DataOneofCase.Vfloat) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.Vdouble) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextData other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      switch (other.DataCase) {
        case DataOneofCase.Vstring:
          Vstring = other.Vstring;
          break;
        case DataOneofCase.Vbytes:
          Vbytes = other.Vbytes;
          break;
        case DataOneofCase.Vbool:
          Vbool = other.Vbool;
          break;
        case DataOneofCase.Vsint32:
          Vsint32 = other.Vsint32;
          break;
        case DataOneofCase.Vsint64:
          Vsint64 = other.Vsint64;
          break;
        case DataOneofCase.Vfloat:
          Vfloat = other.Vfloat;
          break;
        case DataOneofCase.Vdouble:
          Vdouble = other.Vdouble;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 42: {
            Vstring = input.ReadString();
            break;
          }
          case 50: {
            Vbytes = input.ReadBytes();
            break;
          }
          case 56: {
            Vbool = input.ReadBool();
            break;
          }
          case 64: {
            Vsint32 = input.ReadSInt32();
            break;
          }
          case 72: {
            Vsint64 = input.ReadSInt64();
            break;
          }
          case 85: {
            Vfloat = input.ReadFloat();
            break;
          }
          case 89: {
            Vdouble = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Tracing
  // </summary>
  public sealed partial class TracePoint : pb::IMessage<TracePoint> {
    private static readonly pb::MessageParser<TracePoint> _parser = new pb::MessageParser<TracePoint>(() => new TracePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePoint(TracePoint other) : this() {
      id_ = other.id_;
      componentId_ = other.componentId_;
      timestampNs_ = other.timestampNs_;
      componentLatencyNs_ = other.componentLatencyNs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePoint Clone() {
      return new TracePoint(this);
    }

    // <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 2;
    private string componentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComponentId {
      get { return componentId_; }
      set {
        componentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "timestampNs" field.</summary>
    public const int TimestampNsFieldNumber = 3;
    private long timestampNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampNs {
      get { return timestampNs_; }
      set {
        timestampNs_ = value;
      }
    }

    // <summary>Field number for the "componentLatencyNs" field.</summary>
    public const int ComponentLatencyNsFieldNumber = 4;
    private int componentLatencyNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentLatencyNs {
      get { return componentLatencyNs_; }
      set {
        componentLatencyNs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ComponentId != other.ComponentId) return false;
      if (TimestampNs != other.TimestampNs) return false;
      if (ComponentLatencyNs != other.ComponentLatencyNs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ComponentId.Length != 0) hash ^= ComponentId.GetHashCode();
      if (TimestampNs != 0L) hash ^= TimestampNs.GetHashCode();
      if (ComponentLatencyNs != 0) hash ^= ComponentLatencyNs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ComponentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ComponentId);
      }
      if (TimestampNs != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TimestampNs);
      }
      if (ComponentLatencyNs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ComponentLatencyNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ComponentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComponentId);
      }
      if (TimestampNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimestampNs);
      }
      if (ComponentLatencyNs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentLatencyNs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracePoint other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ComponentId.Length != 0) {
        ComponentId = other.ComponentId;
      }
      if (other.TimestampNs != 0L) {
        TimestampNs = other.TimestampNs;
      }
      if (other.ComponentLatencyNs != 0) {
        ComponentLatencyNs = other.ComponentLatencyNs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ComponentId = input.ReadString();
            break;
          }
          case 24: {
            TimestampNs = input.ReadSInt64();
            break;
          }
          case 32: {
            ComponentLatencyNs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // TCP replay request.
  // </summary>
  public sealed partial class TCPHistoricalReplayRequest : pb::IMessage<TCPHistoricalReplayRequest> {
    private static readonly pb::MessageParser<TCPHistoricalReplayRequest> _parser = new pb::MessageParser<TCPHistoricalReplayRequest>(() => new TCPHistoricalReplayRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPHistoricalReplayRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPHistoricalReplayRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPHistoricalReplayRequest(TCPHistoricalReplayRequest other) : this() {
      channel_ = other.channel_;
      resetNumber_ = other.resetNumber_;
      sequence_ = other.sequence_;
      count_ = other.count_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPHistoricalReplayRequest Clone() {
      return new TCPHistoricalReplayRequest(this);
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    // <summary>Field number for the "resetNumber" field.</summary>
    public const int ResetNumberFieldNumber = 2;
    private int resetNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetNumber {
      get { return resetNumber_; }
      set {
        resetNumber_ = value;
      }
    }

    // <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 3;
    private long sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    // <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    // <summary>Field number for the "requestId" field.</summary>
    public const int RequestIdFieldNumber = 5;
    private string requestId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPHistoricalReplayRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPHistoricalReplayRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (ResetNumber != other.ResetNumber) return false;
      if (Sequence != other.Sequence) return false;
      if (Count != other.Count) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (ResetNumber != 0) hash ^= ResetNumber.GetHashCode();
      if (Sequence != 0L) hash ^= Sequence.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (ResetNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResetNumber);
      }
      if (Sequence != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Sequence);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (ResetNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetNumber);
      }
      if (Sequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPHistoricalReplayRequest other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.ResetNumber != 0) {
        ResetNumber = other.ResetNumber;
      }
      if (other.Sequence != 0L) {
        Sequence = other.Sequence;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 16: {
            ResetNumber = input.ReadInt32();
            break;
          }
          case 24: {
            Sequence = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 42: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  // <summary>
  // Request for the snapshot to the Market state.
  // </summary>
  public sealed partial class SnapshotRequest : pb::IMessage<SnapshotRequest> {
    private static readonly pb::MessageParser<SnapshotRequest> _parser = new pb::MessageParser<SnapshotRequest>(() => new SnapshotRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest(SnapshotRequest other) : this() {
      channel_ = other.channel_;
      resetNumber_ = other.resetNumber_;
      requestId_ = other.requestId_;
      snapshotRequestTypes_ = other.snapshotRequestTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest Clone() {
      return new SnapshotRequest(this);
    }

    // <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    // <summary>Field number for the "resetNumber" field.</summary>
    public const int ResetNumberFieldNumber = 2;
    private int resetNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetNumber {
      get { return resetNumber_; }
      set {
        resetNumber_ = value;
      }
    }

    // <summary>Field number for the "requestId" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private string requestId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "snapshotRequestTypes" field.</summary>
    public const int SnapshotRequestTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType> _repeated_snapshotRequestTypes_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType) x);
    private readonly pbc::RepeatedField<global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType> snapshotRequestTypes_ = new pbc::RepeatedField<global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.SnapshotRequest.Types.SnapshotRequestType> SnapshotRequestTypes {
      get { return snapshotRequestTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (ResetNumber != other.ResetNumber) return false;
      if (RequestId != other.RequestId) return false;
      if(!snapshotRequestTypes_.Equals(other.snapshotRequestTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (ResetNumber != 0) hash ^= ResetNumber.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      hash ^= snapshotRequestTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (ResetNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResetNumber);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestId);
      }
      snapshotRequestTypes_.WriteTo(output, _repeated_snapshotRequestTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (ResetNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetNumber);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      size += snapshotRequestTypes_.CalculateSize(_repeated_snapshotRequestTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.ResetNumber != 0) {
        ResetNumber = other.ResetNumber;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      snapshotRequestTypes_.Add(other.snapshotRequestTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 16: {
            ResetNumber = input.ReadInt32();
            break;
          }
          case 26: {
            RequestId = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            snapshotRequestTypes_.AddEntriesFrom(input, _repeated_snapshotRequestTypes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the SnapshotRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SnapshotRequestType {
        [pbr::OriginalName("ALL")] All = 0,
        [pbr::OriginalName("QUOTE")] Quote = 1,
        [pbr::OriginalName("DEPTH")] Depth = 2,
        [pbr::OriginalName("VOLUME_AT_PRICE")] VolumeAtPrice = 3,
      }

    }
    #endregion

  }

  // <summary>
  // The VolumeAtPrice class encapsulates all of the trades throughout the day,
  // and organizes a table of volume at prices.
  // </summary>
  public sealed partial class VolumeAtPrice : pb::IMessage<VolumeAtPrice> {
    private static readonly pb::MessageParser<VolumeAtPrice> _parser = new pb::MessageParser<VolumeAtPrice>(() => new VolumeAtPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeAtPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeAtPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeAtPrice(VolumeAtPrice other) : this() {
      marketId_ = other.marketId_;
      symbol_ = other.symbol_;
      transactionTime_ = other.transactionTime_;
      lastPrice_ = other.lastPrice_;
      lastQuantity_ = other.lastQuantity_;
      lastCumulativeVolume_ = other.lastCumulativeVolume_;
      tradeDate_ = other.tradeDate_;
      priceVolumes_ = other.priceVolumes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeAtPrice Clone() {
      return new VolumeAtPrice(this);
    }

    // <summary>Field number for the "marketId" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private long marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    // <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "transactionTime" field.</summary>
    public const int TransactionTimeFieldNumber = 3;
    private long transactionTime_;
    // <summary>
    // UTC Timestamp of transaction, nano seconds since Unix epoch
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionTime {
      get { return transactionTime_; }
      set {
        transactionTime_ = value;
      }
    }

    // <summary>Field number for the "lastPrice" field.</summary>
    public const int LastPriceFieldNumber = 4;
    private long lastPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    // <summary>Field number for the "lastQuantity" field.</summary>
    public const int LastQuantityFieldNumber = 5;
    private long lastQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastQuantity {
      get { return lastQuantity_; }
      set {
        lastQuantity_ = value;
      }
    }

    // <summary>Field number for the "lastCumulativeVolume" field.</summary>
    public const int LastCumulativeVolumeFieldNumber = 6;
    private long lastCumulativeVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCumulativeVolume {
      get { return lastCumulativeVolume_; }
      set {
        lastCumulativeVolume_ = value;
      }
    }

    // <summary>Field number for the "tradeDate" field.</summary>
    public const int TradeDateFieldNumber = 7;
    private int tradeDate_;
    // <summary>
    // Date only, format 2012-07-04 -> 20120704
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    // <summary>Field number for the "priceVolumes" field.</summary>
    public const int PriceVolumesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume> _repeated_priceVolumes_codec
        = pb::FieldCodec.ForMessage(66, global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume.Parser);
    private readonly pbc::RepeatedField<global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume> priceVolumes_ = new pbc::RepeatedField<global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Openfeed.VolumeAtPrice.Types.PriceLevelVolume> PriceVolumes {
      get { return priceVolumes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeAtPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeAtPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (Symbol != other.Symbol) return false;
      if (TransactionTime != other.TransactionTime) return false;
      if (LastPrice != other.LastPrice) return false;
      if (LastQuantity != other.LastQuantity) return false;
      if (LastCumulativeVolume != other.LastCumulativeVolume) return false;
      if (TradeDate != other.TradeDate) return false;
      if(!priceVolumes_.Equals(other.priceVolumes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0L) hash ^= MarketId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TransactionTime != 0L) hash ^= TransactionTime.GetHashCode();
      if (LastPrice != 0L) hash ^= LastPrice.GetHashCode();
      if (LastQuantity != 0L) hash ^= LastQuantity.GetHashCode();
      if (LastCumulativeVolume != 0L) hash ^= LastCumulativeVolume.GetHashCode();
      if (TradeDate != 0) hash ^= TradeDate.GetHashCode();
      hash ^= priceVolumes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (TransactionTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TransactionTime);
      }
      if (LastPrice != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(LastPrice);
      }
      if (LastQuantity != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(LastQuantity);
      }
      if (LastCumulativeVolume != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(LastCumulativeVolume);
      }
      if (TradeDate != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(TradeDate);
      }
      priceVolumes_.WriteTo(output, _repeated_priceVolumes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TransactionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionTime);
      }
      if (LastPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastPrice);
      }
      if (LastQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastQuantity);
      }
      if (LastCumulativeVolume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastCumulativeVolume);
      }
      if (TradeDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TradeDate);
      }
      size += priceVolumes_.CalculateSize(_repeated_priceVolumes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeAtPrice other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0L) {
        MarketId = other.MarketId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TransactionTime != 0L) {
        TransactionTime = other.TransactionTime;
      }
      if (other.LastPrice != 0L) {
        LastPrice = other.LastPrice;
      }
      if (other.LastQuantity != 0L) {
        LastQuantity = other.LastQuantity;
      }
      if (other.LastCumulativeVolume != 0L) {
        LastCumulativeVolume = other.LastCumulativeVolume;
      }
      if (other.TradeDate != 0) {
        TradeDate = other.TradeDate;
      }
      priceVolumes_.Add(other.priceVolumes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            TransactionTime = input.ReadSInt64();
            break;
          }
          case 32: {
            LastPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            LastQuantity = input.ReadSInt64();
            break;
          }
          case 48: {
            LastCumulativeVolume = input.ReadSInt64();
            break;
          }
          case 56: {
            TradeDate = input.ReadSInt32();
            break;
          }
          case 66: {
            priceVolumes_.AddEntriesFrom(input, _repeated_priceVolumes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    // <summary>Container for nested types declared in the VolumeAtPrice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PriceLevelVolume : pb::IMessage<PriceLevelVolume> {
        private static readonly pb::MessageParser<PriceLevelVolume> _parser = new pb::MessageParser<PriceLevelVolume>(() => new PriceLevelVolume());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PriceLevelVolume> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.Openfeed.VolumeAtPrice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriceLevelVolume() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriceLevelVolume(PriceLevelVolume other) : this() {
          price_ = other.price_;
          volume_ = other.volume_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriceLevelVolume Clone() {
          return new PriceLevelVolume(this);
        }

        // <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 1;
        private long price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        // <summary>Field number for the "volume" field.</summary>
        public const int VolumeFieldNumber = 2;
        private long volume_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Volume {
          get { return volume_; }
          set {
            volume_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PriceLevelVolume);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PriceLevelVolume other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Price != other.Price) return false;
          if (Volume != other.Volume) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Price != 0L) hash ^= Price.GetHashCode();
          if (Volume != 0L) hash ^= Volume.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Price != 0L) {
            output.WriteRawTag(8);
            output.WriteSInt64(Price);
          }
          if (Volume != 0L) {
            output.WriteRawTag(16);
            output.WriteSInt64(Volume);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Price != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Price);
          }
          if (Volume != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Volume);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PriceLevelVolume other) {
          if (other == null) {
            return;
          }
          if (other.Price != 0L) {
            Price = other.Price;
          }
          if (other.Volume != 0L) {
            Volume = other.Volume;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Price = input.ReadSInt64();
                break;
              }
              case 16: {
                Volume = input.ReadSInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  // <summary>
  // Open,High,Low,Close
  // </summary>
  public sealed partial class Ohlc : pb::IMessage<Ohlc> {
    private static readonly pb::MessageParser<Ohlc> _parser = new pb::MessageParser<Ohlc>(() => new Ohlc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ohlc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Openfeed.OpenfeedReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ohlc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ohlc(Ohlc other) : this() {
      marketId_ = other.marketId_;
      symbol_ = other.symbol_;
      open_ = other.open_ != null ? other.open_.Clone() : null;
      high_ = other.high_ != null ? other.high_.Clone() : null;
      low_ = other.low_ != null ? other.low_.Clone() : null;
      close_ = other.close_ != null ? other.close_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ohlc Clone() {
      return new Ohlc(this);
    }

    // <summary>Field number for the "marketId" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private long marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    // <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    // <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private global::Org.Openfeed.Open open_;
    // <summary>
    // Most recent opening price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Open Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    // <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 4;
    private global::Org.Openfeed.High high_;
    // <summary>
    // High price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.High High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    // <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 5;
    private global::Org.Openfeed.Low low_;
    // <summary>
    // Low price for the trading session
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Low Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    // <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 6;
    private global::Org.Openfeed.Close close_;
    // <summary>
    // Most recent closing price
    // </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Openfeed.Close Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ohlc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ohlc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(High, other.High)) return false;
      if (!object.Equals(Low, other.Low)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0L) hash ^= MarketId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (high_ != null) hash ^= High.GetHashCode();
      if (low_ != null) hash ^= Low.GetHashCode();
      if (close_ != null) hash ^= Close.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarketId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(MarketId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (open_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Open);
      }
      if (high_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(High);
      }
      if (low_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Low);
      }
      if (close_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Close);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MarketId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (open_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (high_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(High);
      }
      if (low_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Low);
      }
      if (close_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ohlc other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0L) {
        MarketId = other.MarketId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.open_ != null) {
        if (open_ == null) {
          Open = new global::Org.Openfeed.Open();
        }
        Open.MergeFrom(other.Open);
      }
      if (other.high_ != null) {
        if (high_ == null) {
          High = new global::Org.Openfeed.High();
        }
        High.MergeFrom(other.High);
      }
      if (other.low_ != null) {
        if (low_ == null) {
          Low = new global::Org.Openfeed.Low();
        }
        Low.MergeFrom(other.Low);
      }
      if (other.close_ != null) {
        if (close_ == null) {
          Close = new global::Org.Openfeed.Close();
        }
        Close.MergeFrom(other.Close);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadSInt64();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (open_ == null) {
              Open = new global::Org.Openfeed.Open();
            }
            input.ReadMessage(Open);
            break;
          }
          case 34: {
            if (high_ == null) {
              High = new global::Org.Openfeed.High();
            }
            input.ReadMessage(High);
            break;
          }
          case 42: {
            if (low_ == null) {
              Low = new global::Org.Openfeed.Low();
            }
            input.ReadMessage(Low);
            break;
          }
          case 50: {
            if (close_ == null) {
              Close = new global::Org.Openfeed.Close();
            }
            input.ReadMessage(Close);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
